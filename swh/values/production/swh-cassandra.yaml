namespace: swh-cassandra

cassandraROStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: false
  consistencyLevel: LOCAL_QUORUM
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-ro
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-ro-password

cassandraChecksROStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: false
  consistencyLevel: LOCAL_QUORUM
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-ro
    password: ${CASSANDRA_PASSWORD}
  specificOptions:
    directory_entries_insert_algo: batch
    objstorage:
      cls: noop
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-ro-password

cassandraReplayerStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  objstorageConfigurationRef: noopObjstorageConfiguration

cassandraStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  objstorageConfigurationRef: roObjstorageConfiguration

cassandraReadOnlyStorageConfiguration:
  storageConfigurationRef: cassandraROStorage
  objstorageConfigurationRef: roObjstorageConfiguration

scrubberROStorageConfiguration:
  storageConfigurationRef: cassandraROStorage

scrubberObjstorageJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  group_id: swh-archive-prod-objstoragechecker
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  prefix: swh.journal.objects
  message.max.bytes: "524288000"
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

# (Not so) readonly (namespace local) storage
# TODO: Use a true read-only storage
localRpcROStorageService:
  cls: remote
  url: http://storage-cassandra-read-only-rpc-ingress

rpcROStorageCassandraWithRetryConfiguration:
  pipelineStepsRef: retryStoragePipelineSteps
  storageConfigurationRef: localRpcROStorageService

remoteCassandraStorageConfiguration:
  cls: remote
  url: http://storage-cassandra-read-only-rpc-ingress

storageReplayerJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  prefix: swh.journal.objects
  message.max.bytes: "524288000"
  # Both to write some data to privileged topic and use the error_reporter config
  privileged: true
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

storageReplayer:
  enabled: true
  journalClientConfigurationRef: storageReplayerJournalClientConfiguration
  storageConfigurationRef: cassandraReplayerStorageConfiguration
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  error_reporter:
    host: redis-cassandra-replayers.redis
    port: 6379
    db: 1
  deployments:
    content:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-content
        object_types:
          - content
      requestedCpu: 425m
      requestedMemory: 200Mi
      autoScaling:
        maxReplicaCount: 64
    directory:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-directory
        object_types:
          - directory
        batch_size: 250
      # Full replay
      requestedCpu: 500m
      requestedMemory: 250Mi
      # Follow up consumption
      # requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 10
    extid:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-extid
        object_types:
          - extid
        batch_size: 1000
      # Full replay
      # requestedCpu: 400m
      requestedMemory: 200Mi
      # Follow up consumption
      requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    metadata:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-metadata
        object_types:
          - metadata_authority
          - metadata_fetcher
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-raw-extrinsic-metadata
        object_types:
        - raw_extrinsic_metadata
        batch_size: 250
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      # follow up consumption
      # requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-origin
        object_types:
          - origin
        batch_size: 1000
      # Full replay
      # requestedCpu: 400m
      requestedMemory: 200Mi
      # Follow up consumption
      requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-origin-visit
        object_types:
          - origin_visit
        batch_size: 1000
      # Full replay
      requestedCpu: 400m
      requestedMemory: 400Mi
      # Follow up consumption
      # requestedCpu: 100m
      # requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-origin-visit-status
        object_types:
          - origin_visit_status
        batch_size: 1000
      # Full replay
      requestedCpu: 500m
      requestedMemory: 300Mi
      # Follow up consumption
      # requestedCpu: 55m
      # requestedMemory: 200Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-release
        object_types:
          - release
        batch_size: 1000
      # Full replay
      # requestedCpu: 600m
      requestedMemory: 300Mi
      # follow up consumption
      requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    revision:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-revision
        object_types:
          - revision
        batch_size: 1000
      # Full replay
      # requestedCpu: 750m
      # requestedMemory: 750Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 400Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-skipped-content
        object_types:
          - skipped_content
        batch_size: 100
      # Full replay
      # requestedCpu: 300m
      requestedMemory: 400Mi
      # follow up consumption
      requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      journalClientOverrides:
        group_id: swh-cassandra-prod-cassandra-replayer-snapshot
        object_types:
          - snapshot
      batchSize: 250
      # Full replay
      # requestedCpu: 400m
      requestedMemory: 250Mi
      # follow up consumption
      requestedCpu: 80m
      autoScaling:
        maxReplicaCount: 5

readOnlyCassandraStorageConfiguration:
  pipelineStepsRef: maskingStoragePipelineSteps
  storageConfigurationRef: cassandraROStorage
  objstorageConfigurationRef: roObjstorageBestEffortConfiguration

storage:
  enabled: true
  gunicorn:
    workers: 2
    threads: 4
    timeout: 3600
  deployments:
    # public facing instance (behind authentication)
    cassandra-readonly:
      enabled: true
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 3
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1.5Gi
      storageConfigurationRef: cassandraReadOnlyStorageConfiguration
      hosts:
        - storage-cassandra-ro.softwareheritage.org
      ingress:
        enabled: true
        tlsEnabled: false
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            authentication: swh-cassandra/ingress-storage-cassandra-ro-auth-secrets
    # Use cassandra readonly instance
    cassandra-readonly-internal:
      enabled: true
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 3
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1.5Gi
      storageConfigurationRef: cassandraReadOnlyStorageConfiguration
      hosts:
        - storage-cassandra-read-only-rpc-ingress
      ingress:
        enabled: true
        tlsEnabled: false
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
    cassandra-azure-readonly:
      enabled: true
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 30
      requestedCpu: 500m
      requestedMemory: 1.5Gi
      storageConfigurationRef: readOnlyCassandraStorageConfiguration
      hosts:
        # TODO: Drop "-swh-cassandra" when decommissioning the swh one
        - storage-azure-read-only-rpc-ingress-swh-cassandra
        # TODO: Uncomment (and rename -cassandra) when decommissioning the swh one
        # - storage-postgresql-ro.internal.softwareheritage.org
      ingress:
        enabled: true
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      gunicorn:
        threads: 4
        workers: 8
    # Future main instance used by the writing workload (loaders)
    cassandra-winery:
      # TODO: Enable when writing services has been migrated and we also decommission
      # the equivalent one in the namespace swh
      enabled: false
      requestedCpu: 1000m
      requestedMemory: 2Gi
      autoScaling:
        minReplicaCount: 4
        maxReplicaCount: 10
        cpuPercentageUsage: 50
      gunicorn:
        workers: 16
        threads: 1
        timeout: 3600
      storageConfigurationRef: rwStorageCassandraWithWineryObjstorageConfiguration
      dnsConfigurationRef: dnsConfiguration
      hosts:
        - storage-rw-cassandra-ingress
        - storage-rw-cassandra-saam-ingress
      ingress:
        enabled: true
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        endpoints:
          default:
            paths:
              - path: /
      cronjobs:
        create-object-reference-partitions:
          # Job only relevant for postgresql backends
          enabled: false

postgresqlWebConfiguration:
  host: postgresql-web-rw.internal.softwareheritage.org
  port: 5432
  db: swh-web
  user: swh-web
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-web-secrets
      secretKeyName: postgres-swh-web-password

web:
  enabled: true
  logLevel: INFO
  deployments:
    cassandra:
      metricsScrapingEnabled: false
      requestedCpu: 500m
      requestedMemory: 500Mi
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4
        cpuPercentageUsage: 50
      gunicorn:
        timeout: 3600
      hosts:
        - webapp-cassandra.internal.softwareheritage.org
      ingress:
        enabled: true
        secretName: swh-web-crt
        extraAnnotations:
          cert-manager.io/cluster-issuer: letsencrypt-production-gandi
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        tlsEnabled: true
        whitelistSourceRangeRef: internalNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              - 192.168.50.0/24 # for blackbox monitoring
              - 192.168.101.0/24 # vpn network
          static:
            extraAnnotations:
              nginx.ingress.kubernetes.io/use-regex: "true"
              nginx.ingress.kubernetes.io/rewrite-target: /static/$2
            paths:
              - path: /()(robots.txt)$
                pathType: ImplementationSpecific
                port: 80
              - path: /static(/|$)(.*)
                pathType: ImplementationSpecific
                port: 80
            extraWhitelistSourceRange:
              - 192.168.50.0/24 # for blackbox monitoring
              - 192.168.101.0/24 # vpn network
      databaseConfigurationRef: postgresqlWebConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      storageConfigurationRef: remoteCassandraStorageConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      indexerStorageConfigurationRef: remoteReadOnlyIndexerStorageConfiguration
      countersConfigurationRef: remoteCountersConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      giveConfigurationRef: giveConfiguration
      throttlingConfigurationRef: webThrottling
      addForgeNowConfigurationRef: addForgeNowConfiguration
      depositConfigurationRef: depositConfiguration
      keycloakConfigurationRef: keycloakConfiguration
      inboundEmailConfigurationRef: inboundEmailConfiguration
      djangoAppsRef: webDjangoApps
      extraConfig:
        search_config:
          metadata_backend: swh-search
        inbound_email:
          shared_key: ${INBOUND_EMAIL_SHARED_KEY}
        content_display_max_size: 5242880
        history_counters_url: http://counters-rpc-ingress/counters_history/history.json#
        es_workers_index_url: http://esnode1.internal.softwareheritage.org:9200/swh_workers-*
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

graphql:
  enabled: true
  deployments:
    cassandra:
      replicas: 1
      gunicorn:
        threads: 4
        workers: 2
        timeout: 3600
      storageConfigurationRef: rpcROStorageCassandraWithRetryConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      introspection: yes
      hosts:
        - webapp-cassandra.internal.softwareheritage.org
      ingress:
        enabled: true
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        endpoints:
          default:
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
              - 192.168.50.0/24
            paths:
              - path: /graphql/
      auth:
        enabled: false
        server: https://auth.softwareheritage.org/auth/
        realm: SoftwareHeritage
        client: swh-web
        cacheUrl: memcached://memcached:11211
      maxRawContentSize: 10000
    # (future) Main instance to serve https://archive.softwaheritage.org/graphql/
    archive:
      gunicorn:
        workers: 2
        threads: 4
        timeout: 3600
      replicas: 2
      storageConfigurationRef: rpcROStorageCassandraWithRetryConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      introspection: yes
      hosts:
        - archive.softwareheritage.org
      ingress:
        # TODO: Enable when decommissioning the swh one
        enabled: false
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        endpoints:
          default:
            paths:
              - path: /graphql/
      auth:
        enabled: true
        server: https://auth.softwareheritage.org/auth/
        realm: SoftwareHeritage
        client: swh-web
        cacheUrl: memcached://memcached:11211
      maxRawContentSize: 10000

toolbox:
  enabled: true
  configs:
    scrubber-storage:
      moduleName: scrubber
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageConfigurationRef: scrubberROStorageConfiguration
    indexer-storage:
      moduleName: indexer
      moduleConfigKey: indexer_storage
      indexerDbConfigurationRef: postgresqlIndexerStorageConfiguration
    scheduler:
      schedulerDbConfigurationRef: postgresqlSchedulerConfiguration
      celeryConfigurationRef: producerCeleryConfiguration

scrubber:
  enabled: true
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  priorityClassName: background-workload
  storageChecker:
    enabled: false
    storageConfigurationRef: scrubberROStorageConfiguration
    deployments:
      directory-references:
        configName: storage-cassandra-references-directory
        object: directory
        replicas: 8
        requestedCpu: 400m
        requestedMemory: 200Mi
      directory-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        # see also https://gitlab.softwareheritage.org/swh/infra/sysadm-environment/-/issues/5310
        enabled: false
        configName: storage-cassandra-hashes-directory
        object: directory
        replicas: 8
        requestedCpu: 400m
        requestedMemory: 200Mi
      release-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-release
        object: release
        replicas: 4
      release-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-release
        object: release
        replicas: 4
      revision-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      revision-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      snapshot-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-snapshot
        replicas: 4
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi
      snapshot-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-snapshot
        replicas: 4
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi
  objstorageChecker:
    enabled: true
    storageConfigurationRef: scrubberROStorageConfiguration
    journalClientConfigurationRef: scrubberObjstorageJournalClientConfiguration
    deployments:
      banco:
        objstorageConfigurationRef: remoteBancoReadOnlyObjstorageConfiguration
        configName: objstorage-banco-content
        replicas: 4
        requestedCpu: 400m
        requestedMemory: 200Mi
        backend:
          check: true
          migrate: false
          config:
            name: objstorage-banco-content
            objectType: content
            backend: objstorage
            checkHashes: true
            checkReferences: false
            nbPartitions: 65536
      saam:
        objstorageConfigurationRef: remoteSaamReadOnlyObjstorageConfiguration
        configName: objstorage-saam-content
        replicas: 4
        requestedCpu: 400m
        requestedMemory: 200Mi
        backend:
          check: true
          migrate: false
          config:
            name: objstorage-saam-content
            objectType: content
            backend: objstorage
            checkHashes: true
            checkReferences: false
            nbPartitions: 65536

journalClientCassandraChecksConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  message.max.bytes: 524288000
  prefix: swh.journal.objects
  group_id: swh-archive-prod-checks
  # To override per instance
  object_types: []
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

cassandraChecks:
  enabled: false
  directoryOutput: /volume/cassandra-checks-volume
  volume:
    name: cassandra-checks-volume
    mountPath: /volume
    # readOnly: true
    volumeDefinition:
      hostPath:
        path: /srv/kubernetes/volumes
        type: Directory
  priorityClassName: swh-background-workload
  nodeSelector:
    kubernetes.io/hostname: rancher-node-metal01
  storagePostgresqlConfigurationRef: postgresqlROStorageConfiguration
  storageCassandraConfigurationRef: cassandraChecksROStorage
  journalClientConfigurationRef: journalClientCassandraChecksConfiguration
  deployments:
    origin:
      enabled: false
      replicas: 4
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - origin
        batch_size: 1000
    origin-visit:
      enabled: false
      replicas: 4
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - origin_visit
        batch_size: 1000
    origin-visit-status:
      enabled: false
      replicas: 4
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - origin_visit_status
        batch_size: 1000
    skipped-content:
      enabled: false
      replicas: 1
      journalClientOverrides:
        #on_eof: stop
        object_types:
        - skipped_content
        batch_size: 1000
    content:
      replicas: 64
      journalClientOverrides:
        #on_eof: stop
        object_types:
        - content
        batch_size: 2000
    directory:
      enabled: false
      replicas: 48
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - directory
        batch_size: 400
    revision:
      enabled: false
      replicas: 24
      requestedCpu: 600m
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - revision
        batch_size: 1000
        privileged: true
    release:
      enabled: false
      replicas: 1
      journalClientOverrides:
        on_eof: stop
        object_types:
          - release
        batch_size: 1000
        privileged: true
    snapshot:
      enabled: false
      replicas: 2
      journalClientOverrides:
        #on_eof: stop
        object_types:
          - snapshot
        batch_size: 200
    extid:
      enabled: false
      replicas: 4
      journalClientOverrides:
        #on_eof: stop
        object_types:
        - extid
        batch_size: 200
    metadata:
      enabled: false
      replicas: 6
      journalClientOverrides:
        #on_eof: stop
        object_types:
        - raw_extrinsic_metadata
        batch_size: 1000

objstorage:
  enabled: true
  logLevel: WARN
  priorityClassName: frontend-rpc
  deployments:
    read-only:
      enabled: true
      gunicorn:
        threads: 4
        workers: 4
        timeout: 60
      replicas: 2
      objstorageConfigurationRef: multiplexerForLocalStoragesConfiguration
        # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-read-only-rpc-ingress-swh-cassandra
        # - objstorage.internal.softwareheritage.org
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      # TODO: Reactivate when decommissioning the production/swh.yaml
      # objstorage read-only
      # extraIngresses:
      #   # Allow access through the public reverse proxy (authenticated) for all IPs
      #   - hosts:
      #       - objstorage.softwareheritage.org
      #     whitelistSourceRangeRef: null
      #     endpoints:
      #       default:
      #         extraWhitelistSourceRange: []
      #         authentication: swh-cassandra/ingress-objstorage-ro-auth-secrets
    ro-saam-zfs:
      enabled: true
      requestedCpu: 250m
      requestedMemory: 1Gi
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 3600
      objstorageConfigurationRef: pathslicingSaamZfsObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      extraVolumes:
        pathslicing:
          mountPath: /srv/softwareheritage/objects
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory
      # Deploy only on saam
      nodeSelector:
        kubernetes.io/hostname: saam
      # And add a specific affinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: swh/objstorage-pathslicing
                operator: In
                values:
                - "true"
      # Deploy an ingress to access the objstorage
      hosts:
        # TODO: Drop "-swh-cassandra" when decommissioning the swh one
        - objstorage-ro-saam-zfs-rpc-ingress-swh-cassandra
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
          deny-write:
            paths:
              - path: /content/add
                path_type: Prefix
            extraAnnotations:
              nginx.ingress.kubernetes.io/denylist-source-range: 0.0.0.0/0
              nginx.ingress.kubernetes.io/whitelist-source-range: null
          deny-delete:
            paths:
              - path: /content/delete
                path_type: Prefix
            extraAnnotations:
              nginx.ingress.kubernetes.io/denylist-source-range: 0.0.0.0/0
              nginx.ingress.kubernetes.io/whitelist-source-range: null
      extraIngresses:
        - hosts:
            # TODO: Drop "-swh-cassandra" when decommissioning the swh one
            - objstorage-delete-saam-zfs-rpc-ingress-swh-cassandra
          endpoints:
            deny-delete: null
    ro-banco-xfs:
      enabled: true
      requestedCpu: 250m
      requestedMemory: 1Gi
      replicas: 2
      gunicorn:
        workers: 8
        threads: 1
        timeout: 3600
      objstorageConfigurationRef: pathslicingBancoXfsObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      extraVolumes:
        pathslicing:
          mountPath: /srv/softwareheritage/objects-xfs
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects-xfs
              type: Directory
      # Deploy only this specific objstorage instance on banco
      nodeSelector:
        kubernetes.io/hostname: banco
      # And add a specific affinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: swh/objstorage-pathslicing
                operator: In
                values:
                - "true"
      # Deploy an ingress to access the objstorage
      hosts:
        # TODO: Drop "-swh-cassandra" when decommissioning the swh one
        - objstorage-ro-banco-xfs-rpc-ingress-swh-cassandra
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: internalNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
          deny-write:
            paths:
              - path: /content/add
                path_type: Prefix
            extraAnnotations:
              nginx.ingress.kubernetes.io/denylist-source-range: 0.0.0.0/0
              nginx.ingress.kubernetes.io/whitelist-source-range: null
          deny-delete:
            paths:
              - path: /content/delete
                path_type: Prefix
            extraAnnotations:
              nginx.ingress.kubernetes.io/denylist-source-range: 0.0.0.0/0
              nginx.ingress.kubernetes.io/whitelist-source-range: null
      extraIngresses:
        - hosts:
            # TODO: Drop "-swh-cassandra" when decommissioning the swh one
            - objstorage-delete-banco-xfs-rpc-ingress-swh-cassandra
          endpoints:
            deny-delete: null

indexerStorage:
  enabled: true
  logLevel: INFO
  deployments:
    read-only:
      checkDbVersion: true
      gunicorn:
        workers: 4
        threads: 2
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4
        cpuPercentageUsage: 90
      requestedCpu: 500m
      requestedMemory: 512Mi
      indexerStorageConfigurationRef: postgresqlReadOnlyIndexerStorageConfiguration
      hosts:
        # TODO: Drop "-swh-cassandra" when decommissioning the swh one
        - indexer-storage-read-only-rpc-ingress-swh-cassandra
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
          nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-body-size: "4G"
        # Default allowed ip ranges that can be extended per ingress definitions paths
        whitelistSourceRangeRef: clusterNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
    read-write:
      checkDbVersion: true
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4
        cpuPercentageUsage: 90
      requestedCpu: 500m
      requestedMemory: 512Mi
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      journalWriterConfigurationRef: indexerJournalWriterConfiguration
      hosts:
        - indexer-storage-read-write-rpc-ingress-swh-cassandra
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
          nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-body-size: "4G"
        # Default allowed ip ranges that can be extended per ingress definitions paths
        whitelistSourceRangeRef: clusterNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 2
        workers: 4

scheduler:
  enabled: true
  sentry:
    enabled: true
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: producerCeleryConfiguration
  alerts:
      # TODO: Enable when decommissioning the swh one
    enabled: false
    period: 15m
    severity: warning
    tooManyMessagesInQueue:
      instances:  # We may have more than one rabbitmq per environment
        saatchi:
          threshold: 30000
  recurrent:
    # TODO: Enable when decommissioning the swh one
    enabled: false
  rpc:
    enabled: true
    # The scheduler instance to use for rpc must be a postgresql instance
    schedulerConfigurationRef: postgresqlSchedulerConfiguration
    replicas: 4
    gunicorn:
      threads: 4
      workers: 8
      timeout: 3600
    hosts:
      # Used by future add-forge-now runner0 vm
      - scheduler.internal.softwareheritage.org
      # TODO: Use this scheduler-rpc-ingress for the internal access to the scheduler
      - scheduler-rpc-ingress
    ingress:
      # TODO: Enable when decommissioning the swh one
      enabled: false
      # TODO: Improve the authorization internal cluster ip range.
      # Current internal range retrieved out of the `kubectl cluster-info dump`
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: internalNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
          extraWhitelistSourceRange:
          # add-forge-now runner0 in staging network
            - 192.168.130.221/32
        read-only:
          paths:
            - path: /scheduler_metrics/get
              pathType: Exact
            - path: /listers/get
              pathType: Exact
            - path: /lister/get
              pathType: Exact
            - path: /task_type/get
              pathType: Exact
            - path: /task_type/get_all
              pathType: Exact
          extraWhitelistSourceRange:
            # vpn network
            - 192.168.101.0/24
            # add-forge-now runner0 in staging network
            - 192.168.130.221/32
  updateMetrics:
    # TODO: Enable (if needed when svix-webhooks is off & when decommissioning the swh
    # one)
    enabled: false
    concurrencyPolicy: Forbid
    # At minute 27 past every 4th hour from 3 through 23
    cron: "27 3-23/4 * * *"
  journalClient:
    # TODO: Enable when decommissioning the swh one
    enabled: false
    journalConfigurationRef: journalClientConfiguration
  extraServices:
    # TODO: Enable when decommissioning the swh one
    enabled: false
    runner:
      logLevel: INFO
      period: 10
    runner-priority:
      logLevel: INFO
      period: 10
      extraConfig:
        - load-bzr
        - load-cvs
        - load-git
        - load-svn
        - load-archive-files
        - load-hg
    listener:
      replicas: 4
      logLevel: INFO
