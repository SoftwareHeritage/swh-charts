environment: minikube
sentry:
  enabled: false
  environment: minikube

statsd_exporter:
  enabled: false

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler-rpc:5008

fakeRemoteSearchConfiguration:
  cls: remote
  url: http://fake-search.i.s.s.n:5010

remoteVaultConfiguration:
  cls: remote
  url: http://vault-rpc:5005

fakeRemoteCountersConfiguration:
  cls: remote
  url: http://fake-counters.i.s.s.n:5011

remoteIndexerStorageConfiguration:
  cls: remote
  url: http://indexer-storage-read-write:5007

fakeRemoteObjstorageConfiguration:
  cls: remote
  url: http://storage1.i.s.s.n:3005

remoteStorageMetadataConfiguration:
  cls: remote
  url: http://storage-rpc:5002

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler-rpc:5008

fakeKeycloakConfiguration:
  server_url: https://auth.s.o/auth/
  realm_name: SwhMinikube

postgresqlStorageConfiguration:
  cls: postgresql
  host: archive-rw
  port: 5432
  db: swh
  user: ${POSTGRESQL_USERNAME}
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_USERNAME:
      secretKeyRef: swh-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-swh-postgresql-secret
      secretKeyName: password

postgresqlDepositConfiguration:
  host: deposit-rw
  port: 5432
  db: swh-deposit
  user: ${POSTGRESQL_DEPOSIT_USERNAME}
  pass: ${POSTGRESQL_DEPOSIT_PASSWORD}
  secrets:
    POSTGRESQL_DEPOSIT_USERNAME:
      secretKeyRef: swh-deposit-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_DEPOSIT_PASSWORD:
      secretKeyRef: swh-deposit-swh-postgresql-secret
      secretKeyName: password

fakeSyncmailmapsConfiguration:
  host: db1.i.s.s.n
  port: 5432
  db: swh
  user: swhmailmap
  pass: ${POSTGRESQL_MAILMAP_PASSWORD}
  secrets:
    POSTGRESQL_MAILMAP_PASSWORD:
      secretKeyRef: swhmailmap-postgresql-secret
      secretKeyName: postgres-swhmailmap-password

postgresqlIndexerStorageConfiguration:
  cls: postgresql
  host: indexer-storage-rw
  port: 5432
  db: swh-indexer-storage
  user: ${POSTGRESQL_IDX_USERNAME}
  pass: ${POSTGRESQL_IDX_PASSWORD}
  secrets:
    POSTGRESQL_IDX_USERNAME:
      secretKeyRef: swh-indexer-storage-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_IDX_PASSWORD:
      secretKeyRef: swh-indexer-storage-swh-postgresql-secret
      secretKeyName: password

postgresqlSchedulerConfiguration:
  cls: postgresql
  host: scheduler-rw
  port: 5432
  db: swh-scheduler
  user: ${POSTGRESQL_USERNAME}
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_USERNAME:
      secretKeyRef: swh-scheduler-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scheduler-swh-postgresql-secret
      secretKeyName: password

postgresqlScrubberConfiguration:
  cls: postgresql
  host: scrubber-rw
  port: 5432
  db: swh-scrubber
  user: ${POSTGRESQL_SCRUBBER_USERNAME}
  pass: ${POSTGRESQL_SCRUBBER_PASSWORD}
  secrets:
    POSTGRESQL_SCRUBBER_USERNAME:
      secretKeyRef: swh-scrubber-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_SCRUBBER_PASSWORD:
      secretKeyRef: swh-scrubber-swh-postgresql-secret
      secretKeyName: password

postgresqlWebConfiguration:
  host: web-rw
  port: 5432
  db: swh-web
  user: ${POSTGRESQL_WEB_USERNAME}
  pass: ${POSTGRESQL_WEB_PASSWORD}
  secrets:
    POSTGRESQL_WEB_USERNAME:
      secretKeyRef: swh-web-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_WEB_PASSWORD:
      secretKeyRef: swh-web-swh-postgresql-secret
      secretKeyName: password

postgresqlVaultConfiguration:
  cls: postgresql
  host: vault-rw
  port: '5432'
  db: swh-vault
  user: ${POSTGRESQL_VAULT_USERNAME}
  pass: ${POSTGRESQL_VAULT_PASSWORD}
  secrets:
    POSTGRESQL_VAULT_USERNAME:
      secretKeyRef: swh-vault-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_VAULT_PASSWORD:
      secretKeyRef: swh-vault-swh-postgresql-secret
      secretKeyName: password

readOnlyStoragePipelineSteps:
  - cls: retry

remoteStorageConfiguration:
  cls: remote
  url: http://storage-rpc:5002

remoteROStorageConfiguration:
  pipelineStepsRef: readOnlyStoragePipelineSteps
  storageConfigurationRef: remoteStorageConfiguration

djangoWebConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: webapp-django-secrets
      secretKeyName: webapp-django-secret-key

djangoDepositConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: deposit-django-secrets
      secretKeyName: deposit-django-secret-key

remoteStorageConfigurationRef:
  storageConfigurationRef: remoteStorageConfiguration

postgresqlStorageConfigurationPipeline:
  storageConfigurationRef: postgresqlStorageConfiguration

kafkaBrokers:
  - fakeBroker1
  - fakeBroker2

journalClientConfiguration:
  brokersConfigurationRef: kafkaBrokers
  group_id: swh.scheduler.journal_client
  prefix: swh.toto
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: swh-minikube
  sasl.password: ${BROKER_USER_PASSWORD}
  secrets:
    BROKER_USER_PASSWORD:
      secretKeyRef: broker-secrets # Any secret can do the job
      secretKeyName: password

searchJournalClientConfiguration:
  brokersConfigurationRef: kafkaBrokers
  group_id: swh.search.journal_client
  prefix: swh.toto
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: swh-minikube
  sasl.password: ${BROKER_USER_PASSWORD}
  secrets:
    BROKER_USER_PASSWORD:
      secretKeyRef: deposit-secrets # Any secret can do the job
      secretKeyName: username

depositApiConfiguration:
  host: deposit-rpc
  user: ${DEPOSIT_API_USERNAME}
  pass: ${DEPOSIT_API_PASSWORD}
  secrets:
    DEPOSIT_API_USERNAME:
      secretKeyRef: deposit-secrets
      secretKeyName: username
    DEPOSIT_API_PASSWORD:
      secretKeyRef: deposit-secrets
      secretKeyName: password

storage:
  enabled: false
  deployments:
    archive:
      storageConfigurationRef: postgresqlStorageConfigurationPipeline
      backend:
        initialize:
          adminSecret: archive-superuser
          database: swh
        check: true
        migrate: true
      cronjobs:
        foobar-action:
          enabled: false
          logLevel: INFO
          cron: "0 0 1 * *"

storage_replayer:
  enabled: false
  sentry:
    enabled: false
  journalBrokers:
    hosts:
      - journal2.i.s.s.n:4909
    user: swh-postgresql-stg
    groupIdName: postgresql
  storageConfigurationRef: remoteStorageConfigurationRef
  checkDbVersion: false
  deployments:
    content:
      objects:
        - content
  requestedMemory: 50Mi
  requestedCpu: 50m

internalNetworkRanges:
  - 127.0.0.0/8
  - 192.168.100.0/24

externalAuthorizedNetworkRanges:
  # Not really external, but to exercise this part
  - 10.100.100.0/24

webThrottling:
  # Those are authorized networks to exemple for each scope
  internalExemptedNetworkRangesRef: internalNetworkRanges
  externalExemptedNetworkRangesRef: externalAuthorizedNetworkRanges
  # The memcached url, mandatory
  cache_uri: fake-memcached:11211
  scopes_with_exempted_networks:
    swh_api:
      limiter_rate:
        default: 120/h
      exempted_networks:
        # Extra specific network ranges to append to the other network
        - 192.168.102.0/24
  scopes:
    swh_api_origin_search:
      limiter_rate:
        default: 120/h

web:
  enabled: false
  deployments:
    minikube:
      enabled: true
      migrations:
        enabled: true
      replicas: 1
      # autoScaling:
      #   minReplicaCount: 1
      #   maxReplicaCount: 1
      #   cpuPercentageUsage: 50
      hosts:
        - web-minikube
      storageConfigurationRef: remoteStorageConfiguration
      searchConfigurationRef: fakeRemoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      countersConfigurationRef: fakeRemoteCountersConfiguration
      databaseConfigurationRef: postgresqlWebConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      depositConfigurationRef: depositApiConfiguration
      giveConfigurationRef: giveConfiguration
      # throttlingConfigurationRef: webThrottling
      # keycloakConfigurationRef: fakeKeycloakConfiguration
      ingress:
        enabled: false
        # tlsEnabled: true
        # extraAnnotations:
        #   nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
        #   nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
        #   nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        #   nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
        #   nginx.ingress.kubernetes.io/proxy-body-size: "4G"
        # whitelistSourceRangeRef: internalNetworkRanges
        # endpoints:
        #   default:
        #     paths:
        #       - path: /
        #       - path: /static
        #         port: 80
        #   authenticated:
        #     paths:
        #       - path: /api/1/provenance/
        #       - path: /api/1/entity/
        #       - path: /api/1/content/[^/]+/symbol/
        #     # auth-file with authentication
        #     authentication: basic-auth
      refreshSavecodenowStatus:
        enabled: false
        cron: "* 5 * * *"
      syncMailmaps:
        enabled: false
        cron: "30 * * * *"
        configurationRef: fakeSyncmailmapsConfiguration
      sentry:
        enabled: false
        secretKeyRef: sentry-secrets
        secretKeyName: web-sentry-dsn
      extraConfig:
        debug: false
        search_config:
          metadata_backend: swh-indexer-storage
        content_display_max_size: 5242880
        history_counters_url: http://counters0.i.s.s.n:5011/counters_history/history.json
        add_forge_now:
          email_address: add-forge-now@webapp.s.s.n
        swh_extra_django_apps:
        - swh.web.add_forge_now
        - swh.web.archive_coverage
        - swh.web.badges
        - swh.web.banners
        - swh.web.deposit
        - swh.web.inbound_email
        - swh.web.jslicenses
        - swh.web.mailmap
        - swh.web.metrics
        - swh.web.save_code_now
        - swh.web.save_origin_webhooks
        - swh.web.vault
        matomo: {}
        deposit:
          private_api_url: "http://deposit-rpc/1/private/"
          private_api_user: "${DEPOSIT_API_USERNAME}"
          private_api_password: "${DEPOSIT_API_PASSWORD}"
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

fakeAzureDepositConfiguration:
  connection_string: "DefaultEndpointsProtocol=https;AccountName=swhdepositstoragestaging;AccountKey=${ACCOUNT_KEY};EndpointSuffix=core.windows.net"
  container_name: "deposit-contents"
  secrets:
    ACCOUNT_KEY:
      secretKeyRef: swh-deposit-azure-secret
      secretKeyName: azure-swh-deposit-key

deposit:
  enabled: false
  requestedMemory: 50Mi
  requestedCpu: 50m
  migrationsEnabled: true
  storageConfigurationRef: remoteStorageConfiguration
  storageMetadataConfigurationRef: remoteStorageMetadataConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  databaseConfigurationRef: postgresqlDepositConfiguration
  djangoConfigurationRef: djangoDepositConfiguration
  keycloakConfigurationRef: fakeKeycloakConfiguration
  blobstorageConfigurationRef: fakeAzureDepositConfiguration
  hosts:
    - localhost
  ingress:
    enabled: false
    tlsEnabled: true
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    whitelistSourceRangeRef: internalNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
      authenticated:
        paths:
          - path: /1/private/
        # auth-file with authentication
        authentication: swh/deposit-auth-secrets
  sentry:
    enabled: false
    secretKeyRef: sentry-secrets
    secretKeyName: deposit-sentry-dsn
  extraConfig:
    max_upload_size: 209715200
    extraction_dir: "/tmp/swh-deposit/archive/"
    cache_uri: memcached:11211

celeryConfiguration:
  host: rabbitmq-scheduler.cluster-components
  port: 5672
  user: ${AMQP_USERNAME}
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_USERNAME:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: username
    AMQP_PASSWORD:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: password

toolbox:
  enabled: true
  configs:
    storage:
      storageDbConfigurationRef: postgresqlStorageConfiguration
    scheduler:
      schedulerDbConfigurationRef: postgresqlSchedulerConfiguration
      celeryConfigurationRef: celeryConfiguration
    scrubber-storage:
      moduleName: scrubber
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageDbConfigurationRef: postgresqlStorageConfiguration
    vault:
      vaultDbConfigurationRef: postgresqlVaultConfiguration
    indexer-storage:
      moduleName: indexer
      moduleConfigKey: indexer_storage
      indexerDbConfigurationRef: postgresqlIndexerStorageConfiguration

scheduler:
  enabled: false
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  alerts:
    enabled: false
  recurrent:
    enabled: true
    schedulerPolicies:
      default:
      - policy: never_visited_oldest_update_first
        weight: 100
      opam:
      - policy: origins_without_last_update
        weight: 100
  rpc:
    enabled: true
    schedulerConfigurationRef: postgresqlSchedulerConfiguration
    replicas: 1
    gunicorn:
      threads: 1
      workers: 1
      timeout: 10
    backend:
      initialize:
        adminSecret: scheduler-superuser
        database: swh-scheduler
      check: true
      migrate: true

    # autoScaling:
    #   minReplicaCount: 4
    #   maxReplicaCount: 20
    #   cpuPercentageUsage: 150
    # hosts:
    #   - myscheduler.minikube.domain
    ingress:
      enabled: false
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: internalNetworkRanges
      endpoints:
        default:
          paths:
            - /
        read-only:
          paths:
            - /scheduler_metrics/get
            # - /task_type/get
            # - /task_type/get_all
            # - /task_run/get
            # - /listers/get
            # - /listers/get_by_id
            # - /lister/get
            # - /origins/get
            - /visit_stats/get
            # - /visit_scheduler/get
          extraWhitelistSourceRange:
            - 192.168.101.0/24

  updateMetrics:
    enabled: false
    logLevel: INFO
    # Execute at each minute
    cron: "0/10 * * * *"
  journalClient:
    enabled: false
    journalConfigurationRef: journalClientConfiguration
  extraServices:
    runner:
      enabled: true
      logLevel: INFO
      period: 100
    runner-priority:
      enabled: true
      logLevel: INFO
      period: 100
      extraConfig:
        - load-git
    listener:
      enabled: true
      logLevel: INFO

loader_metadata:
  enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  schedulerConfigurationRef: remoteSchedulerConfiguration
  consumerGroup: loader_metadata.test.journal_client
  prefix: swh.test.journal.objects
  journalBrokers:
    hosts:
      - journal2.internal.s.s.n:4909
    secretName: swh-archive-broker-secret
    user: swh-test-archive-stg
  autoScaling:
    enabled: false

checker_deposit:
  enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  celeryConfigurationRef: celeryConfiguration
  depositConfigurationRef: depositApiConfiguration

cookers:
  enabled: false
  sentry:
    enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  celeryConfigurationRef: celeryConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  deployments:
    simple:
      queues:
        - swh.vault.cooking_tasks.SWHCookingTask

indexers:
  enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  schedulerConfigurationRef: remoteSchedulerConfiguration
  indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
  objstorageConfigurationRef: fakeRemoteObjstorageConfiguration
  sentry:
    enabled: false
  journalBrokers:
    hosts:
      - journal2.internal.staging.swh.network:9094
    user: swh-archive-stg
  deployments:
    origin-intrinsic:
      indexer_type: origin_intrinsic_metadata
      consumerGroup: swh.test.indexer.journal_client.origin_intrinsic_metadata
      prefix: swh.test.journal.objects
      batch_size: 10
      extraConfig:
        tools:
          name: swh-metadata-detector
          version: 0.0.2
          configuration: {}
      requestedMemory: 50Mi
      requestedCpu: 50m

graphql:
  enabled: false
  deployments:
    fake:
      storageConfigurationRef: remoteStorageConfigurationRef
      searchConfigurationRef: fakeRemoteSearchConfiguration
      debug: no
      introspection: no
      replicas: 1
      gunicorn:
        threads: 1
        workers: 2
        timeout: 100
      ingress:
        enabled: false
      auth:
        enabled: false
      maxRawContentSize: 10000
      requestedMemory: 50Mi
      requestedCpu: 50m

listers:
  enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  deployments:
    cgit:
      queues:
      - swh.lister.cgit.tasks.CGitListerTask
      requestedMemory: 50Mi
      requestedCpu: 50m

loaders:
  enabled: false
  storageConfigurationRef: remoteStorageConfigurationRef
  celeryConfigurationRef: celeryConfiguration
  depositConfigurationRef: depositApiConfiguration
  deployments:
    git:
      priorityClassName: low-workload
      queues:
        - swh.loader.git.tasks.UpdateGitRepository
      requestedMemory: 50Mi
      requestedCpu: 50m
    deposit:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.deposit.tasks.LoadDeposit
      extraConfig:
        deposit:
          url: "https://deposit-rp.i.s.s.n/1/private"
          auth:
            username: "${DEPOSIT_API_USERNAME}"
            password: "${DEPOSIT_API_PASSWORD}"
        default_filename: archive.tar
      requestedMemory: 50Mi
      requestedCpu: 50m

memcached:
  enabled: false

podPriority:
  enabled: false

remoteROObjstorageConfiguration:
  cls: read-only
  storage:
    cls: remote
    url: http://storage1.i.s.s.n:5003/

azureCacheConfiguration:
  cls: azure
  account_name: fakevaultstorageaccount
  api_secret_key: ${API_SECRET_KEY}
  container_name: contents
  secrets:
    API_SECRET_KEY:
      secretKeyRef: swh-vault-azure-secret
      secretKeyName: azure-swh-vault-key

vault:
  enabled: false
  priorityClassName: frontend-rpc
  sentry:
    enabled: false
    secretKeyRef: vault-sentry-secrets
    secretKeyName: sentry-dsn
  backend:
    initialize:
      adminSecret: vault-superuser
      database: swh-vault
    check: true
    migrate: true

  logLevel: INFO
  vaultConfigurationRef: postgresqlVaultConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  objstorageConfigurationRef: remoteROObjstorageConfiguration
  cacheConfigurationRef: azureCacheConfiguration

  # The scheduler instance to use for rpc must be a postgresql instance
  schedulerConfigurationRef: postgresqlSchedulerConfiguration
  replicas: 1
  gunicorn:
    threads: 5
    workers: 2
    timeout: 60
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  limitedMemory: 512Mi
  limitedCpu: 500m
  replicas: 1
  # autoScaling:
  #   minReplicaCount: 2
  #   maxReplicaCount: 10
  #   cpuPercentageUsage: 100
  hosts:
    - vault.localdomain
  ingress:
    enabled: false
    # Optional: the ingress classname to use
    # className: nginx
    # mandatory if ingress is enabled
    # the hostname on which the storage must be reachable
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    # Default allowed ip ranges that can be extended per ingress definitions paths
    whitelistSourceRangeDef: internalNetworkRanges
    endpoints:
      default:
        paths:
          - /
      read-only:
        paths:
          - /vault_metrics/get
        # Extra allowed ip range for the paths above
        extraWhitelistSourceRange:
          - 192.168.101.0/24

indexerJournalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  cls: kafka
  anonymize: true
  client_id: swh.indexer-storage.journal_writer.storage
  prefix: swh.journal.objects
  producer_config:
    message.max.bytes: 1000000000

indexerStorage:
  enabled: false
  deployments:
    read-write:
      enabled: true
      backend:
        # When true, initalize the backend, leave it empty to do nothing
        initialize:
          adminSecret: indexer-storage-superuser
          database: swh-indexer-storage
        # When true, check db & code versions and do not start if they diverge
        check: true
        # When true, migrate or initialize db model
        migrate: true

      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 2
        cpuPercentageUsage: 90
      requestedCpu: 500m
      requestedMemory: 512Mi
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      journalWriterConfigurationRef: indexerJournalWriterConfiguration
      hosts:
        - indexer-storage-read-write.i.s.s.n
      ingress:
        enabled: true
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 1
        workers: 2
    read-only:
      enabled: false
      checkDbVersion: false
      replicas: 1
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      hosts:
        - indexer-storage-read-only.i.s.s.n
      ingress:
        enabled: true
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 1
        workers: 2

defaultElasticsearchHosts:
  - host: search-esnode0.i.s.s.n
    port: 9200

defaultElasticsearchConfiguration:
  elasticsearchInstancesRef: defaultElasticsearchHosts
  cls: elasticsearch
  indexes:
    origin:
      index: origin-v0.11
      read_alias: origin-read
      write_alias: origin-write

search:
  enabled: false
  priorityClassName: frontend-rpc
  sentry:
    enabled: false
    secretKeyRef: swh-search-sentry-secret
    secretKeyName: sentry-dsn
  elasticsearchConfigurationRef: defaultElasticsearchConfiguration
  logLevel: INFO
  replicas: 2
  gunicorn:
    threads: 5
    workers: 2
    timeout: 60
  autoScaling:
    minReplicaCount: 1
    maxReplicaCount: 2
    cpuPercentageUsage: 80
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 10
    cpuPercentageUsage: 100
  hosts:
    - mysearch.minikube.domain
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    # mandatory if ingress is enabled
    # the hostname on which the storage must be reachable
    whitelistSourceRangeRef: internalNetworkRanges
  journalClients:
    enabled: false
    priorityClassName: normal-workload
    searchConfigurationRef: fakeRemoteSearchConfiguration
    storageConfigurationRef: remoteStorageConfiguration
    journalConfigurationRef: searchJournalClientConfiguration
    deployments:
      objects:
        group_id: swh.search.journal_client-v0.11
        prefix: swh.journal.objects
        object_types:
        - origin
        - origin_visit_status

      indexed:
        group_id: swh.search.journal_client.indexed-v0.11
        prefix: swh.journal.indexed
        object_types:
          - origin_intrinsic_metadata
          - origin_extrinsic_metadata

scrubber:
  enabled: false
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  journalChecker:
    enabled: false
    journalClientConfigurationRef: journalClientConfiguration
    deployments:
      release:
        configName: journal-fake-release
        journalClientOverrides:
          batch_size: 200
        object: release
  storageChecker:
    enabled: false
  objstorageChecker:
    enabled: false


fakeObjstorageConfiguration:
  cls: pathslicing
  root: "/srv/swh/objects"
  slicing: 0:1/1:5
  client_max_size: 1073741824

objstorage:
  enabled: false
  port: 5003
  priorityClassName: frontend-rpc
  deployments:
    # Each key will be an objstorage instance to be deployed
    # The mandatory objstorageConfigurationRef key should target a dict
    # with the specific objstorage configuration
    read-write:
      enabled: true
      logLevel: INFO
      requestedCpu: 50m
      requestedMemory: 100Mi
      gunicorn:
        threads: 5
        workers: 2
        timeout: 60
      replicas: 1
      extraVolumes:
        pathslicing-rw:
          mountPath: /srv/swh/objects
          volumeDefinition:
            hostPath:
              path: /srv/swh/objects
              type: DirectoryOrCreate  # Use Directory for production/staging

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: fakeObjstorageConfiguration
        # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-rw.s.s.n
      ingress:
        enabled: false
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        endpoints:
          default:
            paths:
              - path: /
    read-only:
      enabled: true
      logLevel: INFO
      requestedCpu: 50m
      requestedMemory: 100Mi
      gunicorn:
        threads: 5
        workers: 2
        timeout: 60
      replicas: 1
      extraVolumes:
        pathslicing-ro:
          mountPath: /srv/swh/objects
          readOnly: true
          volumeDefinition:
            hostPath:
              path: /srv/swh/objects
              type: DirectoryOrCreate

      objstorageConfigurationRef: fakeObjstorageConfiguration
        # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-ro.s.s.n
      ingress:
        enabled: false
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        endpoints:
          default:
            paths:
              - path: /

fakeHistoryConfiguration:
  cls: prometheus
  prometheus_host: thanos.i.a.s.n
  prometheus_port: 19191
  live_data_start: 0
  interval: 12h
  labels:
    environment: staging

fakeLocalRedis:
  cls: redis
  host: localhost:6379

counters:
  enabled: false
  refreshCountersCache:
    enabled: false
    cron: "0 */1 * * *"
    concurrencyPolicy: Forbid
    countersConfigurationRef: fakeRemoteCountersConfiguration
    historyFiles:
      - history.json
      - '""'
  rpc:
    enabled: false
    fetchStaticHistory: true
    cacheBaseDirectory: /tmp/counters
    countersConfigurationRef: fakeLocalRedis
    historyConfigurationRef: fakeHistoryConfiguration
    requestedMemory: 20Mi
    limitedMemory: 40Mi
    requestedCpu: 10m
    limitedCpu: 20m
    replicas: 1
    gunicorn:
      threads: 1
      workers: 1
      timeout: 10
    # autoScaling:
    #   minReplicaCount: 4
    #   maxReplicaCount: 20
    #   cpuPercentageUsage: 150
    hosts:
      - mycounters.minikube.domain
    ingress:
      enabled: false
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: internalNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
  journalClient:
    enabled: false
    countersConfigurationRef: fakeRemoteCountersConfiguration
    journalConfigurationRef: journalClientConfiguration
    requestedMemory: 15Mi
    limitedMemory: 30Mi
    requestedCpu: 50m
    limitedCpu: 100m

alter:
  enabled: false
