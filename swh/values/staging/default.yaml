environment: staging
sentry:
  environment: staging

clusterNetworkRanges:
  # cluster internal range ip
  - 10.42.0.0/16
  - 10.43.0.0/16

stagingNetworkRanges:
  # staging ip
  - 10.42.0.0/16
  - 10.43.0.0/16
  # "static" staging network range
  - 192.168.130.0/24
  # "static" admin network range (for monitoring purpose)
  - 192.168.50.0/24

noopObjectStorage:
  cls: noop

storagePipelineSteps:
  - &bufferStorage
    cls: buffer
    min_batch_size:
      content: 100
      content_bytes: 52428800
      directory: 100
      directory_entries: 500
      revision: 100
      revision_parents: 200
      revision_bytes: 52428800
      release: 100
      release_bytes: 52428800
      extid: 100
  - cls: filter
  - cls: retry

storagePipelineStepsWithRecordReferences:
  - *bufferStorage
  - cls: filter
  - cls: retry
  - cls: record_references

roStoragePipelineSteps:
  - cls: retry

storage1StorageConfiguration:
  cls: remote
  url: http://storage1.internal.staging.swh.network:5002

remoteROStorageConfiguration:
  pipelineStepsRef: roStoragePipelineSteps
  # TODO: use a real read-only storage configuration
  storageConfigurationRef: storage1StorageConfiguration

remoteROObjstorageConfiguration:
  cls: filtered
  storage_conf:
    cls: remote
    url: http://storage1.internal.staging.swh.network:5003
  filters_conf:
    - type: readonly

postgresqlVaultConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: 5432
  db: swh-vault
  user: swh-vault
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-vault-postgresql-secret
      secretKeyName: postgres-swh-vault-password

postgresqlWebConfiguration:
  host: db1.internal.staging.swh.network
  port: 5432
  db: swh-web
  user: swh-web
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-web-secrets
      secretKeyName: postgres-swh-web-password

djangoWebConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: swh-webapp-django-secret
      secretKeyName: webapp-django-secret-key

remoteSearchConfiguration:
  cls: remote
  url: http://search-rpc-ingress

remoteVaultConfiguration:
  cls: remote
  url: http://vault-rpc-ingress

remoteIndexerStorageConfiguration:
    cls: remote
    url: http://indexer-storage-rpc-ingress

remoteCountersConfiguration:
    cls: remote
    url: http://counters0.internal.staging.swh.network:5011/

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler.internal.staging.swh.network

producerCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhproducer
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: swhproducer-password

consumerCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhconsumer
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: swhconsumer-password

guestCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhguest
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: read-only

postgresqlIndexerStorageConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  db: swh-indexer
  port: 5432
  user: swh-indexer
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-indexer-storage-postgresql-secret
      secretKeyName: postgres-swh-indexer-password

kafkaBrokers:
  - journal1.internal.staging.swh.network
  - journal2.internal.staging.swh.network

elasticsearchInstances:
  - host: search-esnode0.internal.staging.swh.network
    port: 9200

elasticsearchConfiguration:
  elasticsearchInstancesRef: elasticsearchInstances
  cls: elasticsearch
  indexes:
    origin:
      index: origin-v0.11
      read_alias: origin-read
      write_alias: origin-write

journalClientConfiguration:
  kafkaBrokersRef: kafkaBrokers
  group_id: swh.scheduler.journal_client

depositConfiguration:
  host: deposit-rp.internal.staging.swh.network
  user: ${DEPOSIT_USERNAME}
  pass: ${DEPOSIT_PASSWORD}
  secrets:
    DEPOSIT_USERNAME:
      secretKeyRef: deposit-secrets
      secretKeyName: username
    DEPOSIT_PASSWORD:
      secretKeyRef: deposit-secrets
      secretKeyName: password

journalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  cls: kafka
  prefix: swh.journal.indexed
  client_id: swh.idx_storage.journal_writer.storage1
  producer_config:
    message.max.bytes: 1000000000

webThrottling:
  internalExemptedNetworkRangesRef: stagingNetworkRanges
  cache_uri: memcached:11211
  scopes_with_exempted_networks:
    swh_api:
      limiter_rate:
        default: 120/h
    swh_vault_cooking:
      limiter_rate:
        default: 120/h
        GET: 60/m
  scopes:
    swh_api_origin_search:
      limiter_rate:
        default: 10/m
    swh_api_origin_visit_latest:
      limiter_rate:
        default: 700/m
    swh_save_origin:
      limiter_rate:
        default: 120/h
        POST: 10/h

externalServices:
  enabled: true
  services:
    vault:
      internalName: vault-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    indexer-storage:
      internalName: indexer-storage-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    search:
      internalName: search-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local

vault:
  hosts:
    - vault-rpc-ingress

memcached:
  enabled: true

podPriority:
  enabled: true
