environment: staging
sentry:
  environment: staging

clusterNetworkRanges:
  # cluster internal range ip
  - 10.42.0.0/16
  - 10.43.0.0/16

keycloakConfiguration:
  server_url: https://auth.softwareheritage.org/auth/
  realm_name: SoftwareHeritageStaging

stagingNetworkRanges:
  # staging ip
  - 10.42.0.0/16
  - 10.43.0.0/16
  # "static" staging network range
  - 192.168.130.0/24
  # "static" admin network range (for monitoring purpose)
  - 192.168.50.0/24
  # Allow pergamon icinga checks
  - 192.168.100.29/32

searchJournalClientConfiguration:
  brokersConfigurationRef: kafkaBrokers
  group_id: swh.search.journal_client

noopObjectStorage:
  cls: noop

multiplexerReadOnlyObjstorageConfiguration:
  cls: multiplexer
  objstorages:
  - cls: remote
    url: http://objstorage-storage1-ro-rpc-ingress
  - cls: remote
    url: http://objstorage-db1-ro-rpc-ingress

multiplexerReadWriteObjstorageConfiguration:
  cls: multiplexer
  objstorages:
  - cls: remote
    url: http://objstorage-db1-rw-rpc-ingress
  - cls: filtered
    storage_conf:
      cls: remote
      url: http://objstorage-storage1-ro-rpc-ingress
    filters_conf:
    - type: readonly

storagePipelineSteps:
  - &bufferStorage
    cls: buffer
    min_batch_size:
      content: 100
      content_bytes: 52428800
      directory: 100
      directory_entries: 500
      revision: 100
      revision_parents: 200
      revision_bytes: 52428800
      release: 100
      release_bytes: 52428800
      extid: 100
  - cls: filter
  - cls: retry

storagePipelineStepsWithRecordReferences:
  - *bufferStorage
  - cls: filter
  - cls: retry
  - cls: record_references

readOnlyStoragePipelineSteps:
  - cls: retry

remoteReadWriteStorageConfiguration:
  cls: remote
  url: http://storage-postgresql-read-write-rpc-ingress

remoteReadOnlyStorageConfiguration:
  cls: remote
  url: http://storage-postgresql-read-only-rpc-ingress

remoteROStorageConfiguration:
  pipelineStepsRef: readOnlyStoragePipelineSteps
  storageConfigurationRef: remoteReadOnlyStorageConfiguration

remoteROObjstorageConfiguration:
  cls: filtered
  storage_conf:
    cls: remote
    url: http://objstorage-read-only-rpc-ingress
  filters_conf:
    - type: readonly

postgresqlVaultConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: 5432
  db: swh-vault
  user: swh-vault
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-vault-postgresql-secret
      secretKeyName: postgres-swh-vault-password

postgresqlWebConfiguration:
  host: db1.internal.staging.swh.network
  port: 5432
  db: swh-web
  user: swh-web
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-web-secrets
      secretKeyName: postgres-swh-web-password

postgresqlDepositConfiguration:
  host: db1.internal.staging.swh.network
  port: 5432
  db: swh-deposit
  user: swh-deposit
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-deposit-secrets
      secretKeyName: postgres-swh-deposit-password

postgresqlSyncmailmapsConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  db: swh
  user: swhmailmap
  pass: ${PGPASSWORD}
  secrets:
    PGPASSWORD:
      secretKeyRef: swh-postgresql-syncmailmap-secret
      secretKeyName: postgres-syncmailmap-password

djangoWebConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: swh-webapp-django-secret
      secretKeyName: webapp-django-secret-key

djangoDepositConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: swh-deposit-django-secret
      secretKeyName: deposit-django-secret-key

remoteSearchConfiguration:
  cls: remote
  url: http://search-rpc-ingress

remoteVaultConfiguration:
  cls: remote
  url: http://vault-rpc-ingress

remoteIndexerStorageConfiguration:
    cls: remote
    url: http://indexer-storage-rpc-ingress

remoteCountersConfiguration:
    cls: remote
    url: http://counters-rpc-ingress

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler.internal.staging.swh.network

remoteReadWriteObjstorageConfiguration:
  cls: remote
  url: http://objstorage-multiplexer-read-write-rpc-ingress

remoteReadOnlyObjstorageConfiguration:
  cls: remote
  url: http://objstorage-read-only-rpc-ingress

azureDepositConfiguration:
  connection_string: "DefaultEndpointsProtocol=https;AccountName=swhdepositstoragestaging;AccountKey=${ACCOUNT_KEY};EndpointSuffix=core.windows.net"
  container_name: deposit-contents
  content_type: application/octet-stream
  content_encoding: ""
  secrets:
    ACCOUNT_KEY:
      secretKeyRef: swh-deposit-azure-secret
      secretKeyName: azure-swh-deposit-key

producerCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhproducer
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: swhproducer-password

consumerCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhconsumer
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: swhconsumer-password

guestCeleryConfiguration:
  host: scheduler0.internal.staging.swh.network
  port: 5672
  user: swhguest
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_PASSWORD:
      secretKeyRef: amqp-secrets
      secretKeyName: read-only

postgresqlSchedulerConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  user: swh-scheduler
  pass: ${POSTGRESQL_PASSWORD}
  db: swh-scheduler
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scheduler-postgresql-common-secret
      secretKeyName: postgres-swh-scheduler-password

postgresqlIndexerStorageConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  db: swh-indexer
  port: 5432
  user: swh-indexer
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-indexer-storage-postgresql-secret
      secretKeyName: postgres-swh-indexer-password

postgresqlScrubberConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  user: swh-scrubber
  pass: ${SCRUBBER_POSTGRESQL_PASSWORD}
  db: swh-scrubber
  secrets:
    SCRUBBER_POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scrubber-postgresql-common-secret
      secretKeyName: postgres-swh-scrubber-password

kafkaBrokers:
  - journal2.internal.staging.swh.network

internalSecuredKafkaBrokers:
  - journal2.internal.staging.swh.network:9094

indexerJournalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  cls: kafka
  prefix: swh.journal.indexed
  client_id: swh.idx_storage.journal_writer.${HOSTNAME}
  producer_config:
    message.max.bytes: 1000000000

elasticsearchInstances:
  - host: search-esnode0.internal.staging.swh.network
    port: 9200

elasticsearchConfiguration:
  elasticsearchInstancesRef: elasticsearchInstances
  cls: elasticsearch
  indexes:
    origin:
      index: origin-v0.11
      read_alias: origin-read
      write_alias: origin-write

journalClientConfiguration:
  brokersConfigurationRef: kafkaBrokers
  group_id: swh.scheduler.journal_client

journalClientCountersConfiguration:
  brokersConfigurationRef: kafkaBrokers
  group_id: swh.counters.journal_client
  prefix: swh.journal.objects
  object_types:
  - content
  - directory
  - origin
  - origin_visit
  - origin_visit_status
  - release
  - revision
  - skipped_content
  - snapshot
  message.max.bytes: 524288000

authenticatedJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  prefix: swh.journal.objects
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

depositConfiguration:
  host: deposit.staging.swh.network
  user: ${DEPOSIT_USERNAME}
  pass: ${DEPOSIT_PASSWORD}
  secrets:
    DEPOSIT_USERNAME:
      secretKeyRef: deposit-secrets
      secretKeyName: username
    DEPOSIT_PASSWORD:
      secretKeyRef: deposit-secrets
      secretKeyName: password

webThrottling:
  internalExemptedNetworkRangesRef: stagingNetworkRanges
  cache_uri: memcached:11211
  scopes_with_exempted_networks:
    swh_api:
      limiter_rate:
        default: 120/h
    swh_vault_cooking:
      limiter_rate:
        default: 120/h
        GET: 60/m
  scopes:
    swh_api_origin_search:
      limiter_rate:
        default: 10/m
    swh_api_origin_visit_latest:
      limiter_rate:
        default: 700/m
    swh_save_origin:
      limiter_rate:
        default: 120/h
        POST: 10/h

externalServices:
  enabled: true
  services:
    vault:
      internalName: vault-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    indexer-storage:
      internalName: indexer-storage-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    search:
      internalName: search-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    deposit:
      internalName: deposit-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    storage-postgresql-read-write:
      internalName: storage-postgresql-read-write-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    storage-postgresql-read-only:
      internalName: storage-postgresql-read-only-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-read-write:
      internalName: objstorage-read-write-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-multiplexer-read-write-rpc-ingress:
      internalName: objstorage-multiplexer-read-write-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-db1-read-write:
      internalName: objstorage-db1-rw-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-read-only:
      internalName: objstorage-read-only-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-db1-read-only:
      internalName: objstorage-db1-ro-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    objstorage-storage1-read-only:
      internalName: objstorage-storage1-ro-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    counters:
      internalName: counters-rpc-ingress
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local

vault:
  hosts:
    - vault-rpc-ingress

toolbox:
  requestedMemory: 10Mi
  requestedCpu: 10m

memcached:
  enabled: true
  requestedCpu: 10m
  requestedMemory: 256Mi

podPriority:
  enabled: true

addForgeNowConfiguration:
  email_address: add-forge-now@webapp.staging.swh.network

objstorage:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: swh/objstorage
            operator: In
            values:
            - "true"

svixConfiguration:
  svix:
    server_url: https://svix.internal.staging.swh.network
    auth_token: ${SVIX_AUTH_TOKEN}
  event_retention_period: 7
  secrets:
    SVIX_AUTH_TOKEN:
      secretKeyRef: common-secrets
      secretKeyName: svix-token

webhooksConfiguration:
  secrets:
    WEBHOOKS_SECRET:
      secretKeyRef: common-secrets
      secretKeyName: webhooks-secret

inboundEmailConfiguration:
  secrets:
    INBOUND_EMAIL_SHARED_KEY:
      secretKeyRef: common-secrets
      secretKeyName: web-inbound-email-shared-key
