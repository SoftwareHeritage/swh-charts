directPostgresqlReplayerStorageConfiguration:
  pipelineStepsRef: storagePipelineStepsWithRecordReferences
  storageConfigurationRef: primaryPostgresqlRWStorageConfiguration
  objstorageConfigurationRef: noopObjstorageConfiguration

# Direct postgresql connection without any filter or objstorage
scrubberROStorageConfiguration:
  storageConfigurationRef: primaryPostgresqlROStorageConfiguration

storageJournalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  producerConfig:
    message.max.bytes: 1000000000
  prefix: swh.journal.objects
  clientId: swh.storage.journal_writer.${HOSTNAME}
  anonymize: true

scrubberJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  group_id: swh-archive-stg-journalchecker
  on_eof: restart
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  prefix: swh.journal.objects
  message.max.bytes: 524288000
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

rwStoragePipelineSteps:
  - cls: blocking
    postgresqlConfigurationRef: blockingQueryPostgresqlConfiguration
  - cls: record_references

emptyStoragePipelineSteps: []

rwStoragePostgresqlConfiguration:
  pipelineStepsRef: emptyStoragePipelineSteps
  storageConfigurationRef: primaryPostgresqlRWStorageConfiguration

readWriteStorageConfiguration:
  pipelineStepsRef: rwStoragePipelineSteps
  storageConfigurationRef: primaryPostgresqlRWStorageConfiguration
  objstorageConfigurationRef: remoteReadWriteObjstorageConfiguration

readOnlyStorageConfiguration:
  pipelineStepsRef: readOnlyStorageBackendPipelineSteps
  storageConfigurationRef: primaryPostgresqlROStorageConfiguration
  objstorageConfigurationRef: remoteReadOnlyObjstorageConfiguration

graphql:
  enabled: true
  deployments:
    postgresql:
      debug: yes
      logLevel: DEBUG
      introspection: yes
      storageConfigurationRef: remoteROStorageConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      replicas: 1
      gunicorn:
        threads: 4
        workers: 2
        timeout: 3600
      hosts:
        - webapp.staging.swh.network
        - graphql.internal.staging.swh.network
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/preserve-trailing-slash: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        endpoints:
          default:
            paths:
              - path: /graphql/
      auth:
        enabled: true
        server: https://auth.softwareheritage.org/auth/
        realm: SoftwareHeritageStaging
        client: swh-web
        cacheUrl: memcached://memcached:11211
      maxRawContentSize: 10000
      requestedCpu: 25m
      requestedMemory: 150Mi

storageReplayerJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  prefix: swh.journal.objects
  message.max.bytes: "524288000"
  # Both to write some data to privileged topic and use the error_reporter config
  privileged: true
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

storageReplayer:
  enabled: true
  storageConfigurationRef: directPostgresqlReplayerStorageConfiguration
  journalClientConfigurationRef: storageReplayerJournalClientConfiguration
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  checkDbVersion: true
  error_reporter:
    host: redis-postgresql.redis
    port: 6379
    db: 1
  deployments:
    content:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-content
        object_types:
          - content
      requestedCpu: 10m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    directory:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-directory
        object_types:
          - directory
        batch_size: 250
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    extid:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-extid
        object_types:
          - extid
        batch_size: 1000
      # Full replay
      # requestedCpu: 400m
      # equestedMemory: 200Mi
      # Follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    metadata:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-metadata
        object_types:
          - metadata_authority
          - metadata_fetcher
      # follow up consumption
      requestedCpu: 30m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-raw-extrinsic-metadata
        object_types:
          - raw_extrinsic_metadata
        batch_size: 250
      # Full replay
      # requestedCpu: 400m
      # requestedMemory: 200Mi
      # follow up consumption
      requestedCpu: 20m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    origin:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-origin
        object_types:
          - origin
        batch_size: 1000
      # Full replay
      # requestedCpu: 400m
      # requestedMemory: 200Mi
      # Follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-origin-visit
        object_types:
        - origin_visit
        batch_size: 1000
      # Full replay
      # requestedCpu: 400m
      # requestedMemory: 400Mi
      # Follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-origin-visit-status
        object_types:
          - origin_visit_status
        batch_size: 1000
      # Full replay
      # requestedCpu: 500m
      # requestedMemory: 300Mi
      # Follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-release
        object_types:
          - release
        batch_size: 1000
      # Full replay
      # requestedCpu: 600m
      # requestedMemory: 300Mi
      # follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    revision:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-revision
        object_types:
          - revision
        batch_size: 1000
      # Full replay
      # requestedCpu: 750m
      # requestedMemory: 750Mi
      # follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-skipped-content
        object_types:
          - skipped_content
        batch_size: 100
      # Full replay
      # requestedCpu: 300m
      # requestedMemory: 400Mi
      # follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      journalClientOverrides:
        group_id: swh-cassandra-stg-postgresql-replayer-snapshot
        object_types:
          - snapshot
        batch_size: 250
      # Full replay
      # requestedCpu: 400m
      # requestedMemory: 250Mi
      # follow up consumption
      requestedCpu: 10m
      requestedMemory: 50Mi
      autoScaling:
        maxReplicaCount: 5

toolbox:
  enabled: true
  configs:
    storage:
      storageDbConfigurationRef: primaryPostgresqlRWStorageConfiguration
    scrubber-journal:
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      journalClientConfigurationRef: scrubberJournalClientConfiguration
    scrubber-storage:
      moduleName: scrubber
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageConfigurationRef: scrubberROStorageConfiguration

web:
  enabled: true
  logLevel: INFO
  deployments:
    postgresql:
      metricsScrapingEnabled: false
      # small footprint because this webapp is almost not used, only for tests
      replicas: 1
      requestedCpu: 50m
      requestedMemory: 250Mi
      hosts:
        - webapp-postgresql.internal.staging.swh.network
      ingress:
        enabled: true
        secretName: swh-web-crt
        extraAnnotations:
          cert-manager.io/cluster-issuer: letsencrypt-production-gandi
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
        tlsEnabled: true
        endpoints:
          default:
            paths:
              - path: /
          static:
            extraAnnotations:
              nginx.ingress.kubernetes.io/use-regex: "true"
              nginx.ingress.kubernetes.io/rewrite-target: /static/$2
            paths:
              - path: /()(robots.txt)$
                pathType: ImplementationSpecific
                port: 80
              - path: /static(/|$)(.*)
                pathType: ImplementationSpecific
                port: 80
          authenticated:
            paths:
              - path: /api/1/provenance/
              - path: /api/1/entity/
              - path: /api/1/content/[^/]+/symbol/
            # auth-file with authentication
            authentication: swh-cassandra/web-auth-secrets
          webhooks:
            paths:
              - path: /save/origin/visit/webhook
            extraWhitelistSourceRange:
              - 192.168.130.1
              - 192.168.130.2
      databaseConfigurationRef: postgresqlWebConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      storageConfigurationRef: remoteReadOnlyStorageConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
      countersConfigurationRef: remoteCountersConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      depositConfigurationRef: depositConfiguration
      giveConfigurationRef: giveConfiguration
      throttlingConfigurationRef: webThrottling
      addForgeNowConfigurationRef: addForgeNowConfiguration
      keycloakConfigurationRef: keycloakConfiguration
      inboundEmailConfigurationRef: inboundEmailConfiguration
      djangoAppsRef: webDjangoApps

      extraConfig:
        keycloak:
          server_url: https://auth.softwareheritage.org/auth/
          realm_name: SoftwareHeritageStaging
        search_config:
          metadata_backend: swh-search
        inbound_email:
          shared_key: ${INBOUND_EMAIL_SHARED_KEY}
        content_display_max_size: 5242880
        history_counters_url: http://counters-rpc-ingress/counters_history/history.json
        matomo: {}
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

scrubber:
  enabled: true
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  priorityClassName: background-workload
  storageChecker:
    enabled: true
    storageConfigurationRef: scrubberROStorageConfiguration
    deployments:
      directory-references:
        configName: storage-references-directory
        object: directory
        replicas: 1
        requestedCpu: 100m
        requestedMemory: 100Mi
      directory-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-hashes-directory
        object: directory
        replicas: 1
        requestedCpu: 100m
        requestedMemory: 100Mi
      release-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-references-release
        object: release
        replicas: 1
      release-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-hashes-release
        object: release
        replicas: 1
      revision-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-references-revision
        replicas: 1
        object: revision
      revision-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-hashes-revision
        replicas: 1
        object: revision
      snapshot-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-references-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 150m
        requestedMemory: 128Mi
      snapshot-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-hashes-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 150m
        requestedMemory: 128Mi
  journalChecker:
    enabled: true
    journalClientConfigurationRef: scrubberJournalClientConfiguration
    deployments:
      directory:
        configName: journal-checker-directory
        journalClientOverrides:
          batch_size: 100
        object: directory
        replicas: 1
        requestedMemory: 200Mi
        requestedCpu: 200m
      release:
        configName: journal-checker-release
        journalClientOverrides:
          batch_size: 200
          privileged: true
        object: release
        replicas: 1
        requestedMemory: 200Mi
        requestedCpu: 500m
      revision:
        configName: journal-checker-revision
        journalClientOverrides:
          privileged: true
        object: revision
        replicas: 1
        requestedMemory: 250Mi
        requestedCpu: 600m
      snapshot:
        configName: journal-checker-snapshot
        object: snapshot
        replicas: 1
        requestedCpu: 1
        requestedMemory: 250Mi
  objstorageChecker:
    enabled: false

storage:
  enabled: true
  deployments:
    postgresql-read-write:
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1.5Gi
      storageConfigurationRef: readWriteStorageConfiguration
      hosts:
        - storage-postgresql-read-write-rpc-ingress
      ingress:
        enabled: true
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 4
        workers: 8
      cronjobs:
        create-object-reference-partitions:
          enabled: true
          storageConfigurationRef: rwStoragePostgresqlConfiguration
          logLevel: INFO
          cron: 5 0 * * mon
          concurrencyPolicy: Forbid

    postgresql-read-only:
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1.5Gi
      storageConfigurationRef: readOnlyStorageConfiguration
      dnsConfigurationRef: dnsConfiguration
      hosts:
        - storage-postgresql-read-only-rpc-ingress
        - storage-ro.internal.staging.swh.network
      ingress:
        enabled: true
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      gunicorn:
        threads: 4
        workers: 8

