remoteStorageConfiguration:
  cls: remote
  url: http://storage1.internal.staging.swh.network:5002

postgresqlStorageConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  user: swh
  pass: ${POSTGRESQL_PASSWORD}
  db: swh
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-common-secret
      secretKeyName: postgres-swh-password

directPostgresqlReplayerStorageConfiguration:
  pipelineStepsRef: storagePipelineStepsWithRecordReferences
  storageConfigurationRef: postgresqlStorageConfiguration
  objectStorageConfigurationRef: noopObjectStorage

postgresqlSchedulerConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  user: swh-scheduler
  pass: ${POSTGRESQL_PASSWORD}
  db: swh-scheduler
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scheduler-postgresql-common-secret
      secretKeyName: postgres-swh-scheduler-password

postgresqlScrubberConfiguration:
  cls: postgresql
  host: db1.internal.staging.swh.network
  port: '5432'
  user: swh-scrubber
  pass: ${POSTGRESQL_PASSWORD}
  db: swh-scrubber
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scrubber-postgresql-common-secret
      secretKeyName: postgres-swh-scrubber-password

listers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  deployments:
    bioconductor:
      queues:
        - swh.lister.bioconductor.tasks.BioconductorListerTask
        - swh.lister.bioconductor.tasks.BioconductorIncrementalListerTask
      autoScaling:
        maxReplicaCount: 1
    bower:
      queues:
      - swh.lister.bower.tasks.BowerListerTask
      autoScaling:
        maxReplicaCount: 1
    bitbucket:
      queues:
      - swh.lister.bitbucket.tasks.IncrementalBitBucketLister
      - swh.lister.bitbucket.tasks.FullBitBucketRelister
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 600Mi
      requestedCpu: 200m
    cgit:
      queues:
        - swh.lister.cgit.tasks.CGitListerTask
      autoScaling:
        maxReplicaCount: 1
    cran:
      queues:
      - swh.lister.cran.tasks.CRANListerTask
      autoScaling:
        maxReplicaCount: 1
    debian:
      queues:
        - swh.lister.debian.tasks.DebianListerTask
      autoScaling:
        maxReplicaCount: 1
    dlang:
      queues:
      - swh.lister.dlang.tasks.DlangListerTask
      autoScaling:
        maxReplicaCount: 1
    gitea:
      queues:
      - swh.lister.gitea.tasks.IncrementalGiteaLister
      - swh.lister.gitea.tasks.RangeGiteaLister
      - swh.lister.gitea.tasks.FullGiteaRelister
      autoScaling:
        maxReplicaCount: 1
    gitiles:
      queues:
      - swh.lister.gitiles.tasks.GitilesListerTask
      autoScaling:
        maxReplicaCount: 1
    gitlab:
      queues:
      - swh.lister.gitlab.tasks.IncrementalGitLabLister
      - swh.lister.gitlab.tasks.RangeGitLabLister
      - swh.lister.gitlab.tasks.FullGitLabRelister
      autoScaling:
        maxReplicaCount: 1
    gitweb:
      queues:
      - swh.lister.gitweb.tasks.GitwebListerTask
      autoScaling:
        maxReplicaCount: 1
    gnu-full:
      queues:
        - swh.lister.gnu.tasks.GNUListerTask
      autoScaling:
        maxReplicaCount: 1
    gogs-full:
      queues:
        - swh.lister.gogs.tasks.FullGogsRelister
      autoScaling:
        maxReplicaCount: 1
    golang:
      queues:
      - swh.lister.golang.tasks.FullGolangLister
      - swh.lister.golang.tasks.IncrementalGolangLister
      autoScaling:
        maxReplicaCount: 1
    launchpad:
      queues:
      - swh.lister.launchpad.tasks.FullLaunchpadLister
      - swh.lister.launchpad.tasks.IncrementalLaunchpadLister
      autoScaling:
        maxReplicaCount: 1
    maven:
      queues:
      - swh.lister.maven.tasks.FullMavenLister
      - swh.lister.maven.tasks.IncrementalMavenLister
      autoScaling:
        maxReplicaCount: 1
      requestedCpu: 1000m
      requestedMemory: 6144Mi
    nixguix:
      queues:
      - swh.lister.nixguix.tasks.NixGuixListerTask
      autoScaling:
        maxReplicaCount: 1
      extraConfig:
        # extra extensions to ignore
        extensions_to_ignore:
          - rock
    npm:
      queues:
      - swh.lister.npm.tasks.NpmListerTask
      autoScaling:
        maxReplicaCount: 1
    opam:
      queues:
      - swh.lister.opam.tasks.OpamListerTask
      autoScaling:
        maxReplicaCount: 1
    packagist:
      queues:
        - swh.lister.packagist.tasks.PackagistListerTask
      autoScaling:
        maxReplicaCount: 1
    pagure:
      queues:
        - swh.lister.pagure.tasks.PagureListerTask
      autoScaling:
        maxReplicaCount: 1
    phabricator:
      queues:
      - swh.lister.phabricator.tasks.FullPhabricatorLister
      autoScaling:
        maxReplicaCount: 1
    pubdev:
      queues:
        - swh.lister.pubdev.tasks.PubDevListerTask
      autoScaling:
        maxReplicaCount: 1
    pypi:
      queues:
      - swh.lister.pypi.tasks.PyPIListerTask
      autoScaling:
        maxReplicaCount: 1
    rpm:
      queues:
        - swh.lister.rpm.tasks.FullRPMLister
        - swh.lister.rpm.tasks.IncrementalRPMLister
      autoScaling:
        maxReplicaCount: 1
    sourceforge:
      queues:
      - swh.lister.sourceforge.tasks.FullSourceForgeLister
      - swh.lister.sourceforge.tasks.IncrementalSourceForgeLister
      autoScaling:
        maxReplicaCount: 1
    stagit:
      queues:
      - swh.lister.stagit.tasks.StagitListerTask
      autoScaling:
        maxReplicaCount: 1

checker_deposit:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  depositConfigurationRef: depositConfiguration
  autoScaling:
    maxReplicaCount: 2
  requestedMemory: 100Mi
  requestedCpu: 100m
  limitedMemory: 1024Mi
  limitedCpu: 1000m

indexers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  indexer_storage:
    host: storage1.internal.staging.swh.network
    port: 5007
  objstorage:
    host: storage1.internal.staging.swh.network
    port: 5003
  journalBrokers:
    secretName: swh-archive-broker-secret
    hosts:
      - journal1.internal.staging.swh.network:9094
    user: swh-archive-stg
  deployments:
    # content-mimetype:
    #   indexer_type: content_mimetype
    #   consumerGroup: swh.indexer.journal_client.content_mimetype
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     tools:
    #       name: file
    #       # FIXME: Push this version to be autodetected by indexer
    #       version: 2:0.4.15-2
    #       configuration:
    #         type: library
    #         debian-package: python3-magic
    #     write_batch_size: 1000
    #   autoScaling:
    #     maxReplicaCount: 2
    # content-fossology-license:
    #   indexer_type: content_fossology_license
    #   consumerGroup: swh.indexer.journal_client.content_fossology_license
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     workdir: /tmp/swh/indexer.fossology.license/
    #     tools:
    #       name: 'nomos'
    #       version: '3.1-1~bpo9~swh+1'
    #       configuration:
    #         command_line: "nomossa <filepath>"
    #     write_batch_size: 1000
    #   autoScaling:
    #     maxReplicaCount: 2
    # origin-extrinsic:
    #   indexer_type: extrinsic_metadata
    #   consumerGroup: swh.indexer.journal_client.extrinsic_metadata
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     tools:
    #       name: swh-metadata-detector
    #       version: 0.0.2
    #       configuration: {}
    #   autoScaling:
    #     maxReplicaCount: 2
    origin-intrinsic:
      indexer_type: origin_intrinsic_metadata
      consumerGroup: swh.indexer.journal_client.origin_intrinsic_metadata
      prefix: swh.journal.objects
      batch_size: 200
      extraConfig:
        tools:
          name: swh-metadata-detector
          version: 0.0.2
          configuration: {}
      autoScaling:
        maxReplicaCount: 6

graphql:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  searchConfigurationRef: remoteSearchConfiguration
  debug: yes
  introspection: yes
  replicas: 2
  gunicorn:
    threads: 4
    workers: 2
    timeout: 3600
  ingress:
    enabled: true
    host: graphql.internal.staging.swh.network
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  logLevel: DEBUG
  auth:
    enabled: true
    server: https://auth.softwareheritage.org/auth/
    realm: SoftwareHeritageStaging
    client: swh-web
    cacheUrl: memcached://memcached:11211
  maxRawContentSize: 10000
  requestedCpu: 25m
  requestedMemory: 150Mi

storage_replayer:
  enabled: true
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  journalBrokers:
    hosts:
      - journal1.internal.staging.swh.network:9094
    user: swh-postgresql-stg
    groupIdName: postgresql
    secretName: swh-postgresql-broker-secret
  storageConfigurationRef: directPostgresqlReplayerStorageConfiguration
  checkDbVersion: true
  error_reporter:
    host: redis-postgresql.redis
    port: 6379
    db: 1
  deployments:
    content:
      objects:
        - content
      privileged: true
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    directory:
      objects:
        - directory
      batchSize: 250
      privileged: true
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    extid:
      objects:
        - extid
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 400m
      # equestedMemory: 200Mi
      #Follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    metadata:
      objects:
        - metadata_authority
        - metadata_fetcher
      privileged: true
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      objects:
        - raw_extrinsic_metadata
      batchSize: 250
      privileged: true
      # Full replay
      #requestedCpu: 400m
      #requestedMemory: 200Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin:
      objects:
        - origin
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 400m
      #requestedMemory: 200Mi
      #Follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      objects:
        - origin_visit
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 400m
      #requestedMemory: 400Mi
      #Follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      objects:
        - origin_visit_status
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 500m
      #requestedMemory: 300Mi
      #Follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      objects:
        - release
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 600m
      # requestedMemory: 300Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    revision:
      objects:
        - revision
      batchSize: 1000
      privileged: true
      # Full replay
      #requestedCpu: 750m
      #requestedMemory: 750Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      objects:
        - skipped_content
      batchSize: 100
      privileged: true
      # Full replay
      #requestedCpu: 300m
      #requestedMemory: 400Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      objects:
        - snapshot
      batchSize: 250
      privileged: true
      # Full replay
      #requestedCpu: 400m
      #requestedMemory: 250Mi
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5

toolbox:
  enabled: true
  configs:
    scheduler:
      schedulerConfigurationRef: postgresqlSchedulerConfiguration
      celeryConfigurationRef: producerCeleryConfiguration
    storage:
      storageConfigurationRef: postgresqlStorageConfiguration
    scrubber:
      scrubberConfigurationRef: postgresqlScrubberConfiguration
    vault:
      vaultConfigurationRef: postgresqlVaultConfiguration
    indexer-storage:
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration

scheduler:
  enabled: true
  sentry:
    enabled: true
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: producerCeleryConfiguration
  alerts:
    enabled: false
  recurrent:
    enabled: true
    requestedMemory: 400Mi
    requestedCpu: 10m
  rpc:
    enabled: true
    # The scheduler instance to use for rpc must be a postgresql instance
    schedulerConfigurationRef: postgresqlSchedulerConfiguration
    replicas: 2
    gunicorn:
      threads: 5
      workers: 4
      timeout: 60
    ingress:
      enabled: true
      host: scheduler.internal.staging.swh.network
      # TODO: Improve the authorization internal cluster ip range.
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: stagingNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
        read-only:
          paths:
            - path: /scheduler_metrics/get
          extraWhitelistSourceRange:
            # vpn network
            - 192.168.101.0/24
    requestedMemory: 1024Mi
    requestedCpu: 50m
  updateMetrics:
    enabled: true
    cron: "0/10 * * * *"  # at every 10th minute from 0 to 59
  journalClient:
    enabled: true
    journalConfigurationRef: journalClientConfiguration
    requestedMemory: 100Mi
    limitedMemory: 200Mi
    requestedCpu: 10m
    limitedCpu: 20m
  extraServices:
    runner:
      enabled: true
      logLevel: INFO
      period: 10
      requestedMemory: 100Mi
      limitedMemory: 200Mi
      requestedCpu: 10m
      limitedCpu: 20m
    runner-priority:
      enabled: true
      logLevel: INFO
      period: 10
      requestedMemory: 50Mi
      limitedMemory: 100Mi
      requestedCpu: 5m
      limitedCpu: 10m
      extraConfig:
        - load-bzr
        - load-cvs
        - load-git
        - load-svn
        - load-archive-files
        - load-hg
    listener:
      enabled: true
      logLevel: INFO
      requestedMemory: 100Mi
      limitedMemory: 200Mi
      requestedCpu: 10m
      limitedCpu: 20m

indexerStorage:
  enabled: false
  checkDbVersion: true
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 90
  requestedCpu: 500m
  requestedMemory: 512Mi
  indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
  journalWriterConfigurationRef: journalWriterConfiguration
  ingress:
    enabled: true
    host: indexer-storage.internal.staging.swh.network
  gunicorn:
    threads: 2
    workers: 4

search:
  enabled: false
  priorityClassName: frontend-rpc
  logLevel: INFO
  elasticsearchConfigurationRef: elasticsearchConfiguration
  # replicas: 2
  gunicorn:
    threads: 5
    workers: 4
    timeout: 3600
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 75
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    # mandatory if ingress is enabled
    # the hostname on which the storage must be reachable
    host: search.internal.staging.swh.network

web:
  enabled: true
  logLevel: INFO
  requestedCpu: 500m
  requestedMemory: 500Mi
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 3
    cpuPercentageUsage: 50
  host: webapp-postgresql.internal.staging.swh.network
  ingress:
    enabled: true
    secretName: swh-web-crt
    extraAnnotations:
      cert-manager.io/cluster-issuer: letsencrypt-production-gandi
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tlsEnabled: true
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
      authenticated:
        paths:
          - path: /api/1/provenance/
          - path: /api/1/entity/
          - path: /api/1/content/[^/]+/symbol/
        # auth-file with authentication
        authentication: swh-cassandra/web-auth-secrets
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  refreshSavecodenowStatus:
    enabled: true
  syncMailmaps:
    enabled: true
  databaseConfigurationRef: postgresqlWebConfiguration
  searchConfigurationRef: remoteSearchConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  storageConfigurationRef: remoteStorageConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
  countersConfigurationRef: remoteCountersConfiguration
  djangoConfigurationRef: djangoWebConfiguration
  giveConfigurationRef: giveConfiguration
  throttlingConfigurationRef: webThrottling
  extraConfig:
    instance_name: webapp-postgresql.internal.staging.swh.network
    allowed_hosts:
    - webapp-postgresql.internal.staging.swh.network
    - webapp.staging.swh.network
    keycloak:
      server_url: https://auth.softwareheritage.org/auth/
      realm_name: SoftwareHeritageStaging
    search_config:
      metadata_backend: swh-search
    content_display_max_size: 5242880
    history_counters_url: http://counters0.internal.staging.swh.network:5011/counters_history/history.json
    add_forge_now:
      email_address: add-forge-now@webapp.staging.swh.network
    swh_extra_django_apps:
    - swh.web.add_forge_now
    - swh.web.archive_coverage
    - swh.web.badges
    - swh.web.banners
    - swh.web.deposit
    - swh.web.inbound_email
    - swh.web.jslicenses
    - swh.web.mailmap
    - swh.web.metrics
    - swh.web.save_code_now
    - swh.web.save_origin_webhooks
    - swh.web.vault
    matomo: {}
    give:
      public_key: ${GIVE_PUBLIC_KEY}
      token: ${GIVE_PRIVATE_TOKEN}
