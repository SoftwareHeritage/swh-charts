namespace: swh-cassandra

remoteCassandraStorageConfiguration:
  cls: remote
  url: http://storage-cassandra-read-write-ingress

localRpcRWStorageConfiguration:
  cls: remote
  url: http://storage-cassandra-read-write-ingress

remoteReadOnlyStorageConfiguration:
  cls: remote
  url: http://storage-cassandra-read-only-ingress

rpcRWStorageConfiguration:
  pipelineStepsRef: storagePipelineSteps
  storageConfigurationRef: localRpcRWStorageConfiguration

pathslicingObjstorageConfiguration:
  cls: pathslicing
  root: "/srv/softwareheritage/objects"
  slicing: 0:1/1:5

pathslicingNoCompressionObjstorageConfiguration:
  cls: pathslicing
  root: "/srv/softwareheritage/objects"
  slicing: 0:1/1:5
  compression: none

cassandraSeeds:
  - cassandra1.internal.staging.swh.network
  - cassandra2.internal.staging.swh.network
  - cassandra3.internal.staging.swh.network

cassandraStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  specificOptions:
    directory_entries_insert_algo: batch
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-rw
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-rw-password

cassandraROStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: false
  consistencyLevel: LOCAL_QUORUM
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-ro
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-ro-password

cassandraChecksROStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-ro
    password: ${CASSANDRA_PASSWORD}
  specificOptions:
    directory_entries_insert_algo: batch
    objstorage:
      cls: noop
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-ro-password

cassandraReplayerStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  objstorageConfigurationRef: noopObjectStorage

cassandraStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  journalWriterConfigurationRef: storageJournalWriterConfiguration
  objstorageConfigurationRef: remoteReadWriteObjstorageConfiguration

cassandraROStorageConfiguration:
  pipelineStepsRef: readOnlyStorageBackendPipelineSteps
  storageConfigurationRef: cassandraROStorage
  # XXX: migrate to inlined multiplexed config (to save a round trip through the ingress)?
  objstorageConfigurationRef: remoteReadOnlyObjstorageConfiguration

scrubberROStorageConfiguration:
  storageConfigurationRef: cassandraROStorage

azureCacheConfiguration:
  cls: azure
  connection_string: "DefaultEndpointsProtocol=https;AccountName=swhvaultstoragestaging;AccountKey=${ACCOUNT_KEY};EndpointSuffix=core.windows.net"
  container_name: contents-uncompressed
  compression: none
  secrets:
    ACCOUNT_KEY:
      secretKeyRef: swh-vault-azure-secret
      secretKeyName: azure-swh-vault-key

loaders:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  deployments:
    add-forge-now:
      image: swh_loader_git_image
      queues:
        - add_forge_now:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 3
      requestedMemory: 1Gi
      requestedCpu: 200m
    add-forge-now-slow:
      image: swh_loader_git_image
      queues:
        - add_forge_now_slow:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
      requestedMemory: 1Gi
      requestedCpu: 200m
    arch:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.arch.tasks.LoadArch
      autoScaling:
        maxReplicaCount: 1
    aur:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.aur.tasks.LoadAur
      autoScaling:
        maxReplicaCount: 1
    archive:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.archive.tasks.LoadTarball
      autoScaling:
        maxReplicaCount: 1
    bioconductor:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.bioconductor.tasks.LoadBioconductor
      autoScaling:
        maxReplicaCount: 1
    bzr:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.bzr.tasks.LoadBazaar
      autoScaling:
        maxReplicaCount: 1
    cran:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.cran.tasks.LoadCRAN
      autoScaling:
        maxReplicaCount: 1
    cvs:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.cvs.tasks.LoadCvsRepository
      autoScaling:
        maxReplicaCount: 1
    content:
      enabled: false
      requestedCpu: 350m
      requestedMemory: 150Mi
      queues:
        - swh.loader.core.tasks.LoadContent
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_package_image
    directory:
      enabled: false
      requestedMemory: 768Mi
      requestedCpu: 1000m
      queues:
        - swh.loader.core.tasks.LoadTarballDirectory
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_package_image
    git:
      priorityClassName: low-workload
      queues:
        - swh.loader.git.tasks.UpdateGitRepository
        - swh.loader.git.tasks.LoadDiskGitRepository
        - swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
      autoScaling:
        maxReplicaCount: 1
        minReplicaCount: 1
        stopWhenNoActivity: false
      requestedMemory: 768Mi
      requestedCpu: 100m
    git-checkout:
      enabled: false
      image: swh_loader_git_image
      queues:
        - swh.loader.git.tasks.LoadGitCheckout
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 256Mi
      requestedCpu: 500m
    hg-checkout:
      enabled: false
      image: swh_loader_mercurial_image
      queues:
        - swh.loader.mercurial.tasks.LoadMercurialCheckout
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 768Mi
      requestedCpu: 500m
    svn-export:
      enabled: false
      requestedMemory: 768Mi
      requestedCpu: 1000m
      limitedMemory: 1Gi
      limitedCpu: 1500m
      queues:
        - swh.loader.svn.tasks.LoadSvnExport
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_svn_image
    debian:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.debian.tasks.LoadDebian
      autoScaling:
        maxReplicaCount: 1
    deposit:
      priorityClassName: frontend-rpc-workload
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.deposit.tasks.LoadDeposit
      autoScaling:
        queueThreshold: 1
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 1
      # only used for secrets below
      depositConfigurationRef: depositConfiguration
      extraConfig:
        deposit:
          url: "http://deposit-dynamic.internal.staging.swh.network/1/private"
          auth:
            username: "${DEPOSIT_USERNAME}"
            password: "${DEPOSIT_PASSWORD}"
        default_filename: archive.tar
    golang:
      enabled: false
      image: swh_loader_package_image
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.package.golang.tasks.LoadGolang
      autoScaling:
        maxReplicaCount: 1
    save-code-now:
      queues:
        - save_code_now:swh.loader.bzr.tasks.LoadBazaar
        - save_code_now:swh.loader.cvs.tasks.LoadCvsRepository
        - save_code_now:swh.loader.git.tasks.UpdateGitRepository
        - save_code_now:swh.loader.git.tasks.LoadDiskGitRepository
        - save_code_now:swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
        - save_code_now:swh.loader.mercurial.tasks.LoadArchiveMercurial
        - save_code_now:swh.loader.mercurial.tasks.LoadMercurial
        - save_code_now:swh.loader.svn.tasks.LoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.MountAndLoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
        - save_code_now:swh.loader.package.archive.tasks.LoadTarball
      ackLate: true
      autoScaling:
        stopWhenNoActivity: false
        queueThreshold: 1
        minReplicaCount: 2
        maxReplicaCount: 2
      # low profile as there is no autoscaling
      # and they are doing nothing most of the time
      requestedMemory: 200Mi
      requestedCpu: 50m
    maven:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.maven.tasks.LoadMaven
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 600Mi
      requestedCpu: 500m
    mercurial:
      enabled: false
      queues:
        - swh.loader.mercurial.tasks.LoadArchiveMercurial
        - swh.loader.mercurial.tasks.LoadMercurial
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 124Mi
      requestedCpu: 500m
    npm:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.npm.tasks.LoadNpm
      autoScaling:
        maxReplicaCount: 1
    oneshot:
      image: swh_loader_savecodenow_image
      requestedMemory: 768Mi
      requestedCpu: 200m
      limitedMemory: 25Gi
      queues:
        - oneshot:swh.loader.cvs.tasks.LoadCvsRepository
        - oneshot:swh.loader.git.tasks.UpdateGitRepository
        - oneshot:swh.loader.mercurial.tasks.LoadMercurial
        - oneshot:swh.loader.svn.tasks.LoadSvnRepository
        - oneshot:swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 10
    opam:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.opam.tasks.LoadOpam
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 1Gi
      requestedCpu: 1300m
    pypi:
      enabled: false
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pypi.tasks.LoadPyPI
      autoScaling:
        maxReplicaCount: 1
    pubdev:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pubdev.tasks.LoadPubDev
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 256Mi
      requestedCpu: 800m
    rpm:
      enabled: false
      image: swh_loader_package_image
      queues:
        - swh.loader.package.rpm.tasks.LoadRpm
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 3Gi
      requestedCpu: 1000m
    svn:
      enabled: false
      queues:
        - swh.loader.svn.tasks.LoadSvnRepository
        - swh.loader.svn.tasks.MountAndLoadSvnRepository
        - swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 6Gi
      requestedCpu: 100m
      limitedMemory: 25Gi

loader_metadata:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  consumerGroup: loader_metadata.journal_client
  prefix: swh.journal.objects
  journalBrokers:
    secretName: swh-archive-broker-secret
    hosts:
      - journal2.internal.staging.swh.network:9094
    user: swh-archive-stg
  autoScaling:
    maxReplicaCount: 1
  requestedMemory: 200Mi
  requestedCpu: 10m

storage_replayer:
  enabled: true

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  storageConfigurationRef: cassandraReplayerStorageConfiguration
  journalBrokers:
    hosts:
      - journal2.internal.staging.swh.network:9094
    user: swh-cassandra-stg
    groupIdName: cassandra
    secretName: swh-cassandra-broker-secret
  error_reporter:
    host: redis.redis
    port: 6379
    db: 1
  deployments:
    content:
      objects:
        - content
      privileged: true
      requestedCpu: 350m
      requestedMemory: 300Mi
      autoScaling:
        maxReplicaCount: 10
    directory:
      objects:
        - directory
      batchSize: 250
      privileged: true
      requestedCpu: 350m
      requestedMemory: 250Mi
      autoScaling:
        maxReplicaCount: 10
    extid:
      objects:
        - extid
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    metadata:
      objects:
        - metadata_authority
        - metadata_fetcher
      privileged: true
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      objects:
        - raw_extrinsic_metadata
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin:
      objects:
        - origin
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      objects:
        - origin_visit
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 400Mi
      #Follow up consumption
      #requestedCpu: 100m
      #requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      objects:
        - origin_visit_status
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 500m
      requestedMemory: 300Mi
      #Follow up consumption
      #requestedCpu: 55m
      #requestedMemory: 200Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      objects:
        - release
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 600m
      requestedMemory: 300Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    revision:
      objects:
        - revision
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 750m
      requestedMemory: 750Mi
      # follow up consumption
      #requestedCpu: 50m
      #requestedMemory: 400Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      objects:
        - skipped_content
      batchSize: 100
      privileged: true
      # Full replay
      requestedCpu: 300m
      requestedMemory: 400Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      objects:
        - snapshot
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 250Mi
      # follow up consumption
      #requestedCpu: 80m
      autoScaling:
        maxReplicaCount: 5

storageJournalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  clientId: swh.storage-cassandra.journal_writer.${HOSTNAME}
  producerConfig:
    message.max.bytes: 1000000000

storage:
  enabled: true
  deployments:
    cassandra:
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1500Mi
      storageConfigurationRef: cassandraStorageConfiguration
      hosts:
        - storage-cassandra-read-write-ingress
      ingress:
        enabled: true
        whitelistSourceRangeRef: clusterNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 4
        workers: 8
    cassandra-read-only:
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 6
        cpuPercentageUsage: 150
      requestedCpu: 250m
      requestedMemory: 500Mi
      storageConfigurationRef: cassandraROStorageConfiguration
      hosts:
        - storage-cassandra-read-only-ingress
        - storage-cassandra.internal.staging.swh.network
      ingress:
        enabled: true
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          # XXX: probably not needed for read-only RPCs
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      gunicorn:
        threads: 4
        workers: 8

web:
  enabled: true
  logLevel: INFO
  deployments:
    cassandra:
      # Usual consumption with visits webhook is 200m cpu (/2 replicas)
      # Scale up if a real burst happen (>1 cpu per pod)
      requestedCpu: 100m
      requestedMemory: 512Mi
      gunicorn:
        workers: 4
        threads: 2
        timeout: 3600
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4  # 4 to test the autoscaling in extreme scenarios
        cpuPercentageUsage: 75
      hosts:
        - webapp.staging.swh.network
        - webapp-cassandra.internal.staging.swh.network
      syncMailmaps:
        enabled: true
        concurrencyPolicy: Forbid
        configurationRef: postgresqlSyncmailmapsConfiguration
        priorityClassName: frontend-rpc-workload
        cron: "15 * * * *"
      ingress:
        enabled: true
        secretName: swh-web-crt
        extraAnnotations:
          cert-manager.io/cluster-issuer: letsencrypt-production-gandi
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        tlsEnabled: true
        endpoints:
          default:
            paths:
              - path: /
              - path: /static
                port: 80
          authenticated:
            paths:
              - path: /api/1/provenance/
              - path: /api/1/entity/
              - path: /api/1/content/[^/]+/symbol/
            # auth-file with authentication
            authentication: swh-cassandra/web-auth-secrets
          webhooks:
            paths:
              - path: /save/origin/visit/webhook
            extraWhitelistSourceRange:
              - 192.168.130.1
              - 192.168.130.2
      databaseConfigurationRef: postgresqlWebConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      storageConfigurationRef: remoteReadOnlyStorageConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
      countersConfigurationRef: remoteCountersConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      depositConfigurationRef: depositConfiguration
      giveConfigurationRef: giveConfiguration
      throttlingConfigurationRef: webThrottling
      addForgeNowConfigurationRef: addForgeNowConfiguration
      webhooksConfigurationRef: webhooksConfiguration
      keycloakConfigurationRef: keycloakConfiguration
      inboundEmailConfigurationRef: inboundEmailConfiguration

      extraConfig:
        keycloak:
          server_url: https://auth.softwareheritage.org/auth/
          realm_name: SoftwareHeritageStaging
        save_code_now_webhook_secret: ${WEBHOOKS_SECRET}
        search_config:
          metadata_backend: swh-search
        inbound_email:
          shared_key: ${INBOUND_EMAIL_SHARED_KEY}
        content_display_max_size: 5242880
        history_counters_url: http://counters-rpc-ingress/counters_history/history.json
        swh_extra_django_apps:
        - swh.web.add_forge_now
        - swh.web.archive_coverage
        - swh.web.badges
        - swh.web.banners
        - swh.web.deposit
        - swh.web.inbound_email
        - swh.web.jslicenses
        - swh.web.mailmap
        - swh.web.metrics
        - swh.web.save_code_now
        - swh.web.save_origin_webhooks
        - swh.web.vault
        matomo: {}
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

graphql:
  enabled: true
  deployments:
    cassandra:
      logLevel: DEBUG
      debug: yes
      sentry:
        enabled: true
      storageConfigurationRef: remoteROStorageConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      replicas: 2
      gunicorn:
        threads: 4
        workers: 2
        timeout: 3600
      hosts:
        - webapp-cassandra.internal.staging.swh.network
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        whitelistSourceRangeRef: stagingNetworkRanges
        endpoints:
          default:
            paths:
              - path: /graphql/
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      auth:
        # temporary disable the authentication to avoid a redirect error from keycloak
        enabled: false
        server: https://auth.softwareheritage.org/auth/
        realm: SoftwareHeritageStaging
        client: swh-web
        cacheUrl: memcached://memcached:11211
      maxRawContentSize: 10000

vault:
  enabled: true
  priorityClassName: frontend-rpc
  logLevel: INFO
  schedulerConfigurationRef: remoteSchedulerConfiguration
  vaultConfigurationRef: postgresqlVaultConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  objstorageConfigurationRef: remoteROObjstorageConfiguration
  cacheConfigurationRef: azureCacheConfiguration
  # replicas: 2
  gunicorn:
    threads: 5
    workers: 4
    timeout: 3600
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 75
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    # Default allowed ip ranges that can be extended per ingress definitions paths
    whitelistSourceRangeRef: clusterNetworkRanges
    endpoints:
      default:
        paths:
          - path: /

cookers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  threadPoolSize: 4
  deployments:
    simple:
      ackLate: true
      queues:
        - swh.vault.cooking_tasks.SWHCookingTask
      autoScaling:
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 2
    batch:
      queues:
        - swh.vault.cooking_tasks.SWHBatchCookingTask
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 2

toolbox:
  enabled: true
  configs:
    scheduler:
      schedulerDbConfigurationRef: postgresqlSchedulerConfiguration
      celeryConfigurationRef: producerCeleryConfiguration
    scrubber-storage:
      moduleName: scrubber
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageConfigurationRef: scrubberROStorageConfiguration
    indexer-storage:
      moduleName: indexer
      moduleConfigKey: indexer_storage
      indexerDbConfigurationRef: postgresqlIndexerStorageConfiguration
    masking:
      moduleName: storage
      storageConfigurationRef: postgresqlMaskingAdminStorageConfiguration
      maskingAdminConfigurationRef: maskingAdminPostgresqlConfiguration
    vault:
      vaultDbConfigurationRef: postgresqlVaultConfiguration
    webhooks:
      webhooksConfigurationRef: svixConfiguration

scrubber:
  enabled: true
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  priorityClassName: background-workload
  storageChecker:
    enabled: true
    storageConfigurationRef: scrubberROStorageConfiguration
    deployments:
      directory-references:
        configName: storage-cassandra-references-directory
        object: directory
        replicas: 4
        requestedCpu: 400m
        requestedMemory: 200Mi
      directory-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-directory
        object: directory
        replicas: 1
        requestedCpu: 400m
        requestedMemory: 200Mi
      release-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-release
        object: release
        replicas: 1
      release-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-release
        object: release
        replicas: 1
      revision-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      revision-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      snapshot-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi
      snapshot-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi

deposit:
  enabled: true
  logLevel: INFO
  requestedCpu: 500m
  requestedMemory: 500Mi
  migrationsEnabled: false
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 3
    cpuPercentageUsage: 100
  ingress:
    enabled: true
    extraAnnotations:
      kubernetes.io/ingress.class: nginx
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
      authenticated:
        paths:
          - path: /1/private/
        # auth-file with authentication
        authentication: swh-cassandra/deposit-auth-secrets
  databaseConfigurationRef: postgresqlDepositConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  # In prod this storage is read-only
  storageConfigurationRef: remoteReadOnlyStorageConfiguration
  # XXX: but this one is read-write?
  storageMetadataConfigurationRef: remoteCassandraStorageConfiguration
  djangoConfigurationRef: djangoDepositConfiguration
  blobstorageConfigurationRef: azureDepositConfiguration
  keycloakConfigurationRef: keycloakConfiguration
  hosts:
    - deposit-rpc-ingress
    - deposit.staging.swh.network
    - deposit-dynamic.internal.staging.swh.network
  extraConfig:
    max_upload_size: 209715200
    extraction_dir: "/tmp/swh-deposit/archive/"
    cache_uri: memcached:11211

objstorage:
  enabled: true
  port: 5003
  priorityClassName: frontend-rpc
  deployments:
    # Each key will be an objstorage instance to be deployed
    # The mandatory objstorageConfigurationRef key should target a dict
    # with the specific objstorage configuration
    db1-read-write:
      enabled: true
      nodeSelector:
        kubernetes.io/hostname: db1
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 60
      extraVolumes:
        staging-pathslicing-rw:
          mountPath: /srv/softwareheritage/objects
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory
      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: pathslicingNoCompressionObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      hosts:
        - objstorage-db1-rw-rpc-ingress
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
    # storage1 read-only objstorage
    storage1-read-only:
      enabled: true
      nodeSelector:
        kubernetes.io/hostname: storage1
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 60
      extraVolumes:
        staging-pathslicing-ro:
          mountPath: /srv/softwareheritage/objects
          readOnly: true
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: pathslicingObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-storage1-ro-rpc-ingress
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
    # db1 read-only objstorage
    db1-read-only:
      enabled: true
      nodeSelector:
        kubernetes.io/hostname: db1
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 60
      extraVolumes:
        staging-pathslicing-ro:
          mountPath: /srv/softwareheritage/objects
          readOnly: true
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: pathslicingNoCompressionObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-db1-ro-rpc-ingress
      ingress:
        enabled: true
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
    # read-only objstorage
    multiplexer-read-only:
      enabled: true
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 60
      objstorageConfigurationRef: multiplexerReadOnlyObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      hosts:
        - objstorage-read-only-rpc-ingress
        - objstorage-ro.internal.staging.swh.network
      ingress:
        enabled: true
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
    # read-write objstorage
    multiplexer-read-write:
      enabled: true
      replicas: 2
      gunicorn:
        workers: 4
        threads: 2
        timeout: 60
      objstorageConfigurationRef: multiplexerReadWriteObjstorageConfiguration
      hosts:
        - objstorage-multiplexer-read-write-rpc-ingress
      ingress:
        enabled: true
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /

webhooks:
  enabled: true
  svixConfigurationRef: svixConfiguration
  journalClientConfigurationRef: journalClientConfiguration
  priorityClassName: frontend-rpc-workload
  deployments:
    origin-visit-status:
      replicas: 1
      requestedCpu: 100m
      requestedMemory: 100Mi
      journalClientOverrides:
        auto_offset_reset: latest
        group_id: swh-archive-stg-webhooks
        object_types:
          - origin_visit_status

stagingRedis:
  cls: redis
  host: counters0.internal.staging.swh.network:6379

historyConfiguration:
  cls: prometheus
  prometheus_host: thanos.internal.admin.swh.network
  prometheus_port: 19191
  live_data_start: 1609462861
  interval: 12h
  labels:
    environment: staging

counters:
  enabled: true
  journalClient:
    enabled: true
    countersConfigurationRef: remoteCountersConfiguration
    journalConfigurationRef: journalClientCountersConfiguration
  refreshCountersCache:
    enabled: true
    cron: "0 */1 * * *"
    concurrencyPolicy: Forbid
    countersConfigurationRef: remoteCountersConfiguration
    historyFiles:
      - history.json
      - '""'
  rpc:
    enabled: true
    fetchStaticHistory: false
    cacheBaseDirectory: /srv/softwareheritage/counters
    countersConfigurationRef: stagingRedis
    historyConfigurationRef: historyConfiguration
    gunicorn:
      threads: 1
      workers: 1
      timeout: 10
    replicas: 1
    # autoScaling:
    #   minReplicaCount: 2
    #   maxReplicaCount: 4
    #   cpuPercentageUsage: 100
    hosts:
      - counters-rpc-ingress
      - counters.internal.staging.swh.network
    ingress:
      enabled: true
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: stagingNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
          extraWhitelistSourceRange:
            # vpn network
            - 192.168.101.0/24

listers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  deployments:
    arch:
      queues:
        - swh.lister.arch.tasks.ArchListerTask
      autoScaling:
        maxReplicaCount: 1
    aur:
      queues:
        - swh.lister.aur.tasks.AurListerTask
      autoScaling:
        maxReplicaCount: 1
    bioconductor:
      queues:
        - swh.lister.bioconductor.tasks.BioconductorListerTask
        - swh.lister.bioconductor.tasks.BioconductorIncrementalListerTask
      autoScaling:
        maxReplicaCount: 1
    bower:
      queues:
      - swh.lister.bower.tasks.BowerListerTask
      autoScaling:
        maxReplicaCount: 1
    bitbucket:
      queues:
      - swh.lister.bitbucket.tasks.IncrementalBitBucketLister
      - swh.lister.bitbucket.tasks.FullBitBucketRelister
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 600Mi
      requestedCpu: 200m
    cgit:
      queues:
        - swh.lister.cgit.tasks.CGitListerTask
      autoScaling:
        maxReplicaCount: 1
    cran:
      queues:
      - swh.lister.cran.tasks.CRANListerTask
      autoScaling:
        maxReplicaCount: 1
    debian:
      queues:
        - swh.lister.debian.tasks.DebianListerTask
      autoScaling:
        maxReplicaCount: 1
    dlang:
      queues:
      - swh.lister.dlang.tasks.DlangListerTask
      autoScaling:
        maxReplicaCount: 1
    gitea:
      queues:
      - swh.lister.gitea.tasks.IncrementalGiteaLister
      - swh.lister.gitea.tasks.RangeGiteaLister
      - swh.lister.gitea.tasks.FullGiteaRelister
      autoScaling:
        maxReplicaCount: 1
    gitiles:
      queues:
      - swh.lister.gitiles.tasks.GitilesListerTask
      autoScaling:
        maxReplicaCount: 1
    gitlab:
      queues:
      - swh.lister.gitlab.tasks.IncrementalGitLabLister
      - swh.lister.gitlab.tasks.RangeGitLabLister
      - swh.lister.gitlab.tasks.FullGitLabRelister
      autoScaling:
        maxReplicaCount: 1
    gitweb:
      queues:
      - swh.lister.gitweb.tasks.GitwebListerTask
      autoScaling:
        maxReplicaCount: 1
    gnu-full:
      queues:
        - swh.lister.gnu.tasks.GNUListerTask
      autoScaling:
        maxReplicaCount: 1
    gogs-full:
      queues:
        - swh.lister.gogs.tasks.FullGogsRelister
      autoScaling:
        maxReplicaCount: 1
    golang:
      queues:
      - swh.lister.golang.tasks.FullGolangLister
      - swh.lister.golang.tasks.IncrementalGolangLister
      autoScaling:
        maxReplicaCount: 1
    launchpad:
      queues:
      - swh.lister.launchpad.tasks.FullLaunchpadLister
      - swh.lister.launchpad.tasks.IncrementalLaunchpadLister
      autoScaling:
        maxReplicaCount: 1
    maven:
      queues:
      - swh.lister.maven.tasks.FullMavenLister
      - swh.lister.maven.tasks.IncrementalMavenLister
      autoScaling:
        maxReplicaCount: 1
      requestedCpu: 1000m
      requestedMemory: 6Gi
    nixguix:
      queues:
      - swh.lister.nixguix.tasks.NixGuixListerTask
      autoScaling:
        maxReplicaCount: 1
      extraConfig:
        # extra extensions to ignore
        extensions_to_ignore:
          - rock
    npm:
      queues:
      - swh.lister.npm.tasks.NpmListerTask
      autoScaling:
        maxReplicaCount: 1
    opam:
      queues:
      - swh.lister.opam.tasks.OpamListerTask
      autoScaling:
        maxReplicaCount: 1
    packagist:
      queues:
        - swh.lister.packagist.tasks.PackagistListerTask
      autoScaling:
        maxReplicaCount: 1
    pagure:
      queues:
        - swh.lister.pagure.tasks.PagureListerTask
      autoScaling:
        maxReplicaCount: 1
    phabricator:
      queues:
      - swh.lister.phabricator.tasks.FullPhabricatorLister
      autoScaling:
        maxReplicaCount: 1
    pubdev:
      queues:
        - swh.lister.pubdev.tasks.PubDevListerTask
      autoScaling:
        maxReplicaCount: 1
    pypi:
      queues:
      - swh.lister.pypi.tasks.PyPIListerTask
      autoScaling:
        maxReplicaCount: 1
    rpm:
      queues:
        - swh.lister.rpm.tasks.FullRPMLister
        - swh.lister.rpm.tasks.IncrementalRPMLister
      autoScaling:
        maxReplicaCount: 1
    sourceforge:
      queues:
      - swh.lister.sourceforge.tasks.FullSourceForgeLister
      - swh.lister.sourceforge.tasks.IncrementalSourceForgeLister
      autoScaling:
        maxReplicaCount: 1
    stagit:
      queues:
      - swh.lister.stagit.tasks.StagitListerTask
      autoScaling:
        maxReplicaCount: 1

indexerStorage:
  enabled: true
  deployments:
    rpc:
      checkDbVersion: true
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4
        cpuPercentageUsage: 90
      requestedCpu: 10m
      requestedMemory: 200Mi
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      journalWriterConfigurationRef: indexerJournalWriterConfiguration
      hosts:
        - indexer-storage-rpc-ingress
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
          nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-body-size: "4G"
        # Default allowed ip ranges that can be extended per ingress definitions paths
        whitelistSourceRangeRef: clusterNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
      gunicorn:
        threads: 2
        workers: 4

indexers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
  objstorageConfigurationRef: remoteReadOnlyObjstorageConfiguration
  journalClientConfigurationRef: authenticatedJournalClientConfiguration
  deployments:
    # content-mimetype:
    #   indexer_type: content_mimetype
    #   consumerGroup: swh.indexer.journal_client.content_mimetype
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     tools:
    #       name: file
    #       # FIXME: Push this version to be autodetected by indexer
    #       version: 2:0.4.15-2
    #       configuration:
    #         type: library
    #         debian-package: python3-magic
    #     write_batch_size: 1000
    #   autoScaling:
    #     maxReplicaCount: 2
    # content-fossology-license:
    #   indexer_type: content_fossology_license
    #   consumerGroup: swh.indexer.journal_client.content_fossology_license
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     workdir: /tmp/swh/indexer.fossology.license/
    #     tools:
    #       name: 'nomos'
    #       version: '3.1-1~bpo9~swh+1'
    #       configuration:
    #         command_line: "nomossa <filepath>"
    #     write_batch_size: 1000
    #   autoScaling:
    #     maxReplicaCount: 2
    # origin-extrinsic:
    #   indexer_type: extrinsic_metadata
    #   consumerGroup: swh.indexer.journal_client.extrinsic_metadata
    #   prefix: swh.journal.objects
    #   extraConfig:
    #     tools:
    #       name: swh-metadata-detector
    #       version: 0.0.2
    #       configuration: {}
    #   autoScaling:
    #     maxReplicaCount: 2
    origin-intrinsic:
      indexer_type: origin_intrinsic_metadata
      journalClientOverrides:
        group_id: swh-archive-stg-swh.indexer.journal_client.origin_intrinsic_metadata
        batch_size: 200
      requestedCpu: 50m
      requestedMemory: 100Mi
      extraConfig:
        tools:
          name: swh-metadata-detector
          version: 0.0.2
          configuration: {}
      autoScaling:
        maxReplicaCount: 6
    extrinsic:
      indexer_type: extrinsic_metadata
      journalClientOverrides:
        group_id: swh-archive-stg-swh.indexer.journal_client.extrinsic_metadata
        prefix: swh.journal.objects
        batch_size: 200
      requestedCpu: 50m
      requestedMemory: 100Mi
      extraConfig:
        tools:
          name: swh-metadata-detector
          version: 0.0.2
          configuration: {}
      autoScaling:
        maxReplicaCount: 6

checker_deposit:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  depositConfigurationRef: depositConfiguration
  autoScaling:
    queueThreshold: 1
    stopWhenNoActivity: false
    minReplicaCount: 1
    maxReplicaCount: 1
  requestedMemory: 100Mi
  requestedCpu: 100m
  limitedMemory: 1Gi
  limitedCpu: 1000m

search:
  enabled: true
  priorityClassName: frontend-rpc
  logLevel: INFO
  elasticsearchConfigurationRef: elasticsearchConfiguration
  # replicas: 2
  gunicorn:
    threads: 5
    workers: 4
    timeout: 3600
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedCpu: 100m
  requestedMemory: 300Mi
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 75
  hosts:
    - search-rpc-ingress
    - search.internal.staging.swh.network
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    # Default allowed ip ranges that can be extended per ingress definitions paths
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
      read-only:
        paths:
          - path: /
            pathType: Exact
          - path: /origin/search
            pathType: Exact
          - path: /origin/get
            pathType: Exact
          - path: /visit_types_count
            pathType: Exact
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  journalClients:
    enabled: true
    priorityClassName: normal-workload
    searchConfigurationRef: remoteSearchConfiguration
    storageConfigurationRef: remoteReadOnlyStorageConfiguration
    journalConfigurationRef: searchJournalClientConfiguration
    deployments:
      objects:
        requestedCpu: 10m
        requestedMemory: 50Mi
        journalClientOverrides:
          group_id: swh.search.journal_client-v0.11
          prefix: swh.journal.objects
          object_types:
          - origin
          - origin_visit_status
      indexed:
        requestedCpu: 10m
        requestedMemory: 50Mi
        journalClientOverrides:
          group_id: swh.search.journal_client.indexed-v0.11
          prefix: swh.journal.indexed
          object_types:
          - origin_intrinsic_metadata
          - origin_extrinsic_metadata


scheduler:
  enabled: true
  sentry:
    enabled: true
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: producerCeleryConfiguration
  alerts:
    enabled: true
    period: 15m
    severity: warning
    tooManyMessagesInQueue:
      instances:  # We may have more than one rabbitmq per environment
        scheduler0:
          threshold: 10000

  recurrent:
    enabled: true
    requestedMemory: 400Mi
    requestedCpu: 10m
  rpc:
    enabled: true
    # The scheduler instance to use for rpc must be a postgresql instance
    schedulerConfigurationRef: postgresqlSchedulerConfiguration
    replicas: 2
    gunicorn:
      threads: 5
      workers: 4
      timeout: 60
    hosts:
      - scheduler.internal.staging.swh.network
    ingress:
      enabled: true
      # TODO: Improve the authorization internal cluster ip range.
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: stagingNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
        read-only:
          paths:
            - path: /scheduler_metrics/get
              pathType: Exact
            - path: /listers/get
              pathType: Exact
            - path: /lister/get
              pathType: Exact
            - path: /task_type/get
              pathType: Exact
            - path: /task_type/get_all
              pathType: Exact
            - path: /visit_stats/get
              pathType: Exact
            - path: /origins/get
              pathType: Exact
          extraWhitelistSourceRange:
            # vpn network
            - 192.168.101.0/24
    requestedMemory: 700Mi
    requestedCpu: 50m
  updateMetrics:
    enabled: true
    concurrencyPolicy: Forbid
    cron: "0/10 * * * *"  # at every 10th minute from 0 to 59
  journalClient:
    enabled: true
    journalConfigurationRef: journalClientConfiguration
    requestedMemory: 100Mi
    requestedCpu: 10m
  extraServices:
    runner:
      enabled: true
      logLevel: INFO
      period: 10
      requestedMemory: 100Mi
      limitedMemory: 200Mi
      requestedCpu: 10m
      limitedCpu: 20m
    runner-priority:
      enabled: true
      logLevel: INFO
      period: 10
      requestedMemory: 50Mi
      limitedMemory: 100Mi
      requestedCpu: 5m
      limitedCpu: 10m
      extraConfig:
        - load-bzr
        - load-cvs
        - load-git
        - load-svn
        - load-archive-files
        - load-hg
    listener:
      enabled: true
      replicas: 2
      logLevel: INFO
      requestedMemory: 100Mi
      requestedCpu: 10m

journalClientCassandraChecksConfiguration:
  cls: kafka
  brokersConfigurationRef: internalSecuredKafkaBrokers
  sasl.mechanism: SCRAM-SHA-512
  security.protocol: SASL_SSL
  sasl.username: ${BROKER_USER}
  sasl.password: ${BROKER_USER_PASSWORD}
  message.max.bytes: 524288000
  prefix: swh.journal.objects
  group_id: swh-archive-stg-checks
  # To override per instance
  object_types: []
  secrets:
    BROKER_USER:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER
    BROKER_USER_PASSWORD:
      secretKeyRef: swh-archive-broker-secret
      secretKeyName: BROKER_USER_PASSWORD

cassandraChecks:
  enabled: true
  directoryOutput: /volume/staging-cassandra-checks
  volume:
    name: cassandra-checks-volume
    mountPath: /volume
    # readOnly: true
    volumeDefinition:
      hostPath:
        path: /volume
        type: Directory
  #   volumeDefinition:
  #     persistentVolumeClaim:
  #       claimName: cassandra-checks-pvc
  # volumeClaim:
  #   storageClassName: cephfs
  #   name: cassandra-checks-pvc
  #   size: 20Gi

  priorityClassName: swh-background-workload
  nodeSelector:
    kubernetes.io/hostname: rancher-node-staging-rke2-metal01
  storagePostgresqlConfigurationRef: primaryPostgresqlROStorageConfiguration
  storageCassandraConfigurationRef: cassandraChecksROStorage
  journalClientConfigurationRef: journalClientCassandraChecksConfiguration
  deployments:
    origin:
      replicas: 1
      journalClientOverrides:
        object_types:
          - origin
          - origin_visit
          - origin_visit_status
        batch_size: 1000
    content:
      replicas: 1
      journalClientOverrides:
        object_types:
        - content
        - skipped_content
        batch_size: 1000
    directory:
      replicas: 1
      journalClientOverrides:
        object_types:
          - directory
        batch_size: 50
    revision:
      replicas: 1
      journalClientOverrides:
        object_types:
          - revision
        batch_size: 1000
        privileged: true
    release:
      replicas: 1
      journalClientOverrides:
        object_types:
          - release
        batch_size: 1000
        privileged: true
    snapshot:
      replicas: 1
      journalClientOverrides:
        object_types:
          - snapshot
        batch_size: 50
    extid:
      replicas: 1
      journalClientOverrides:
        object_types:
        - extid
        batch_size: 100
    metadata:
      enabled: false
      # logLevel: DEBUG
      replicas: 1
      journalClientOverrides:
        object_types:
        - raw_extrinsic_metadata
        batch_size: 1000

