namespace: swh-cassandra

remoteStorageConfiguration:
  cls: remote
  url: http://storage-cassandra:5002

localRpcRWStorageConfiguration:
  cls: remote
  url: http://storage-cassandra:5002

rpcRWStorageConfiguration:
  pipelineStepsRef: storagePipelineSteps
  storageConfigurationRef: localRpcRWStorageConfiguration

# (Not so) readonly (namespace local) storage
localRpcROStorageConfiguration:
  storageConfigurationRef: localRpcRWStorageConfiguration

cassandraSeeds:
  - cassandra1.internal.staging.swh.network
  - cassandra2.internal.staging.swh.network
  - cassandra3.internal.staging.swh.network

cassandraStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  specificOptions:
    directory_entries_insert_algo: batch
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-rw
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-rw-password

cassandraROStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-ro
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-ro-password

cassandraReplayerStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  objstorageConfigurationRef: noopObjectStorage

cassandraStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  journalWriterConfigurationRef: storageJournalWriterConfiguration
  objstorageConfigurationRef: remoteReadWriteObjstorageConfiguration

scrubberROStorageConfiguration:
  storageConfigurationRef: cassandraROStorage

azureCacheConfiguration:
  cls: azure
  connection_string: "DefaultEndpointsProtocol=https;AccountName=swhvaultstoragestaging;AccountKey=${ACCOUNT_KEY};EndpointSuffix=core.windows.net"
  container_name: contents-uncompressed
  compression: none
  secrets:
    ACCOUNT_KEY:
      secretKeyRef: swh-vault-azure-secret
      secretKeyName: azure-swh-vault-key

loaders:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  depositConfigurationRef: depositConfiguration
  deployments:
    add-forge-now:
      image: swh_loader_git_image
      queues:
        - add_forge_now:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 3
      requestedMemory: 1Gi
      requestedCpu: 200m
    add-forge-now-slow:
      image: swh_loader_git_image
      queues:
        - add_forge_now_slow:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
      requestedMemory: 1Gi
      requestedCpu: 200m
    arch:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.arch.tasks.LoadArch
      autoScaling:
        maxReplicaCount: 1
    aur:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.aur.tasks.LoadAur
      autoScaling:
        maxReplicaCount: 1
    archive:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.archive.tasks.LoadTarball
      autoScaling:
        maxReplicaCount: 1
    bioconductor:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.bioconductor.tasks.LoadBioconductor
      autoScaling:
        maxReplicaCount: 1
    bzr:
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.bzr.tasks.LoadBazaar
      autoScaling:
        maxReplicaCount: 1
    cran:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.cran.tasks.LoadCRAN
      autoScaling:
        maxReplicaCount: 1
    cvs:
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.cvs.tasks.LoadCvsRepository
      autoScaling:
        maxReplicaCount: 1
    content:
      requestedCpu: 350m
      requestedMemory: 150Mi
      queues:
        - swh.loader.core.tasks.LoadContent
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_package_image
    directory:
      requestedMemory: 768Mi
      requestedCpu: 1000m
      queues:
        - swh.loader.core.tasks.LoadTarballDirectory
      autoScaling:
        maxReplicaCount: 6
      image: swh_loader_package_image
    git:
      priorityClassName: low-workload
      queues:
        - swh.loader.git.tasks.UpdateGitRepository
        - swh.loader.git.tasks.LoadDiskGitRepository
        - swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
      autoScaling:
        maxReplicaCount: 2
        minReplicaCount: 1
        stopWhenNoActivity: false
      requestedMemory: 768Mi
      requestedCpu: 100m
    git-checkout:
      image: swh_loader_git_image
      queues:
        - swh.loader.git.tasks.LoadGitCheckout
      autoScaling:
        maxReplicaCount: 3
      requestedMemory: 256Mi
      requestedCpu: 500m
    hg-checkout:
      image: swh_loader_mercurial_image
      queues:
        - swh.loader.mercurial.tasks.LoadMercurialCheckout
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 768Mi
      requestedCpu: 500m
    svn-export:
      requestedMemory: 768Mi
      requestedCpu: 1000m
      limitedMemory: 1Gi
      limitedCpu: 1500m
      queues:
        - swh.loader.svn.tasks.LoadSvnExport
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_svn_image
    debian:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.debian.tasks.LoadDebian
      autoScaling:
        maxReplicaCount: 1
    deposit:
      priorityClassName: frontend-rpc-workload
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.deposit.tasks.LoadDeposit
      autoScaling:
        queueThreshold: 1
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 1
      extraConfig:
        deposit:
          url: "https://deposit-dynamic.internal.staging.swh.network/1/private"
          auth:
            username: "${DEPOSIT_USERNAME}"
            password: "${DEPOSIT_PASSWORD}"
        default_filename: archive.tar
    golang:
      image: swh_loader_package_image
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.package.golang.tasks.LoadGolang
      autoScaling:
        maxReplicaCount: 1
    save-code-now:
      queues:
        - save_code_now:swh.loader.bzr.tasks.LoadBazaar
        - save_code_now:swh.loader.cvs.tasks.LoadCvsRepository
        - save_code_now:swh.loader.git.tasks.UpdateGitRepository
        - save_code_now:swh.loader.git.tasks.LoadDiskGitRepository
        - save_code_now:swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
        - save_code_now:swh.loader.mercurial.tasks.LoadArchiveMercurial
        - save_code_now:swh.loader.mercurial.tasks.LoadMercurial
        - save_code_now:swh.loader.svn.tasks.LoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.MountAndLoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
        - save_code_now:swh.loader.package.archive.tasks.LoadTarball
      ackLate: true
      autoScaling:
        stopWhenNoActivity: false
        queueThreshold: 1
        minReplicaCount: 2
        maxReplicaCount: 2
      # low profile as there is no autoscaling
      # and they are doing nothing most of the time
      requestedMemory: 200Mi
      requestedCpu: 50m
    maven:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.maven.tasks.LoadMaven
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 600Mi
      requestedCpu: 500m
    mercurial:
      queues:
        - swh.loader.mercurial.tasks.LoadArchiveMercurial
        - swh.loader.mercurial.tasks.LoadMercurial
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 124Mi
      requestedCpu: 500m
    npm:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.npm.tasks.LoadNpm
      autoScaling:
        maxReplicaCount: 1
    opam:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.opam.tasks.LoadOpam
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 1Gi
      requestedCpu: 1300m
    pypi:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pypi.tasks.LoadPyPI
      autoScaling:
        maxReplicaCount: 1
    pubdev:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pubdev.tasks.LoadPubDev
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 256Mi
      requestedCpu: 800m
    rpm:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.rpm.tasks.LoadRpm
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 3Gi
      requestedCpu: 1000m
    svn:
      queues:
        - swh.loader.svn.tasks.LoadSvnRepository
        - swh.loader.svn.tasks.MountAndLoadSvnRepository
        - swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 6Gi
      requestedCpu: 100m
      limitedMemory: 25Gi

loader_metadata:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  consumerGroup: loader_metadata.journal_client
  prefix: swh.journal.objects
  journalBrokers:
    secretName: swh-archive-broker-secret
    hosts:
      - journal2.internal.staging.swh.network:9094
    user: swh-archive-stg
  autoScaling:
    maxReplicaCount: 1
  requestedMemory: 200Mi
  requestedCpu: 10m

storage_replayer:
  enabled: true

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  storageConfigurationRef: cassandraReplayerStorageConfiguration
  journalBrokers:
    hosts:
      - journal2.internal.staging.swh.network:9094
    user: swh-cassandra-stg
    groupIdName: cassandra
    secretName: swh-cassandra-broker-secret
  error_reporter:
    host: redis.redis
    port: 6379
    db: 1
  deployments:
    content:
      objects:
        - content
      privileged: true
      requestedCpu: 350m
      requestedMemory: 300Mi
      autoScaling:
        maxReplicaCount: 10
    directory:
      objects:
        - directory
      batchSize: 250
      privileged: true
      requestedCpu: 350m
      requestedMemory: 250Mi
      autoScaling:
        maxReplicaCount: 10
    extid:
      objects:
        - extid
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    metadata:
      objects:
        - metadata_authority
        - metadata_fetcher
      privileged: true
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      objects:
        - raw_extrinsic_metadata
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin:
      objects:
        - origin
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      objects:
        - origin_visit
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 400Mi
      #Follow up consumption
      #requestedCpu: 100m
      #requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      objects:
        - origin_visit_status
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 500m
      requestedMemory: 300Mi
      #Follow up consumption
      #requestedCpu: 55m
      #requestedMemory: 200Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      objects:
        - release
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 600m
      requestedMemory: 300Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    revision:
      objects:
        - revision
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 750m
      requestedMemory: 750Mi
      # follow up consumption
      #requestedCpu: 50m
      #requestedMemory: 400Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      objects:
        - skipped_content
      batchSize: 100
      privileged: true
      # Full replay
      requestedCpu: 300m
      requestedMemory: 400Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      objects:
        - snapshot
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 250Mi
      # follow up consumption
      #requestedCpu: 80m
      autoScaling:
        maxReplicaCount: 5

storageJournalWriterConfiguration:
  brokersConfigurationRef: kafkaBrokers
  clientId: swh.storage-cassandra.journal_writer.${HOSTNAME}
  producerConfig:
    message.max.bytes: 1000000000

storage:
  enabled: true
  deployments:
    cassandra:
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 150
      requestedCpu: 500m
      requestedMemory: 1500Mi
      storageConfigurationRef: cassandraStorageConfiguration
      hosts:
        - storage-cassandra.internal.staging.swh.network
      ingress:
        enabled: true
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      gunicorn:
        threads: 4
        workers: 8

web:
  enabled: true
  logLevel: INFO
  deployments:
    cassandra:
      # Usual consumption with visits webhook is 200m cpu (/2 replicas)
      # Scale up if a real burst happen (>1 cpu per pod)
      requestedCpu: 100m
      requestedMemory: 512Mi
      gunicorn:
        workers: 4
        threads: 2
        timeout: 3600
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 4  # 4 to test the autoscaling in extreme scenarios
        cpuPercentageUsage: 1000
      hosts:
        - webapp.staging.swh.network
        - webapp-cassandra.internal.staging.swh.network
      syncMailmaps:
        enabled: true
        concurrencyPolicy: Forbid
        configurationRef: postgresqlSyncmailmapsConfiguration
        priorityClassName: frontend-rpc-workload
        cron: "15 * * * *"
      ingress:
        enabled: true
        secretName: swh-web-crt
        extraAnnotations:
          cert-manager.io/cluster-issuer: letsencrypt-production-gandi
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        tlsEnabled: true
        endpoints:
          default:
            paths:
              - path: /
              - path: /static
                port: 80
          authenticated:
            paths:
              - path: /api/1/provenance/
              - path: /api/1/entity/
              - path: /api/1/content/[^/]+/symbol/
            # auth-file with authentication
            authentication: swh-cassandra/web-auth-secrets
          webhooks:
            paths:
              - path: /save/origin/visit/webhook
            extraWhitelistSourceRange:
              - 192.168.130.1
              - 192.168.130.2
      databaseConfigurationRef: postgresqlWebConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      storageConfigurationRef: remoteStorageConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
      countersConfigurationRef: remoteCountersConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      depositConfigurationRef: depositConfiguration
      giveConfigurationRef: giveConfiguration
      throttlingConfigurationRef: webThrottling
      addForgeNowConfigurationRef: addForgeNowConfiguration
      webhooksConfigurationRef: webhooksConfiguration
      keycloakConfigurationRef: keycloakConfiguration

      extraConfig:
        keycloak:
          server_url: https://auth.softwareheritage.org/auth/
          realm_name: SoftwareHeritageStaging
        save_code_now_webhook_secret: ${WEBHOOKS_SECRET}
        search_config:
          metadata_backend: swh-search
        content_display_max_size: 5242880
        history_counters_url: http://counters-rpc-ingress/counters_history/history.json
        swh_extra_django_apps:
        - swh.web.add_forge_now
        - swh.web.archive_coverage
        - swh.web.badges
        - swh.web.banners
        - swh.web.deposit
        - swh.web.inbound_email
        - swh.web.jslicenses
        - swh.web.mailmap
        - swh.web.metrics
        - swh.web.save_code_now
        - swh.web.save_origin_webhooks
        - swh.web.vault
        matomo: {}
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

graphql:
  enabled: true
  deployments:
    cassandra:
      logLevel: DEBUG
      debug: yes
      sentry:
        enabled: true
      storageConfigurationRef: localRpcROStorageConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      replicas: 2
      gunicorn:
        threads: 4
        workers: 2
        timeout: 3600
      hosts:
        - webapp-cassandra.internal.staging.swh.network
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        whitelistSourceRangeRef: stagingNetworkRanges
        endpoints:
          default:
            paths:
              - path: /graphql/
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
      auth:
        # temporary disable the authentication to avoid a redirect error from keycloak
        enabled: false
        server: https://auth.softwareheritage.org/auth/
        realm: SoftwareHeritageStaging
        client: swh-web
        cacheUrl: memcached://memcached:11211
      maxRawContentSize: 10000

vault:
  enabled: true
  priorityClassName: frontend-rpc
  logLevel: INFO
  schedulerConfigurationRef: remoteSchedulerConfiguration
  vaultConfigurationRef: postgresqlVaultConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  objstorageConfigurationRef: remoteROObjstorageConfiguration
  cacheConfigurationRef: azureCacheConfiguration
  # replicas: 2
  gunicorn:
    threads: 5
    workers: 4
    timeout: 3600
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 75
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    # Default allowed ip ranges that can be extended per ingress definitions paths
    whitelistSourceRangeRef: clusterNetworkRanges
    endpoints:
      default:
        paths:
          - path: /

cookers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  threadPoolSize: 4
  deployments:
    simple:
      ackLate: true
      queues:
        - swh.vault.cooking_tasks.SWHCookingTask
      autoScaling:
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 2
    batch:
      queues:
        - swh.vault.cooking_tasks.SWHBatchCookingTask
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 2

toolbox:
  enabled: true
  configs:
    scrubber-storage:
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageConfigurationRef: scrubberROStorageConfiguration
    webhooks:
      webhooksConfigurationRef: svixConfiguration

scrubber:
  enabled: true
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  priorityClassName: background-workload
  storageChecker:
    enabled: true
    storageConfigurationRef: scrubberROStorageConfiguration
    deployments:
      directory-references:
        configName: storage-cassandra-references-directory
        object: directory
        replicas: 1
        requestedCpu: 400m
        requestedMemory: 200Mi
      directory-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-directory
        object: directory
        replicas: 1
        requestedCpu: 400m
        requestedMemory: 200Mi
      release-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-release
        object: release
        replicas: 1
      release-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-release
        object: release
        replicas: 1
      revision-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      revision-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-revision
        object: revision
        requestedCpu: 500m
        requestedMemory: 200Mi
      snapshot-references:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-references-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi
      snapshot-hashes:
        # until https://gitlab.softwareheritage.org/swh/devel/swh-scrubber/-/issues/4699 fix
        enabled: false
        configName: storage-cassandra-hashes-snapshot
        replicas: 1
        object: snapshot
        requestedCpu: 650m
        requestedMemory: 500Mi

deposit:
  enabled: true
  logLevel: INFO
  requestedCpu: 500m
  requestedMemory: 500Mi
  migrationsEnabled: false
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 3
    cpuPercentageUsage: 100
  ingress:
    enabled: true
    extraAnnotations:
      kubernetes.io/ingress.class: nginx
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
      authenticated:
        paths:
          - path: /1/private/
        # auth-file with authentication
        authentication: swh-cassandra/deposit-auth-secrets
  databaseConfigurationRef: postgresqlDepositConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  storageConfigurationRef: remoteStorageConfiguration
  storageMetadataConfigurationRef: remoteStorageConfiguration
  djangoConfigurationRef: djangoDepositConfiguration
  blobstorageConfigurationRef: azureDepositConfiguration
  keycloakConfigurationRef: keycloakConfiguration
  hosts:
    - deposit-rpc-ingress
    - deposit.staging.swh.network
    - deposit-dynamic.internal.staging.swh.network
  extraConfig:
    max_upload_size: 209715200
    extraction_dir: "/tmp/swh-deposit/archive/"
    cache_uri: memcached:11211

objstorage:
  enabled: true
  port: 5003
  priorityClassName: frontend-rpc
  deployments:
    # Each key will be an objstorage instance to be deployed
    # The mandatory objstorageConfigurationRef key should target a dict
    # with the specific objstorage configuration
    read-write:
      enabled: true
      gunicorn:
        threads: 5
        workers: 2
        timeout: 60
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 100
      extraVolumes:
        staging-pathslicing-rw:
          mountPath: /srv/softwareheritage/objects
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: readWriteObjstorageConfiguration
      extraRpcConfiguration:
        client_max_size: 1073741824
      hosts:
        - objstorage-read-write-rpc-ingress
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
    read-only:
      enabled: true
      gunicorn:
        threads: 5
        workers: 2
        timeout: 60
      autoScaling:
        minReplicaCount: 2
        maxReplicaCount: 10
        cpuPercentageUsage: 100
      extraVolumes:
        staging-pathslicing-ro:
          mountPath: /srv/softwareheritage/objects
          readOnly: true
          volumeDefinition:
            hostPath:
              path: /srv/softwareheritage/objects
              type: Directory

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: readWriteObjstorageConfiguration
        # Deploy an ingress to access the objstorage
      hosts:
        - objstorage-read-only-rpc-ingress
        - objstorage-ro.internal.staging.swh.network
      ingress:
        enabled: true
        # mandatory if ingress is enabled
        # the hostname on which the objstorage must be reachable
        # Optional: the ingress classname to use
        className: nginx
        whitelistSourceRangeRef: stagingNetworkRanges
        extraAnnotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 4G
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/client-body-buffer-size: 128K
        endpoints:
          default:
            paths:
              - path: /
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24

webhooks:
  enabled: true
  svixConfigurationRef: svixConfiguration
  journalClientConfigurationRef: journalClientConfiguration
  priorityClassName: frontend-rpc-workload
  deployments:
    origin-visit-status:
      replicas: 1
      requestedCpu: 100m
      requestedMemory: 100Mi
      journalClientOverrides:
        auto_offset_reset: latest
        group_id: swh-archive-stg-webhooks
        object_types:
          - origin_visit_status

stagingRedis:
  cls: redis
  host: counters0.internal.staging.swh.network:6379

historyConfiguration:
  cls: prometheus
  prometheus_host: thanos.internal.admin.swh.network
  prometheus_port: 19191
  live_data_start: 1609462861
  interval: 12h
  labels:
    environment: staging

counters:
  enabled: true
  journalClient:
    enabled: true
    countersConfigurationRef: remoteCountersConfiguration
    journalConfigurationRef: journalClientCountersConfiguration
  refreshCountersCache:
    enabled: true
    cron: "0 */1 * * *"
    concurrencyPolicy: Forbid
    countersConfigurationRef: remoteCountersConfiguration
    historyFiles:
      - history.json
      - '""'
  rpc:
    enabled: true
    fetchStaticHistory: false
    cacheBaseDirectory: /srv/softwareheritage/counters
    countersConfigurationRef: stagingRedis
    historyConfigurationRef: historyConfiguration
    gunicorn:
      threads: 1
      workers: 1
      timeout: 10
    replicas: 1
    # autoScaling:
    #   minReplicaCount: 2
    #   maxReplicaCount: 4
    #   cpuPercentageUsage: 100
    hosts:
      - counters-rpc-ingress
      - counters.internal.staging.swh.network
    ingress:
      enabled: true
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: stagingNetworkRanges
      endpoints:
        default:
          paths:
            - path: /
          extraWhitelistSourceRange:
            # vpn network
            - 192.168.101.0/24
