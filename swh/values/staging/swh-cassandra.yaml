namespace: swh-cassandra

remoteStorageConfiguration:
  cls: remote
  url: http://storage:5002

localRpcRWStorageConfiguration:
  cls: remote
  url: http://storage:5002

rpcRWStorageConfiguration:
  pipelineStepsRef: storagePipelineSteps
  storageConfigurationRef: localRpcRWStorageConfiguration

# (Not so) readonly (namespace local) storage
localRpcROStorageConfiguration:
  storageConfigurationRef: localRpcRWStorageConfiguration

cassandraSeeds:
  - cassandra1.internal.staging.swh.network
  - cassandra2.internal.staging.swh.network
  - cassandra3.internal.staging.swh.network

cassandraStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  specificOptions:
    directory_entries_insert_algo: batch
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: swh-rw
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_PASSWORD:
      secretKeyRef: common-secrets
      secretKeyName: cassandra-swh-rw-password

cassandraReplayerStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  objectStorageConfigurationRef: noopObjectStorage

cassandraStorageConfiguration:
  storageConfigurationRef: cassandraStorage
  # TODO: add journal_writer
  # TODO: add objstorage configuration

azureCacheConfiguration:
  cls: azure
  account_name: swhvaultstoragestaging
  api_secret_key: ${API_SECRET_KEY}
  container_name: contents
  secrets:
    API_SECRET_KEY:
      secretKeyRef: swh-vault-azure-secret
      secretKeyName: azure-swh-vault-key

loaders:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  depositConfigurationRef: depositConfiguration
  deployments:
    add-forge-now:
      image: swh_loader_git_image
      queues:
        - add_forge_now:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 3
      requestedMemory: 1024Mi
      requestedCpu: 200m
    add-forge-now-slow:
      image: swh_loader_git_image
      queues:
        - add_forge_now_slow:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
      requestedMemory: 1024Mi
      requestedCpu: 200m
    archive:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.archive.tasks.LoadTarball
      autoScaling:
        maxReplicaCount: 1
    bioconductor:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.bioconductor.tasks.LoadBioconductor
      autoScaling:
        maxReplicaCount: 1
    bzr:
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.bzr.tasks.LoadBazaar
      autoScaling:
        maxReplicaCount: 1
    cran:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.cran.tasks.LoadCRAN
      autoScaling:
        maxReplicaCount: 1
    cvs:
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.cvs.tasks.LoadCvsRepository
      autoScaling:
        maxReplicaCount: 1
    content:
      requestedCpu: 350m
      requestedMemory: 150Mi
      queues:
        - swh.loader.core.tasks.LoadContent
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_package_image
    directory:
      requestedMemory: 768Mi
      requestedCpu: 1000m
      limitedMemory: 1024Mi
      limitedCpu: 1500m
      queues:
        - swh.loader.core.tasks.LoadTarballDirectory
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_package_image
    git:
      priorityClassName: low-workload
      queues:
        - swh.loader.git.tasks.UpdateGitRepository
        - swh.loader.git.tasks.LoadDiskGitRepository
        - swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
      autoScaling:
        maxReplicaCount: 2
        minReplicaCount: 1
        stopWhenNoActivity: false
      requestedMemory: 768Mi
      requestedCpu: 100m
    git-checkout:
      image: swh_loader_git_image
      queues:
        - swh.loader.git.tasks.LoadGitCheckout
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 256Mi
      requestedCpu: 500m
    hg-checkout:
      image: swh_loader_mercurial_image
      queues:
        - swh.loader.mercurial.tasks.LoadMercurialCheckout
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 768Mi
      requestedCpu: 500m
    svn-export:
      requestedMemory: 768Mi
      requestedCpu: 1000m
      limitedMemory: 1024Mi
      limitedCpu: 1500m
      queues:
        - swh.loader.svn.tasks.LoadSvnExport
      autoScaling:
        maxReplicaCount: 1
      image: swh_loader_svn_image
    debian:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.debian.tasks.LoadDebian
      autoScaling:
        maxReplicaCount: 1
    deposit:
      priorityClassName: frontend-rpc-workload
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.deposit.tasks.LoadDeposit
      autoScaling:
        queueThreshold: 1
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 1
      extraConfig:
        deposit:
          url: "https://deposit-rp.internal.staging.swh.network/1/private"
          auth:
            username: "${DEPOSIT_USERNAME}"
            password: "${DEPOSIT_PASSWORD}"
        default_filename: archive.tar
    golang:
      image: swh_loader_package_image
      requestedMemory: 256Mi
      requestedCpu: 200m
      queues:
        - swh.loader.package.golang.tasks.LoadGolang
      autoScaling:
        maxReplicaCount: 1
    save-code-now:
      queues:
        - save_code_now:swh.loader.bzr.tasks.LoadBazaar
        - save_code_now:swh.loader.cvs.tasks.LoadCvsRepository
        - save_code_now:swh.loader.git.tasks.UpdateGitRepository
        - save_code_now:swh.loader.git.tasks.LoadDiskGitRepository
        - save_code_now:swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
        - save_code_now:swh.loader.mercurial.tasks.LoadArchiveMercurial
        - save_code_now:swh.loader.mercurial.tasks.LoadMercurial
        - save_code_now:swh.loader.svn.tasks.LoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.MountAndLoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
        - save_code_now:swh.loader.package.archive.tasks.LoadTarball
      ackLate: true
      autoScaling:
        stopWhenNoActivity: false
        queueThreshold: 1
        minReplicaCount: 2
        maxReplicaCount: 2
      requestedMemory: 1024Mi
      requestedCpu: 100m
    maven:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.maven.tasks.LoadMaven
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 600Mi
      requestedCpu: 500m
    mercurial:
      queues:
        - swh.loader.mercurial.tasks.LoadArchiveMercurial
        - swh.loader.mercurial.tasks.LoadMercurial
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 124Mi
      requestedCpu: 500m
    npm:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.npm.tasks.LoadNpm
      autoScaling:
        maxReplicaCount: 1
    opam:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.opam.tasks.LoadOpam
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 1024Mi
      requestedCpu: 1000m
    pypi:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pypi.tasks.LoadPyPI
      autoScaling:
        maxReplicaCount: 1
    pubdev:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pubdev.tasks.LoadPubDev
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 256Mi
      requestedCpu: 800m
    rpm:
      image: swh_loader_package_image
      queues:
        - swh.loader.package.rpm.tasks.LoadRpm
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 3072Mi
      requestedCpu: 1000m
    svn:
      queues:
        - swh.loader.svn.tasks.LoadSvnRepository
        - swh.loader.svn.tasks.MountAndLoadSvnRepository
        - swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
      autoScaling:
        maxReplicaCount: 1
      requestedMemory: 6144Mi
      requestedCpu: 100m
      limitedMemory: 25600Mi

loader_metadata:
  enabled: true
  storageConfigurationRef: rpcRWStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  consumerGroup: loader_metadata.journal_client
  prefix: swh.journal.objects
  journalBrokers:
    secretName: swh-archive-broker-secret
    hosts:
      - journal1.internal.staging.swh.network:9094
    user: swh-archive-stg
  autoScaling:
    maxReplicaCount: 1
  requestedMemory: 200Mi
  requestedCpu: 500m

storage_replayer:
  enabled: true

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "swh/replayer"
            operator: In
            values:
            - "true"
  storageConfigurationRef: cassandraReplayerStorageConfiguration
  journalBrokers:
    hosts:
      - journal1.internal.staging.swh.network:9094
    user: swh-cassandra-stg
    groupIdName: cassandra
    secretName: swh-cassandra-broker-secret
  error_reporter:
    host: redis.redis
    port: 6379
    db: 1
  deployments:
    content:
      objects:
        - content
      privileged: true
      requestedCpu: 350m
      requestedMemory: 300Mi
      autoScaling:
        maxReplicaCount: 10
    directory:
      objects:
        - directory
      batchSize: 250
      privileged: true
      requestedCpu: 350m
      requestedMemory: 250Mi
      autoScaling:
        maxReplicaCount: 10
    extid:
      objects:
        - extid
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    metadata:
      objects:
        - metadata_authority
        - metadata_fetcher
      privileged: true
      # follow up consumption
      requestedCpu: 50m
      requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    raw-extrinsic-metadata:
      objects:
        - raw_extrinsic_metadata
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin:
      objects:
        - origin
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 200Mi
      #Follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    origin-visit:
      objects:
        - origin_visit
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 400Mi
      #Follow up consumption
      #requestedCpu: 100m
      #requestedMemory: 100Mi
      autoScaling:
        maxReplicaCount: 5
    origin-visit-status:
      objects:
        - origin_visit_status
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 500m
      requestedMemory: 300Mi
      #Follow up consumption
      #requestedCpu: 55m
      #requestedMemory: 200Mi
      autoScaling:
        maxReplicaCount: 5
    release:
      objects:
        - release
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 600m
      requestedMemory: 300Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    revision:
      objects:
        - revision
      batchSize: 1000
      privileged: true
      # Full replay
      requestedCpu: 750m
      requestedMemory: 750Mi
      # follow up consumption
      #requestedCpu: 50m
      #requestedMemory: 400Mi
      autoScaling:
        maxReplicaCount: 5
    skipped-content:
      objects:
        - skipped_content
      batchSize: 100
      privileged: true
      # Full replay
      requestedCpu: 300m
      requestedMemory: 400Mi
      # follow up consumption
      #requestedCpu: 50m
      autoScaling:
        maxReplicaCount: 5
    snapshot:
      objects:
        - snapshot
      batchSize: 250
      privileged: true
      # Full replay
      requestedCpu: 400m
      requestedMemory: 250Mi
      # follow up consumption
      #requestedCpu: 80m
      autoScaling:
        maxReplicaCount: 5

storage:
  enabled: true
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 10
    cpuPercentageUsage: 150
  requestedCpu: 500m
  requestedMemory: 1500Mi

  storageConfigurationRef: cassandraStorageConfiguration

  # TODO: migrate this to a proper template
  objstorageClass: remote
  objstorageConfig:
    url: http://storage1.internal.staging.swh.network:5003/
  hosts:
    - storage-cassandra.internal.staging.swh.network
  ingress:
    enabled: true
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  gunicorn:
    threads: 4
    workers: 8
  journalWriter:
   brokers:
     - journal1.internal.staging.swh.network
     - journal2.internal.staging.swh.network
   clientId: swh.storage-cassandra.journal_writer.storage
   producerConfig: |-
     message.max.bytes: 1000000000

web:
  enabled: true
  logLevel: INFO
  requestedCpu: 500m
  requestedMemory: 500Mi
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 3
    cpuPercentageUsage: 50
  hosts:
    - webapp-cassandra.internal.staging.swh.network
  ingress:
    enabled: true
    secretName: swh-web-crt
    extraAnnotations:
      cert-manager.io/cluster-issuer: letsencrypt-production-gandi
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tlsEnabled: true
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
      authenticated:
        paths:
          - path: /api/1/provenance/
          - path: /api/1/entity/
          - path: /api/1/content/[^/]+/symbol/
        # auth-file with authentication
        authentication: swh-cassandra/web-auth-secrets
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  databaseConfigurationRef: postgresqlWebConfiguration
  searchConfigurationRef: remoteSearchConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  storageConfigurationRef: remoteStorageConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
  countersConfigurationRef: remoteCountersConfiguration
  djangoConfigurationRef: djangoWebConfiguration
  giveConfigurationRef: giveConfiguration
  throttlingConfigurationRef: webThrottling
  extraConfig:
    keycloak:
      server_url: https://auth.softwareheritage.org/auth/
      realm_name: SoftwareHeritageStaging
    search_config:
      metadata_backend: swh-search
    content_display_max_size: 5242880
    history_counters_url: http://counters0.internal.staging.swh.network:5011/counters_history/history.json
    add_forge_now:
      email_address: add-forge-now@webapp.staging.swh.network
    swh_extra_django_apps:
    - swh.web.add_forge_now
    - swh.web.archive_coverage
    - swh.web.badges
    - swh.web.banners
    - swh.web.deposit
    - swh.web.inbound_email
    - swh.web.jslicenses
    - swh.web.mailmap
    - swh.web.metrics
    - swh.web.save_code_now
    - swh.web.save_origin_webhooks
    - swh.web.vault
    matomo: {}
    give:
      public_key: ${GIVE_PUBLIC_KEY}
      token: ${GIVE_PRIVATE_TOKEN}

graphql:
  enabled: true
  logLevel: DEBUG
  debug: yes
  sentry:
    enabled: true
  storageConfigurationRef: localRpcROStorageConfiguration
  searchConfigurationRef: remoteSearchConfiguration
  replicas: 2
  gunicorn:
    threads: 4
    workers: 2
    timeout: 3600
  hosts:
    - webapp-cassandra.internal.staging.swh.network
  ingress:
    enabled: true
    whitelistSourceRangeRef: stagingNetworkRanges
    endpoints:
      default:
        paths:
          - path: /graphql/
        extraWhitelistSourceRange:
          # vpn network
          - 192.168.101.0/24
  auth:
    # temporary disable the authentication to avoid a redirect error from keycloak
    enabled: false
    server: https://auth.softwareheritage.org/auth/
    realm: SoftwareHeritageStaging
    client: swh-web
    cacheUrl: memcached://memcached:11211
  maxRawContentSize: 10000

vault:
  enabled: true
  priorityClassName: frontend-rpc
  sentry:
    enabled: false
    secretKeyRef: common-secrets
    secretKeyName: sentry-dsn
  logLevel: INFO
  schedulerConfigurationRef: remoteSchedulerConfiguration
  vaultConfigurationRef: postgresqlVaultConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  objstorageConfigurationRef: remoteROObjstorageConfiguration
  cacheConfigurationRef: azureCacheConfiguration

  # replicas: 2
  gunicorn:
    threads: 5
    workers: 4
    timeout: 3600
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  autoScaling:
    minReplicaCount: 2
    maxReplicaCount: 4
    cpuPercentageUsage: 75
  ingress:
    enabled: true
    # Optional: the ingress classname to use
    # className: nginx
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    # Default allowed ip ranges that can be extended per ingress definitions paths
    whitelistSourceRangeRef: clusterNetworkRanges
    endpoints:
      default:
        paths:
          - path: /

cookers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  celeryConfigurationRef: consumerCeleryConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  deployments:
    simple:
      queues:
        - swh.vault.cooking_tasks.SWHCookingTask
      autoScaling:
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 2
    batch:
      queues:
        - swh.vault.cooking_tasks.SWHBatchCookingTask
      autoScaling:
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 2
