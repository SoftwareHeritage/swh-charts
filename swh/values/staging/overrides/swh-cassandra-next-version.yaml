namespace: swh-cassandra-next-version

postgresqlWebConfiguration:
  host: next-version-dbs-rw.swh-cassandra-next-version
  port: 5432
  db: swh-web
  user: swh-web
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-web-secrets
      secretKeyName: postgres-swh-web-password

postgresqlVaultConfiguration:
  host: next-version-dbs-rw.swh-cassandra-next-version
  port: 5432
  db: swh-vault
  user: swh-vault
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-vault-postgresql-secret
      secretKeyName: postgres-swh-vault-password

postgresqlSchedulerConfiguration:
  host: next-version-dbs-rw.swh-cassandra-next-version
  port: 5432
  db: swh-scheduler
  user: swh-scheduler
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scheduler-postgresql-common-secret
      secretKeyName: postgres-swh-scheduler-password

celeryConfiguration:
  host: rabbitmq-scheduler
  port: 5672
  user: ${AMQP_USERNAME}
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_USERNAME:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: username
    AMQP_PASSWORD:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: password

postgresqlRWStorageConfiguration:
  cls: postgresql
  host: next-version-swh-rw
  port: '5432'
  db: swh
  user: ${POSTGRESQL_USERNAME}
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_USERNAME:
      secretKeyRef: swh-postgresql-swh-swh-secret
      secretKeyName: username
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-postgresql-swh-swh-secret
      secretKeyName: password

rwStoragePostgresqlConfiguration:
  storageConfigurationRef: postgresqlRWStorageConfiguration
  objstorageConfigurationRef: noopObjstorageConfiguration

rpcRWStorageConfiguration:
  pipelineStepsRef: storagePipelineSteps
  storageConfigurationRef: remoteStorageConfiguration

retryStoragePipelineSteps:
  - cls: retry

remoteROStorageConfiguration:
  pipelineStepsRef: retryStoragePipelineSteps
  storageConfigurationRef: remoteStorageConfiguration

remoteStorageConfiguration:
  cls: remote
  url: http://storage-rw-postgresql:5002

remoteVaultConfiguration:
  cls: remote
  url: http://vault-rpc-ingress-next-version

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler-rpc:5008

vault:
  replicas: 1
  vaultConfigurationRef: postgresqlVaultConfiguration
  autoScaling:
    minReplicaCount: 1
    maxReplicaCount: 1
  backend:
    # check db version with latest code?
    check: true
    # migrate db?
    migrate: false
  hosts:
    - vault-rpc-ingress-next-version

remoteCountersConfiguration:
  cls: remote
  url: http://counters-rpc-ingress-next-version

externalServices:
  enabled: true
  services:
    vault:
      internalName: vault-rpc-ingress-next-version
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local
    counters:
      internalName: counters-rpc-ingress-next-version
      target: archive-staging-rke2-ingress-nginx-controller.ingress-nginx.svc.cluster.local

counters:
  rpc:
    replicas: 1
    autoScaling:
      minReplicaCount: 1
      maxReplicaCount: 1
    hosts:
      - counters-rpc-ingress-next-version

loaders:
  terminationGracePeriodSeconds: 60
  storageConfigurationRef: rpcRWStorageConfiguration
  celeryConfigurationRef: celeryConfiguration
  deployments:
    # Force the deployment of one pod of each type to at least
    # ensure they start (not enough but it's a first step)
    add-forge-now:
      enabled: false
    add-forge-now-slow:
      enabled: false
    archive:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    bzr:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    cran:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    cvs:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    content:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    directory:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    git:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    git-checkout:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    hg-checkout:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    svn-export:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    debian:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    deposit:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    golang:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    save-code-now:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    maven:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    mercurial:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    npm:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    opam:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    pypi:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    pubdev:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false
    svn:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        stopWhenNoActivity: false

loaderMetadata:
  terminationGracePeriodSeconds: 60
  autoScaling:
    queueThreshold: 1
    maxReplicaCount: 1
    # TODO: Support this option
    # stopWhenNoActivity: false

storageReplayer:
  enabled: false
  # Force the deployment of one pod of each type to at least
  # ensure they start (not enough but it's a first step)
  deployments:
    content:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    directory:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    extid:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    metadata:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    raw-extrinsic-metadata:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    origin:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    origin-visit:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    origin-visit-status:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    release:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    revision:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    skipped-content:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false
    snapshot:
      autoScaling:
        queueThreshold: 1
        maxReplicaCount: 1
        # TODO: Support this option
        # stopWhenNoActivity: false

cassandraSeeds:
  - cassandra-cluster-next-version-service

cassandraStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  specificOptions:
    directory_entries_insert_algo: batch
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: ${CASSANDRA_USERNAME}
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_USERNAME:
      secretKeyRef: cassandra-cluster-superuser
      secretKeyName: username
    CASSANDRA_PASSWORD:
      secretKeyRef: cassandra-cluster-superuser
      secretKeyName: password

noopObjstorageConfiguration:
  cls: noop

rwStorageCassandraNoJournalConfiguration:
  storageConfigurationRef: cassandraStorage
  objstorageConfigurationRef: noopObjstorageConfiguration

# rwStorageCassandraWithJournalConfiguration:
#   storageConfigurationRef: cassandraStorage
#   journalWriterConfigurationRef: storageJournalWriterConfiguration
#   objstorageConfigurationRef: noopObjstorageConfiguration

storage:
  deployments:
    # Deactivate those instance in swh-cassandra-next-version namespace
    cassandra:  # Instance name from the swh-cassandra.yaml file
      enabled: false
    # Deactivate those instance in swh-cassandra-next-version namespace
    cassandra-read-only:  # Instance name from the swh-cassandra.yaml file
      enabled: false
    rw-cassandra:
      # No journal just yet
      storageConfigurationRef: rwStorageCassandraNoJournalConfiguration

    # To the benefit of a storage postgresql instance
    rw-postgresql:
      enabled: true
      storageConfigurationRef: rwStoragePostgresqlConfiguration
      backend:
        initialize:
          adminSecret: next-version-swh-superuser
          database: swh
        check: false
        migrate: false

web:
  deployments:
    cassandra:
      metricsScrapingEnabled: false
      migrations:
        enabled: false
      replicas: 1
      autoScaling:
        minReplicaCount: 1
        maxReplicaCount: 1
      extraConfig:
        history_counters_url: http://counters-rpc-ingress-next-version/counters_history/history.json#
      hosts:
        - webapp-cassandra-next-version.internal.staging.swh.network
      refreshSavecodenowStatus:
        enabled: false
      syncMailmaps:
        enabled: false
      ingress:
        whitelistSourceRangeRef: stagingNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
              - path: /static
                port: 80
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24
          authenticated:
            paths:
              - path: /api/1/provenance/
              - path: /api/1/entity/
              - path: /api/1/content/[^/]+/symbol/
            # auth-file with authentication
            authentication: swh-cassandra/web-auth-secrets
            extraWhitelistSourceRange:
              # vpn network
              - 192.168.101.0/24

deposit:
  enabled: false
  migrations:
    enabled: false

graphql:
  deployments:
    cassandra:
      replicas: 1
      hosts:
        - webapp-cassandra-next-version.internal.staging.swh.network

podPriority:
  # This test environment should not impact the real staging environment
  # so we need to use lower priorities than the 'normal' versions
  priorities:
    storages:
      value: -100000
    frontend-rpc:
      value: -10100
    frontend-rpc-workload:
      value: -10200
    high-workload:
      value: -10300
    local-workload:
      value: -10400
    normal-workload:
      value: -10500
    tools:
      value: -10600
    low-workload:
      value: -10700
    background-storage:
      value: -10800
    background-workload:
      value: -10900

scheduler:
  enabled: true
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  sentry:
    enabled: false
  alerts:
    enabled: false
  rpc:
    enabled: true
    backend:
      # check db version with latest code?
      check: true
      # migrate db?
      migrate: false
      # register task types?
      register: true
    ingress:
      enabled: false
  updateMetrics:
    enabled: false
  journalClient:
    enabled: false
  extraServices:
    runner:
      enabled: true
    runner-priority:
      enabled: true
    listener:
      enabled: true
      replicas: 1

scrubber:
  enabled: false

toolbox:
  enabled: true
  bulkLoad: null

objstorage:
  enabled: false

webhooks:
  enabled: false

listers:
  enabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  deployments:
    nixguix:
      queues:
      - swh.lister.nixguix.tasks.NixGuixListerTask
      autoScaling:
        queueThreshold: 1
        stopWhenNoActivity: false
        minReplicaCount: 1
        maxReplicaCount: 1
      extraConfig:
        # extra extensions to ignore
        extensions_to_ignore:
          - rock

indexers:
  enabled: false

checkerDeposit:
  enabled: false

search:
  enabled: false

indexerStorage:
  enabled: false

cassandraChecks:
  enabled: false

alter:
  enabled: false
