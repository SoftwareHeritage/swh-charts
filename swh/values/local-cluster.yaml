environment: local-cluster
sentry:
  enabled: false
  environment: local-cluster

statsd_exporter:
  enabled: false

remoteSchedulerConfiguration:
  cls: remote
  url: http://scheduler-rpc:5008

remoteSearchConfiguration:
  cls: remote
  url: http://search-rpc:5010

remoteVaultConfiguration:
  cls: remote
  url: http://vault-rpc:5005

remoteCountersConfiguration:
  cls: remote
  url: http://counters-rpc:5011

remoteIndexerStorageConfiguration:
  cls: remote
  url: http://indexer-storage-read-write:5007

rpcRWObjstorageConfiguration:
  cls: remote
  url: http://objstorage-read-write:5003

remoteStorageMetadataConfiguration:
  cls: remote
  url: http://storage-rw-archive-cassandra:5002

fakeKeycloakConfiguration:
  server_url: https://auth.s.o/auth/
  realm_name: SwhLocalCluster

postgresqlRWStorageConfiguration:
  cls: postgresql
  host: archive-rw
  port: 5432
  db: swh
  user: ${POSTGRESQL_USERNAME}
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_USERNAME:
      secretKeyRef: swh-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-swh-postgresql-secret
      secretKeyName: password

postgresqlDepositConfiguration:
  host: deposit-rw
  port: 5432
  db: swh-deposit
  user: ${POSTGRESQL_DEPOSIT_USERNAME}
  pass: ${POSTGRESQL_DEPOSIT_PASSWORD}
  secrets:
    POSTGRESQL_DEPOSIT_USERNAME:
      secretKeyRef: swh-deposit-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_DEPOSIT_PASSWORD:
      secretKeyRef: swh-deposit-swh-postgresql-secret
      secretKeyName: password

fakeSyncmailmapsConfiguration:
  host: db1.i.s.s.n
  port: 5432
  db: swh
  user: swhmailmap
  pass: ${POSTGRESQL_MAILMAP_PASSWORD}
  secrets:
    POSTGRESQL_MAILMAP_PASSWORD:
      secretKeyRef: swhmailmap-postgresql-secret
      secretKeyName: postgres-swhmailmap-password

postgresqlIndexerStorageConfiguration:
  cls: postgresql
  host: indexer-storage-rw
  port: 5432
  db: swh-indexer
  user: ${POSTGRESQL_IDX_USERNAME}
  pass: ${POSTGRESQL_IDX_PASSWORD}
  secrets:
    POSTGRESQL_IDX_USERNAME:
      secretKeyRef: swh-indexer-storage-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_IDX_PASSWORD:
      secretKeyRef: swh-indexer-storage-swh-postgresql-secret
      secretKeyName: password

postgresqlSchedulerConfiguration:
  cls: postgresql
  host: scheduler-rw
  port: 5432
  db: swh-scheduler
  user: ${POSTGRESQL_USERNAME}
  pass: ${POSTGRESQL_PASSWORD}
  secrets:
    POSTGRESQL_USERNAME:
      secretKeyRef: swh-scheduler-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_PASSWORD:
      secretKeyRef: swh-scheduler-swh-postgresql-secret
      secretKeyName: password

postgresqlScrubberConfiguration:
  cls: postgresql
  host: scrubber-rw
  port: 5432
  db: swh-scrubber
  user: ${POSTGRESQL_SCRUBBER_USERNAME}
  pass: ${POSTGRESQL_SCRUBBER_PASSWORD}
  secrets:
    POSTGRESQL_SCRUBBER_USERNAME:
      secretKeyRef: swh-scrubber-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_SCRUBBER_PASSWORD:
      secretKeyRef: swh-scrubber-swh-postgresql-secret
      secretKeyName: password

postgresqlWebConfiguration:
  host: web-rw
  port: 5432
  db: swh-web
  user: ${POSTGRESQL_WEB_USERNAME}
  pass: ${POSTGRESQL_WEB_PASSWORD}
  secrets:
    POSTGRESQL_WEB_USERNAME:
      secretKeyRef: swh-web-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_WEB_PASSWORD:
      secretKeyRef: swh-web-swh-postgresql-secret
      secretKeyName: password

postgresqlVaultConfiguration:
  cls: postgresql
  host: vault-rw
  port: '5432'
  db: swh-vault
  user: ${POSTGRESQL_VAULT_USERNAME}
  pass: ${POSTGRESQL_VAULT_PASSWORD}
  secrets:
    POSTGRESQL_VAULT_USERNAME:
      secretKeyRef: swh-vault-swh-postgresql-secret
      secretKeyName: username
    POSTGRESQL_VAULT_PASSWORD:
      secretKeyRef: swh-vault-swh-postgresql-secret
      secretKeyName: password

readOnlyStoragePipelineSteps:
  - cls: retry

remoteRWStorageConfiguration:
  cls: remote
  url: http://storage-rw-archive-cassandra:5002

remoteROStorageConfiguration:
  cls: remote
  url: http://storage-ro-archive-postgresql:5002

djangoWebConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: webapp-django-secrets
      secretKeyName: webapp-django-secret-key

djangoDepositConfiguration:
  secrets:
    DJANGO_SECRET_KEY:
      secretKeyRef: deposit-django-secrets
      secretKeyName: deposit-django-secret-key

rpcROStorageConfiguration:
  storageConfigurationRef: remoteROStorageConfiguration

rpcRWStorageConfiguration:
  storageConfigurationRef: remoteRWStorageConfiguration

postgresqlStorageConfigurationPipeline:
  storageConfigurationRef: postgresqlRWStorageConfiguration

readWriteInternalKafkaBrokers:
  - kafka-cluster-kafka-brokers:9092

readOnlyInternalKafkaBrokers:
  - kafka-cluster-kafka-brokers:9092

schedulerJournalClientConfiguration:
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-scheduler-journal-client

scrubberJournalCheckerClientConfiguration:
  cls: kafka
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-scrubber-journal-checker
  prefix: swh.journal.objects

webhookJournalClientConfiguration:
  brokersConfigurationRef: readWriteInternalKafkaBrokers
  group_id: swh-webhooks

searchJournalClientConfiguration:
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-search
  prefix: swh.journal.objects

depositApiConfiguration:
  host: deposit-rpc
  user: ${DEPOSIT_API_USERNAME}
  pass: ${DEPOSIT_API_PASSWORD}
  secrets:
    DEPOSIT_API_USERNAME:
      secretKeyRef: deposit-secrets
      secretKeyName: username
    DEPOSIT_API_PASSWORD:
      secretKeyRef: deposit-secrets
      secretKeyName: password

storageJournalWriterConfiguration:
  brokersConfigurationRef: readWriteInternalKafkaBrokers
  prefix: swh.journal.objects
  clientId: swh-storage-journal-writer
  producerConfig:
    message.max.bytes: 1000000000

# rwStoragePostgresqlWithJournalConfiguration:
#   storageConfigurationRef: postgresqlRWStorageConfiguration
#   journalWriterConfigurationRef: storageJournalWriterConfiguration


cassandraSeeds:
  - cassandra-cluster-dc1-service

cassandraStorage:
  cls: cassandra
  cassandraSeedsRef: cassandraSeeds
  keyspace: swh
  initKeyspace: true
  consistencyLevel: LOCAL_QUORUM
  specificOptions:
    directory_entries_insert_algo: batch
  authProvider:
    cls: cassandra.auth.PlainTextAuthProvider
    username: ${CASSANDRA_USERNAME}
    password: ${CASSANDRA_PASSWORD}
  secrets:
    CASSANDRA_USERNAME:
      secretKeyRef: cassandra-cluster-superuser
      secretKeyName: username
    CASSANDRA_PASSWORD:
      secretKeyRef: cassandra-cluster-superuser
      secretKeyName: password

rwStorageCassandraWithJournalConfiguration:
  storageConfigurationRef: cassandraStorage
  journalWriterConfigurationRef: storageJournalWriterConfiguration
  objstorageConfigurationRef: rpcRWObjstorageConfiguration

roStoragePostgresqlConfiguration:
  storageConfigurationRef: postgresqlRWStorageConfiguration
  objstorageConfigurationRef: rpcRWObjstorageConfiguration

storage:
  enabled: false
  deployments:
    rw-archive-cassandra:
      storageConfigurationRef: rwStorageCassandraWithJournalConfiguration
    ro-archive-postgresql:
      storageConfigurationRef: roStoragePostgresqlConfiguration
      backend:
        initialize:
          adminSecret: archive-superuser
          database: swh
        check: true
        migrate: true
      cronjobs:
        foobar-action:
          enabled: false
          logLevel: INFO
          cron: "0 0 1 * *"

storageReplayerJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-journal-checker
  prefix: swh.journal.objects
  message.max.bytes: "524288000"
  privileged: false

storageReplayer:
  enabled: false
  sentry:
    enabled: false
  journalClientConfigurationRef: storageReplayerJournalClientConfiguration
  storageConfigurationRef: postgresqlStorageConfigurationPipeline
  checkDbVersion: false
  deployments:
    origin:
      replicas: 1
      journalClientOverrides:
        group_id: postgresql-replayer-origin
        object_types:
          - origin
          - origin_visit
          - origin_visit_status
        batch_size: 1000
    # content:
    #   replicas: 1
    #   journalClientOverrides:
    #     group_id: postgresql-replayer-content
    #     object_types:
    #     - content
    #     batch_size: 250
    # directory:
    #   replicas: 1
    #   journalClientOverrides:
    #     group_id: postgresql-replayer-directory
    #     object_types:
    #       - directory
    #     batch_size: 250
    # revision:
    #   replicas: 1
    #   group_id: postgresql-replayer-revision
    #   journalClientOverrides:
    #     object_types:
    #       - revision
    #     batch_size: 250
    #     privileged: true
    # release:
    #   replicas: 1
    #   journalClientOverrides:
    #     group_id: postgresql-replayer-release
    #     object_types:
    #       - release
    #     batch_size: 250
    #     privileged: true

internalNetworkRanges:
  - 127.0.0.0/8
  - 192.168.100.0/24

externalAuthorizedNetworkRanges:
  # Not really external, but to exercise this part
  - 10.100.100.0/24

webThrottling:
  # Those are authorized networks to exemple for each scope
  internalExemptedNetworkRangesRef: internalNetworkRanges
  externalExemptedNetworkRangesRef: externalAuthorizedNetworkRanges
  # The memcached url, mandatory
  cache_uri: fake-memcached:11211
  scopes_with_exempted_networks:
    swh_api:
      limiter_rate:
        default: 120/h
      exempted_networks:
        # Extra specific network ranges to append to the other network
        - 192.168.102.0/24
  scopes:
    swh_api_origin_search:
      limiter_rate:
        default: 120/h

web:
  enabled: false
  deployments:
    local-archive:
      enabled: true
      migrations:
        enabled: true
      metricsScrapingEnabled: false
      replicas: 1
      # autoScaling:
      #   minReplicaCount: 1
      #   maxReplicaCount: 1
      #   cpuPercentageUsage: 50
      hosts:
        - web-local-archive
      storageConfigurationRef: remoteROStorageConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      schedulerConfigurationRef: remoteSchedulerConfiguration
      vaultConfigurationRef: remoteVaultConfiguration
      countersConfigurationRef: remoteCountersConfiguration
      databaseConfigurationRef: postgresqlWebConfiguration
      djangoConfigurationRef: djangoWebConfiguration
      depositConfigurationRef: depositApiConfiguration
      giveConfigurationRef: giveConfiguration
      webhooksConfigurationRef: webhooksConfiguration
      # throttlingConfigurationRef: webThrottling
      # keycloakConfigurationRef: fakeKeycloakConfiguration
      ingress:
        enabled: true
        className: nginx
        # tlsEnabled: true
        # extraAnnotations:
        #   nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
        #   nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
        #   nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        #   nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
        #   nginx.ingress.kubernetes.io/proxy-body-size: "4G"
        # whitelistSourceRangeRef: internalNetworkRanges
        endpoints:
          default:
            paths:
              - path: /
              - path: /static
                port: 80
        #   authenticated:
        #     paths:
        #       - path: /api/1/provenance/
        #       - path: /api/1/entity/
        #       - path: /api/1/content/[^/]+/symbol/
        #     # auth-file with authentication
        #     authentication: basic-auth
      # (either this cron of the webhookConfigurationRef entry key)
      # refreshSavecodenowStatus:
      #   enabled: false
      #   cron: "* 5 * * *"
      syncMailmaps:
        enabled: false
        cron: "30 * * * *"
        configurationRef: fakeSyncmailmapsConfiguration
      sentry:
        enabled: false
      extraConfig:
        debug: false
        search_config:
          metadata_backend: swh-indexer-storage
        content_display_max_size: 5242880
        save_code_now_webhook_secret: ${WEBHOOKS_SECRET}
        history_counters_url: http://counters-rpc:5011/counters_history/history.json
        add_forge_now:
          email_address: add-forge-now@webapp.s.s.n
        swh_extra_django_apps:
        - swh.web.add_forge_now
        - swh.web.archive_coverage
        - swh.web.badges
        - swh.web.banners
        - swh.web.deposit
        - swh.web.inbound_email
        - swh.web.jslicenses
        - swh.web.mailmap
        - swh.web.metrics
        - swh.web.save_code_now
        - swh.web.save_origin_webhooks
        - swh.web.vault
        matomo: {}
        deposit:
          private_api_url: "http://deposit-rpc/1/private/"
          private_api_user: "${DEPOSIT_API_USERNAME}"
          private_api_password: "${DEPOSIT_API_PASSWORD}"
        give:
          public_key: ${GIVE_PUBLIC_KEY}
          token: ${GIVE_PRIVATE_TOKEN}

svixConfiguration:
  svix:
    server_url: http://svix.cluster-components:8071
    auth_token: ${SVIX_AUTH_TOKEN}
  event_retention_period: 7
  secrets:
    SVIX_AUTH_TOKEN:
      secretKeyRef: svix-server-secrets
      secretKeyName: svix-token

webhooksConfiguration:
  # For the webapp and toolbox (webhooks) configuration
  secrets:
    WEBHOOKS_SECRET:
      secretKeyRef: svix-server-secrets
      secretKeyName: webhooks-secret

webhookRegisterEndpointConfiguration:
  # specifically for the register event type endpoint in webhooks
  url: https://web-local-archive/save/origin/visit/webhook/
  webhookSecret:
    key: svix-server-secrets
    name: webhook-secret

dnsConfiguration:
  ndots: 1
  overrideSearch: true

webhooks:
  enabled: false
  svixConfigurationRef: svixConfiguration
  journalClientConfigurationRef: webhookJournalClientConfiguration
  priorityClassName: frontend-rpc-workload
  replicas: 1

  deployments:
    origin-visit-status:
      dnsConfigurationRef: dnsConfiguration
      requestedCpu: 100m
      requestedMemory: 100Mi
      backend:
        registerEventTypes: true
        registerEndpoints:
          url: https://web-local-archive/save/origin/visit/webhook/
          webhookToken:
            name: svix-server-secrets
            key: webhooks-secret
      journalClientOverrides:
        auto_offset_reset: latest
        group_id: swh-webhooks
        object_types:
          - origin_visit_status

fakeAzureDepositConfiguration:
  connection_string: "DefaultEndpointsProtocol=https;AccountName=swhdepositstoragestaging;AccountKey=${ACCOUNT_KEY};EndpointSuffix=core.windows.net"
  container_name: "deposit-contents"
  secrets:
    ACCOUNT_KEY:
      secretKeyRef: swh-deposit-azure-secret
      secretKeyName: azure-swh-deposit-key

deposit:
  enabled: false
  # autoScaling:
  #   minReplicaCount: 1
  #   maxReplicaCount: 2
  #   cpuPercentageUsage: 50
  replicas: 1
  requestedMemory: 50Mi
  requestedCpu: 50m
  migrationsEnabled: true
  storageConfigurationRef: remoteROStorageConfiguration
  storageMetadataConfigurationRef: remoteStorageMetadataConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  databaseConfigurationRef: postgresqlDepositConfiguration
  djangoConfigurationRef: djangoDepositConfiguration
  keycloakConfigurationRef: fakeKeycloakConfiguration
  blobstorageConfigurationRef: fakeAzureDepositConfiguration
  hosts:
    - localhost
  ingress:
    enabled: false
    tlsEnabled: true
    extraAnnotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "90"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "4G"
    whitelistSourceRangeRef: internalNetworkRanges
    endpoints:
      default:
        paths:
          - path: /
          - path: /static
            port: 80
      authenticated:
        paths:
          - path: /1/private/
        # auth-file with authentication
        authentication: swh/deposit-auth-secrets
  sentry:
    enabled: false
    secretKeyRef: sentry-secrets
    secretKeyName: deposit-sentry-dsn
  extraConfig:
    max_upload_size: 209715200
    extraction_dir: "/tmp/swh-deposit/archive/"
    cache_uri: memcached:11211

celeryConfiguration:
  host: rabbitmq-scheduler.cluster-components
  port: 5672
  user: ${AMQP_USERNAME}
  pass: ${AMQP_PASSWORD}
  secrets:
    AMQP_USERNAME:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: username
    AMQP_PASSWORD:
      secretKeyRef: rabbitmq-scheduler-secret
      secretKeyName: password

toolbox:
  enabled: true
  configs:
    storage:
      storageDbConfigurationRef: postgresqlRWStorageConfiguration
    scheduler:
      schedulerDbConfigurationRef: postgresqlSchedulerConfiguration
      celeryConfigurationRef: celeryConfiguration
    scrubber-storage:
      moduleName: scrubber
      scrubberDbConfigurationRef: postgresqlScrubberConfiguration
      storageDbConfigurationRef: postgresqlRWStorageConfiguration
    vault:
      vaultDbConfigurationRef: postgresqlVaultConfiguration
    indexer-storage:
      moduleName: indexer
      moduleConfigKey: indexer_storage
      indexerDbConfigurationRef: postgresqlIndexerStorageConfiguration
    webhooks:
      webhooksConfigurationRef: svixConfiguration
  bulkLoad:
    # The name of the scheduler configuration entry in the toolbox configs
    schedulerConfigurationRef: scheduler
    # priorityClass
    # swhUtilsImageVersion
    # swhToolboxImageVersion
    jobs:
      # myforge:
      #   originListUrl: https://gitlab.softwareheritage.org/....
      #   taskType: load-git
      #   maxTasks: 10
      #   queuePrefix: oneshot

scheduler:
  enabled: false
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  alerts:
    enabled: false
  recurrent:
    enabled: true
    schedulerPolicies:
      default:
      - policy: never_visited_oldest_update_first
        weight: 100
      opam:
      - policy: origins_without_last_update
        weight: 100
  rpc:
    enabled: true
    schedulerConfigurationRef: postgresqlSchedulerConfiguration
    replicas: 1
    gunicorn:
      threads: 1
      workers: 1
      timeout: 10
    backend:
      # initialize db if empty?
      initialize:
        adminSecret: scheduler-superuser
        database: swh-scheduler
      # check db version with latest code?
      check: true
      # migrate db?
      migrate: true
      # register task types?
      register: true

    # autoScaling:
    #   minReplicaCount: 4
    #   maxReplicaCount: 20
    #   cpuPercentageUsage: 150
    # hosts:
    #   - myscheduler.domain
    ingress:
      enabled: false
      # Default allowed ip ranges that can be extended per ingress definitions paths
      whitelistSourceRangeRef: internalNetworkRanges
      endpoints:
        default:
          paths:
            - /
        read-only:
          paths:
            - /scheduler_metrics/get
            # - /task_type/get
            # - /task_type/get_all
            # - /task_run/get
            # - /listers/get
            # - /listers/get_by_id
            # - /lister/get
            # - /origins/get
            - /visit_stats/get
            # - /visit_scheduler/get
          extraWhitelistSourceRange:
            - 192.168.101.0/24

  updateMetrics:
    enabled: false
    logLevel: INFO
    # Execute at each minute
    cron: "0/10 * * * *"
  journalClient:
    enabled: true
    journalConfigurationRef: schedulerJournalClientConfiguration
  extraServices:
    runner:
      enabled: true
      logLevel: INFO
      period: 100
    runner-priority:
      enabled: true
      logLevel: INFO
      period: 100
      extraConfig:
        - load-git
    listener:
      enabled: true
      logLevel: INFO

loaderMetadata:
  enabled: false
  storageConfigurationRef: rpcRWStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  consumerGroup: swh-loader-metadata-journal-client
  prefix: swh.journal.objects
  replicas: 1
  journalBrokers:
    hosts:
      - kafka-cluster-kafka-brokers:9092

checkerDeposit:
  enabled: false
  storageConfigurationRef: rpcROStorageConfiguration
  celeryConfigurationRef: celeryConfiguration
  depositConfigurationRef: depositApiConfiguration

cookers:
  enabled: false
  sentry:
    enabled: false
  storageConfigurationRef: rpcROStorageConfiguration
  celeryConfigurationRef: celeryConfiguration
  vaultConfigurationRef: remoteVaultConfiguration
  deployments:
    simple:
      queues:
        - swh.vault.cooking_tasks.SWHCookingTask

indexerJournalClientConfiguration:
  cls: kafka
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-indexer-journal-client
  prefix: swh.journal.indexed

indexers:
  enabled: false
  sentry:
    enabled: false
  storageConfigurationRef: rpcROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  indexerStorageConfigurationRef: remoteIndexerStorageConfiguration
  objstorageConfigurationRef: rpcRWObjstorageConfiguration
  journalClientConfigurationRef: indexerJournalClientConfiguration
  deployments:
    origin-intrinsic:
      indexer_type: origin_intrinsic_metadata
      journalClientOverrides:
        batch_size: 10
        group_id: swh-indexer-journal-client-origin-intrinsic-metadata
        prefix: swh.journal.objects
      extraConfig:
        tools:
          name: swh-metadata-detector
          version: 0.0.2
          configuration: {}
      replicas: 1
    # extrinsic:
    #   indexer_type: extrinsic_metadata
    #   journalClientOverrides:
    #     group_id: swh-indexer-journal-client-extrinsic-metadata
    #     prefix: swh.journal.objects
    #     batch_size: 200
    #   extraConfig:
    #     tools:
    #       name: swh-metadata-detector
    #       version: 0.0.2
    #       configuration: {}
    #   replicas: 1

graphql:
  enabled: false
  deployments:
    archive:
      storageConfigurationRef: rpcROStorageConfiguration
      searchConfigurationRef: remoteSearchConfiguration
      debug: no
      introspection: no
      replicas: 1
      gunicorn:
        threads: 1
        workers: 2
        timeout: 100
      hosts:
        - web-local-archive
      ingress:
        enabled: true
        extraAnnotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        endpoints:
          default:
            paths:
              - path: /graphql/
      auth:
        enabled: false
      maxRawContentSize: 10000

listers:
  enabled: false
  storageConfigurationRef: rpcROStorageConfiguration
  schedulerConfigurationRef: remoteSchedulerConfiguration
  celeryConfigurationRef: celeryConfiguration
  deployments:
    pypi:
      queues:
      - swh.lister.pypi.tasks.PyPIListerTask
      replicas: 1
    cgit:
      queues:
      - swh.lister.cgit.tasks.CGitListerTask
      requestedMemory: 50Mi
      requestedCpu: 50m
      replicas: 1
    gitlab:
      queues:
      - swh.lister.gitlab.tasks.IncrementalGitLabLister
      - swh.lister.gitlab.tasks.RangeGitLabLister
      - swh.lister.gitlab.tasks.FullGitLabRelister
      replicas: 1

loaders:
  enabled: false
  storageConfigurationRef: rpcRWStorageConfiguration
  celeryConfigurationRef: celeryConfiguration
  depositConfigurationRef: depositApiConfiguration
  deployments:
    git:
      priorityClassName: low-workload
      queues:
        - swh.loader.git.tasks.UpdateGitRepository
      replicas: 1
    pypi:
      requestedMemory: 256Mi
      requestedCpu: 200m
      image: swh_loader_package_image
      queues:
        - swh.loader.package.pypi.tasks.LoadPyPI
      replicas: 1
    add-forge-now:
      image: swh_loader_git_image
      queues:
        - add_forge_now:swh.loader.git.tasks.UpdateGitRepository
      ackLate: true
      replicas: 2
      extraConfig:
        overrides:
          swh.loader.git.loader.GitLoader:
            # 10Gib
            temp_file_cutoff: 10737418240
            # 32Gib
            pack_size_bytes: 34359738368
    save-code-now:
      queues:
        - save_code_now:swh.loader.bzr.tasks.LoadBazaar
        - save_code_now:swh.loader.cvs.tasks.LoadCvsRepository
        - save_code_now:swh.loader.git.tasks.UpdateGitRepository
        - save_code_now:swh.loader.git.tasks.LoadDiskGitRepository
        - save_code_now:swh.loader.git.tasks.UncompressAndLoadDiskGitRepository
        - save_code_now:swh.loader.mercurial.tasks.LoadArchiveMercurial
        - save_code_now:swh.loader.mercurial.tasks.LoadMercurial
        - save_code_now:swh.loader.svn.tasks.LoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.MountAndLoadSvnRepository
        - save_code_now:swh.loader.svn.tasks.DumpMountAndLoadSvnRepository
        - save_code_now:swh.loader.package.archive.tasks.LoadTarball
      ackLate: true
      replicas: 2


memcached:
  enabled: false

podPriority:
  enabled: false

azureCacheConfiguration:
  cls: azure
  account_name: fakevaultstorageaccount
  api_secret_key: ${API_SECRET_KEY}
  container_name: contents
  secrets:
    API_SECRET_KEY:
      secretKeyRef: swh-vault-azure-secret
      secretKeyName: azure-swh-vault-key

vault:
  enabled: false
  priorityClassName: frontend-rpc
  sentry:
    enabled: false
  backend:
    initialize:
      adminSecret: vault-superuser
      database: swh-vault
    check: true
    migrate: true

  logLevel: INFO
  vaultConfigurationRef: postgresqlVaultConfiguration
  storageConfigurationRef: rpcROStorageConfiguration
  objstorageConfigurationRef: rpcRWObjstorageConfiguration
  cacheConfigurationRef: azureCacheConfiguration

  # The scheduler instance to use for rpc must be a postgresql instance
  schedulerConfigurationRef: postgresqlSchedulerConfiguration
  gunicorn:
    threads: 5
    workers: 2
    timeout: 60
  # RPC services may have different profiles than the rest so they need their
  # specific setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  replicas: 1
  # autoScaling:
  #   minReplicaCount: 2
  #   maxReplicaCount: 10
  #   cpuPercentageUsage: 100

indexerJournalWriterConfiguration:
  brokersConfigurationRef: readWriteInternalKafkaBrokers
  cls: kafka
  anonymize: true
  client_id: swh-indexer-storage-journal-writer-storage
  prefix: swh.journal.indexed
  producer_config:
    message.max.bytes: 1000000000

indexerStorage:
  enabled: false
  deployments:
    read-write:
      enabled: true
      backend:
        # When true, initalize the backend, leave it empty to do nothing
        initialize:
          adminSecret: indexer-storage-superuser
          database: swh-indexer
        # When true, check db & code versions and do not start if they diverge
        check: true
        # When true, migrate or initialize db model
        migrate: true

      replicas: 1
      requestedCpu: 500m
      requestedMemory: 512Mi
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      journalWriterConfigurationRef: indexerJournalWriterConfiguration
      gunicorn:
        threads: 1
        workers: 2
    read-only:
      enabled: false
      checkDbVersion: false
      replicas: 1
      indexerStorageConfigurationRef: postgresqlIndexerStorageConfiguration
      gunicorn:
        threads: 1
        workers: 2

elasticsearchHosts:
  - host: search-es-http
    port: 9200

elasticsearchConfiguration:
  elasticsearchInstancesRef: elasticsearchHosts
  cls: elasticsearch
  indexes:
    origin:
      index: origin-v0.11
      read_alias: origin-read
      write_alias: origin-write

search:
  enabled: false
  priorityClassName: frontend-rpc
  backend:
    initialize: true

  elasticsearchConfigurationRef: elasticsearchConfiguration
  logLevel: INFO
  replicas: 1
  gunicorn:
    threads: 4
    workers: 1
    timeout: 60
  # RPC services may have different profiles than the rest so they need their specific
  # setup
  requestedMemory: 512Mi
  requestedCpu: 500m
  journalClients:
    enabled: true
    priorityClassName: normal-workload
    searchConfigurationRef: remoteSearchConfiguration
    storageConfigurationRef: remoteROStorageConfiguration
    journalConfigurationRef: searchJournalClientConfiguration
    deployments:
      objects:
        journalClientOverrides:
          group_id: swh-search-journal-client-origins
          object_types:
            - origin
            - origin_visit_status

      # metadata:
      #   journalClientOverrides:
      #     group_id: swh-search-journal-client-metadata
      #     prefix: swh.journal.indexed
      #     object_types:
      #       - origin_intrinsic_metadata
      #       - origin_extrinsic_metadata

scrubber:
  enabled: false
  scrubberDatabaseConfigurationRef: postgresqlScrubberConfiguration
  storageConfigurationRef: remoteROStorageConfiguration
  backend:
    check: true
    migrate: false

  journalChecker:
    enabled: true
    journalClientConfigurationRef: scrubberJournalCheckerClientConfiguration
    # (optional) Required only for the configuration of the journal checker
    # (in the scrubber backend)
    storageConfigurationRef: postgresqlStorageConfigurationPipeline
    deployments:
      release:
        configName: journal-checker-release
        journalClientOverrides:
          batch_size: 200
        object: release
        backend:
          config:
            name: journal-checker-release
            objectType: release
            backend: journal
            checkHashes: true
            # checkReferences: false
            # nbPartitions: 16

  storageChecker:
    enabled: true
    storageConfigurationRef: postgresqlStorageConfigurationPipeline
    deployments:
      object:
        configName: storage-checker-directory
        backend:
          check: true
          migrate: true
          initialize:
            database: swh-scrubber
            adminSecret: scrubber-superuser
          config:
            name: storage-checker-directory
            objectType: directory
            backend: storage
            checkHashes: true
            # checkReferences: false
            # nbPartitions: 16

  objstorageChecker:
    enabled: false
    storageConfigurationRef: postgresqlStorageConfigurationPipeline
    journalClientConfigurationRef: scrubberJournalCheckerClientConfiguration
    deployments:
      storage:
        objstorageConfigurationRef: rpcRWObjstorageConfiguration
        configName: objstorage-checker-content
        backend:
          check: false
          migrate: false
          config:
            name: objstorage-checker-content
            objectType: content
            backend: objstorage
            checkHashes: true
            # checkReferences: false
            # nbPartitions: 16

pathslicingObjstorageConfiguration:
  cls: pathslicing
  root: "/srv/swh/objects"
  slicing: 0:1/1:5
  client_max_size: 1073741824
  allow_delete: true

objstorage:
  enabled: false
  priorityClassName: frontend-rpc
  # For mounting the volume with the right permission
  # docker image has the swh uid at that 1005 value
  securityContext:
    fsGroup: 1005
  deployments:
    # Each key will be an objstorage instance to be deployed
    # The mandatory objstorageConfigurationRef key should target a dict
    # with the specific objstorage configuration
    read-write:
      enabled: true
      replicas: 1
      extraVolumes:
        pathslicing-rw:
          mountPath: /srv/swh/objects
          volumeDefinition:
            ephemeral:
              volumeClaimTemplate:
                metadata:
                  labels:
                    type: persistent-volume
                spec:
                  accessModes:
                  - ReadWriteOnce
                  resources:
                    requests:
                      storage: 1Gi
                  storageClassName: standard

      # mandatory
      # check readWriteStorageConfiguration example to configure your storage
      objstorageConfigurationRef: pathslicingObjstorageConfiguration

# historyConfiguration:
#   cls: prometheus
#   prometheus_host: thanos.i.a.s.n
#   prometheus_port: 19191
#   live_data_start: 0
#   interval: 12h
#   labels:
#     environment: local-cluster

localRedis:
  cls: redis
  host: redis-counters:6379

countersJournalClientConfiguration:
  brokersConfigurationRef: readOnlyInternalKafkaBrokers
  group_id: swh-counters-journal-client
  prefix: swh.journal.objects
  object_types:
  - content
  - directory
  - origin
  - origin_visit
  - origin_visit_status
  - release
  - revision
  - skipped_content
  - snapshot
  message.max.bytes: 524288000

counters:
  enabled: false
  journalClient:
    enabled: true
    countersConfigurationRef: remoteCountersConfiguration
    journalConfigurationRef: countersJournalClientConfiguration
  refreshCountersCache:
    enabled: false
    cron: "0 */1 * * *"
    concurrencyPolicy: Forbid
    countersConfigurationRef: remoteCountersConfiguration
    historyFiles: []
  rpc:
    enabled: true
    cacheBaseDirectory: /tmp/counters
    countersConfigurationRef: localRedis
    # historyConfigurationRef: historyConfiguration
    replicas: 1

alter:
  enabled: false
