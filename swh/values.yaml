namespace: swh

sentry:
  environment: production

# Example of services activation
# Only implemented for storage_replayer for now
#storage:
#  enabled: false
#

# List of kafka brokers
# used by storage to store the object inserted in the database
# and by the journal clients to follow the storage activiiy
# kafkaBrokers:
#   - myBroker1
#   - myBroker2

# Typical storage's journal writer configuration
# journalWriterConfiguration:
#   kafkaBrokersRef: kafkaBrokers
#   prefix: swh.journal.objects
#   clientId: swh.storage.journal_writer.storage
#   anonymize: true
#   producerConfig:
#     message.max.bytes: 1000000000

# postgresqlStorageConfiguration:
#   cls: postgresql
# TODO:

# List of cassandra nodes
# when cassandra is used a backend
# cassandraSeeds:
#   - myCassandraSeeds1
#   - myCassandraSeeds1

# Typical cassandra storage configuration
# cassandraStorageConfiguration:
#   cls: cassandra
#   cassandraSeedsRef: cassandraSeeds
#   keyspace: swh
#   consistencyLevel: LOCAL_QUORUM

# Typical remote storage configuration
# remoteStorageConfiguration:
#   cls: remote
#   host: http://storage:5002

# Example of a storage pipeline configuration
# Adapt according your platform capabilities
# Used by loaders and possibly journal client / replayers
# storageClientPipelineSteps:
#     - cls: buffer
#       min_batch_size:
#         content: 100
#         content_bytes: 52428800
#         directory: 100
#         directory_entries: 500
#         revision: 100
#         revision_parents: 200
#         revision_bytes: 52428800
#         release: 100
#         release_bytes: 52428800
#         extid: 100
#     - cls: filter
#     - cls: retry

# Noop object storage configuration
# noopObjectStorage:
#   cls: noop

# Typical storage configuration
# Use references to other entries to assemble
# a complete storage configuration
# Only storageConfigurationRef is mandatory if a remote
# storage is used.
# objectStorageConfigurationRef is mandatory for all other
# storage types
#
# defaultStorageClientConfiguration:
#   # pipelineStepsRef: storageClientPipelineSteps

#   # exhaustive supported storage types
#   # storageConfigurationRef: remoteStorageConfiguration
#   storageConfigurationRef: cassandraStorageConfiguration
#   # storageConfigurationRef: postgresqlStorageConfiguration

#   # journalWriterConfigurationRef: journalWriterConfiguration
#   # objectStorageConfigurationRef: noopObjectStorage

# globalROStorageConfiguration:
# TODO: define this configuration and use it for the webapp

graphql:
  enabled: false
  logLevel: INFO
  debug: no
  introspection: yes
  # maxQueryCost for anonymous users
  anonymousUserMaxQueryCost: 50
  authenticatedUserMaxQueryCost: 500
  sentry:
    enabled: false
    # name of the secret containing the $secretKeyName value
    # it defines the sentry token, host and projet to access
    # like https://token@sentry.host/id
    secretKeyRef: common-secrets
    secretKeyName: graphql-sentry-dsn
#  ingress:
#    enabled: false
#    httpPath: /graphql
#    host: my_host # Optional
#  backends:
#    storage:
#      host: http://my-storage
#      port: 5002
#    search:
#      host: http://my-search
#      port: 5010
  auth:
    # More information in https://gitlab.softwareheritage.org/swh/devel/swh-auth/-/blob/master/README.rst
    # server: https://auth.backend.url/
    # optional, when not provided, graphql defaults to use "server" entry
    # public_server: https://another.auth.backend.url/
    #realm: MyAuthDomain
    client: swh-web
    # memory:// or memcached://memcached:port
    cacheUrl: memory://

# Allow to specify a specific configuration for pod's /tmp
# directory. Mostly used to configure the loaders to work
# on specific tmpfs on the nodes.
# It can be necessary when using a memory emptyDir is not sufficient
tmpEphemeralStorage:
  claimTemplate: {}
    # ephemeral:
    #   volumeClaimTemplate:
    #     metadata:
    #       labels:
    #         type: ephemeral-volume
    #     spec:
    #       accessModes: [ "ReadWriteOnce" ]
    #       storageClassName: "local-path"
    #       resources:
    #         requests:
    #           storage: 100Gi # no effects
  # workaround because helm merges the map values when overridden
  # It shouldn't have to be modified
  default:
    emptyDir: {}

storage_replayer:
  enabled: false
  maxMessagesBytes: "524288000"
  journalBrokers:
    # The name of the secret containing the BROKER_USER_PASSWORD value
    secretName: storage-replayer-broker-secret
    hosts:
    - broker1
    - broker2
    user: myuser
  ## storage backend must be cassandra or postgresql
  storageClass: cassandra
  ## if storageClass is cassandra
  cassandra:
    initKeyspace: false # useful to ensure the cassandra database is bootstrapped
    seeds:
    - seed1
    - seed2
    keySpace: swh
    consistencyLevel: LOCAL_QUORUM
  ## if storageClass is postgresql
  #postgresql:
  #  host: db1
  #  port: '5432'
  #  user: pg_user
  #  db: swh
  ## name of the secret containing the $secretKeyName value
  #  secretKeyRef: swh-postgresql-common-secrets
  #  secretKeyName: storage-postgresql-password
  ## if pipeline/filter/retry is needed in storage configuration
  pipelineFilterRetry: false
  # optional 'replayer' configuration may be specified with a 'error_reporter' config
  # entry allowing to specify redis connection parameters. It will be used to report
  # non-recoverable replaying issues
  # error_reporter:
  #   host: redis.redis
  #   port: 6379
  #   db: 1
  deployments:
  # Example of deployments
  #   origins:
  #     privileged: false
  #     objects:
  #       - origin
  #       - origin_visits
  #       - origin_visits_status
  #     batchSize: 250
  #   revisions:
  #     privileged: false
  #     objects:
  #       - revision
  #     batchSize: 1000
  #     autoScaling:
  #       poolInterval: 120
  #       lagThreashold: 1000
  #       minReplicaCount: 1
  #       maxReplicaCount: 10

loader_metadata:
  enabled: false
  # storage:
  #   host: ...
  #   port: 5002
  # scheduler:
  #   host: ...
  #   port: 5008
  # consumerGroup: ...
  # prefix: swh.journal.objects
  # reload_after_days: 120
  # journalBrokers:
  #   hosts:
  #     - ...
  #   user: ...
  # autoScaling:
  #   poolInterval: 120
  #   lagThreashold: 1000
  #   minReplicaCount: 1
  #   maxReplicaCount: 10

loaders:
  enabled: false
  # mandatory
  # check defaultStorageConfiguration example to configure your storage
  storageConfigurationRef: defaultStorageClientConfiguration
  deployments:
  # Example of deployments
    # git:
    #   requestedMemory: 256Mi
    #   requestedCpu: 200m
    #   queues:
    #     - swh.loader.git.tasks.UpdateGitRepository
    #   autoScaling:
    #     # Downscale to 0 loaders when the queue is empty
    #     stopWhenNoActivity: false
    #     queueThreshold: 10  # spawn worker per increment of `value` messages
    #     minReplicacount: 1
    #     maxReplicaCount: 3

cookers:
  enabled: false

checker_deposit:
  enabled: false

indexers:
  enabled: false

listers:
  enabled: false

storage:
  enabled: false
  logLevel: INFO
  replicas: 1
  requestedCpu: 50m
  requestedMemory: 100Mi
  autoScaling:
    maxReplicaCount: 1
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: "swh/storage"
#            operator: In
#            values:
#            - "true"
#  gunicorn:
#    threads: 5
#    workers: 2
#    timeout: 60
  sentry:
    enabled: false
    # name of the secret containing the $secretKeyName value
    # it defines the sentry token, host and projet to access
    # like https://token@sentry.host/id
    secretKeyRef: common-secrets
    secretKeyName: storage-sentry-dsn
  # Mandatory: must be 'postgresql' or 'cassandra'
  storageClass:
  # if storageClass is 'cassandra'
  # cassandra:
  #   initKeyspace: false # only to bootstrap a new cassandra database
  #   seeds:
  #     - seed1
  #   keySpace: swh
  #   consistencyLevel: LOCAL_QUORUM
  #  if storageClass is 'postgresql'
  # postgresql:
  #   host: postgresql
  #   port: 5432
  #   db: softwareheritage
  #   user: guest
  #   # name of the secret containing the $secretKeyName value
  #   secretKeyRef: swh-postgresql-common-secrets
  #   secretKeyName: storage-postgresql-password
  objstorage:
    cls: noop
  ##  if objstorage configuration doesn't contains passwords or sensitive data
  # objstorageClass: filtered
  # objstorageConfig:
  #   storage_conf:
  #     cls: remote
  #     url: http://storage1.internal.staging.swh.network:5003/
  #   filters_conf:
  #   - type: readonly
  ## if objstorage configuration contains passwords or sensitive data
  ## /!\ the configmap indentation (10) had to be defined in the secret
  # objstorageClass: multiplexer
  # objstorageConfig: ${OBJSTORAGECONFIG}

  # Deploy an ingress to access the storage
  ingress:
    enabled: false
    # Optional: the ingress classname to use
    # className: nginx

    # mandatory if ingress is enabled
    # the hostname on which the storage must be reachable
    # host: mystorage.localdomain

  ## if journal access is required
  ## mandatory values
  #journalWriter:
  #  brokers:
  #    - kafka1
  #    - kafka2
  #    - kafka3
  #  clientId: swh.storage.journal_writer.storage1
  #  producerConfig: |-
  #    message.max.bytes: 1000000000
  #    item2: value2
  #    item3: value3
  ## optional values with their default value
  #  prefix: swh.journal.objects
  #  anonymize: true

web:
  enabled: false
  logLevel: INFO
  replicas: 1
  requestedCpu: 50m
  requestedMemory: 100Mi
  autoScaling:
    maxReplicaCount: 1
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: swh/web
#            operator: In
#            values:
#            - "true"
#  gunicorn:
#    threads: 5
#    workers: 2
#    timeout: 60
  sentry:
    enabled: false
    # name of the secret containing the $secretKeyName value
    # it defines the sentry token, host and projet to access
    # like https://token@sentry.host/id
    secretKeyRef: common-secrets
    secretKeyName: web-sentry-dsn
  configSecretRef: swh-cassandra-webapp-config

statsd_exporter:
  enabled: false
  image: prom/statsd-exporter
  imageVersion: "v0.22.7"

memcached:
  # Deploy a memcached instance used by the webapp and graphql for sessions caching
  enabled: false
  image: memcached:1.6.18
  memory: 256m
  requestedCpu: 100m
  requestedMemory: 300Mi
  prometheus:
    # Activate the deployment of the memcached exporter and ServiceMonitor
    enabled: true
    image: quay.io/prometheus/memcached-exporter:v0.11.1

