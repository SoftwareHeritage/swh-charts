{{/*
   * Create a web configmap for service .serviceType
   */}}
{{ define "swh.web.configmap" }}
{{- $hosts := .configuration.hosts }}
{{- $allowed_instance := first $hosts }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .serviceType }}-configuration-template
data:
  config.yml.template: |
    instance_name: {{ $allowed_instance }}
    allowed_hosts:
      {{- range $host := $hosts }}
      - {{ $host }}
      {{- end }}
      - {{ .serviceType }}.{{ .Values.namespace }}
      - ${POD_IP}
    {{- if and .Values.environment (or (eq .Values.environment "production")
                                       (eq .Values.environment "staging")) }}
    {{ .Values.environment }}_server_names:
      {{- range $host := $hosts }}
      - {{ $host }}
      {{- end }}
      - {{ .serviceType }}.{{ .Values.namespace }}
      - ${POD_IP}
    {{- end }}
    {{- include "swh.service.fromYaml" (dict "service" "storage"
                                             "configurationRef" .configuration.storageConfigurationRef
                                             "Values" .Values) | nindent 4 }}
    {{- if .configuration.statusRef }}
      {{- include "swh.service.fromYaml" (dict "service" "status"
                                               "configurationRef" .configuration.statusRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.cornerRibbonRef }}
      {{- include "swh.service.fromYaml" (dict "configurationRef" .configuration.cornerRibbonRef
                                               "Values" .Values) | nindent 2 -}}
    {{- end -}}
    {{- if .configuration.searchConfigurationRef }}
      {{- include "swh.service.fromYaml" (dict "service" "search"
                                               "configurationRef" .configuration.searchConfigurationRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.provenanceConfigurationRef }}
      {{- include "swh.service.fromYaml" (dict "service" "provenance"
                                               "configurationRef" .configuration.provenanceConfigurationRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.schedulerConfigurationRef }}
      {{- include "swh.service.fromYaml" (dict "service" "scheduler"
                                               "configurationRef" .configuration.schedulerConfigurationRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.vaultConfigurationRef }}
      {{- include "swh.service.fromYaml" (dict "service" "vault"
                                               "configurationRef" .configuration.vaultConfigurationRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.graphConfigurationRef }}
    {{- include "swh.service.fromYaml" (dict "service" "graph"
                                             "configurationRef" .configuration.graphConfigurationRef
                                             "Values" $.Values) | nindent 4 }}
    {{- end }}
    {{- if .configuration.indexerStorageConfigurationRef }}
      {{- include "swh.service.fromYaml" (dict "service" "indexer_storage"
                                               "configurationRef" .configuration.indexerStorageConfigurationRef
                                               "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.countersConfigurationRef }}
    counters_backend: swh-counters
    {{- include "swh.service.fromYaml" (dict "service" "counters"
                                             "configurationRef" .configuration.countersConfigurationRef
                                             "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.depositConfigurationRef }}
    {{- include "deposit.configuration.api.private" (dict "configurationRef" .configuration.depositConfigurationRef
                                                          "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.addForgeNowConfigurationRef }}
      {{- include "addforgenow.configuration" (dict "configurationRef" .configuration.addForgeNowConfigurationRef
                                                    "Values" .Values) | nindent 4 }}
    {{- end -}}
    {{- if .configuration.historyCountersUrlRef }}
    history_counters_url: {{ get .Values .configuration.historyCountersUrlRef }}
    {{- end }}
    {{- if .configuration.esWorkersIndexUrlRef }}
    es_workers_index_url: {{ get .Values .configuration.esWorkersIndexUrlRef }}
    {{- end }}
{{/* TODO: Manage the webapp logging */}}
{{/* log_dir: */}}
    secret_key: "${DJANGO_SECRET_KEY}"
    {{- $secrets := (get .Values .configuration.djangoConfigurationRef).secrets }}
    {{- $fallbackEnvVars := (list) }}
    {{- range $envVar, $secret := $secrets }}
    {{- if hasPrefix "DJANGO_SECRET_KEY_FALLBACK_" $envVar }}
    {{- $fallbackEnvVars = mustAppend $fallbackEnvVars $envVar }}
    {{- end }}
    {{- end }}
    {{- if $fallbackEnvVars }}
    secret_key_fallbacks:
    {{- range $envVarName := $fallbackEnvVars }}
      - "${{ "{" }}{{ $envVarName }}{{ "}" }}"
    {{- end }}
    {{- end }}
    {{- if .configuration.databaseConfigurationRef }}
    production_db:
    {{- include "django.postgresql" (dict "configurationRef" .configuration.databaseConfigurationRef
                                          "Values" .Values) | nindent 4 }}
    {{ end }}
    {{- if $.Values.web.sentry.enabled }}
    client_config:
      sentry_dsn: ${SWH_SENTRY_DSN}
    {{- end }}
    {{- if .configuration.throttlingConfigurationRef -}}
    {{- include "swh.web.throttling" (dict "configurationRef" .configuration.throttlingConfigurationRef
                                           "Values" .Values) | nindent 4 -}}
    {{- end }}
    {{- if .configuration.keycloakConfigurationRef }}
    {{- include "swh.service.fromYaml" (dict "service" "keycloak"
                                             "configurationRef" .configuration.keycloakConfigurationRef
                                             "Values" .Values) | nindent 4 }}
    {{ end }}
    {{- if .configuration.djangoAppsRef }}
    {{- $djangoApps := get .Values .configuration.djangoAppsRef -}}
    swh_extra_django_apps:
      {{- toYaml $djangoApps | nindent 4 }}
    {{- end }}
    {{- if .configuration.extraConfig -}}
    {{ toYaml .configuration.extraConfig | nindent 4 }}
    {{- end }}

{{- end -}}

{{/*
   * Create a web gunicorn logging json config file for service .serviceType
   */}}
{{ define "swh.web.gunicorn.logging" }}
{{- $defaultLoggingConfig := .configuration.defaultLoggingConfig | default .Values.web.defaultLoggingConfig -}}
{{- $rpcGunicornLoggingConfig := .configuration.rpcGunicornLoggingConfig | default .Values.web.rpcGunicornLoggingConfig -}}
{{- include "swh.gunicorn.logging"
  (dict "serviceType" .serviceType
        "defaultLoggingConfig" $defaultLoggingConfig
        "rpcGunicornLoggingConfig" $rpcGunicornLoggingConfig
        "Values" .Values) -}}
{{- end }}

