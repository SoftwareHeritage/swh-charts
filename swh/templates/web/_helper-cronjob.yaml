{{/*
   * Create a Kind CronJob for service .serviceType
   */}}
{{- define "swh.web.cronjob" -}}
{{- with .configuration -}}
{{- $log_level := .logLevel -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $.serviceType }}-cronjob
  namespace: {{ $.Values.namespace }}
spec:
  schedule: {{ .cron | quote}}
  {{- if .concurrencyPolicy }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  {{- end }}
  jobTemplate:
    spec:
      template:
        spec:
          {{- if $.Values.web.affinity }}
          affinity:
            {{- toYaml $.Values.web.affinity | nindent 12 }}
          {{- end }}
          {{- if and $.Values.podPriority.enabled .priorityClassName }}
          priorityClassName: {{ $.Values.namespace }}-{{ .priorityClassName }}
          {{ end }}
          initContainers:
            {{- if $.pgService }}
            - name: prepare-pgservice-configuration
              image: debian:bullseye
              imagePullPolicy: IfNotPresent
              command:
              - /bin/bash
              args:
              - -c
              - eval "cp /etc/swh/config/pg_service.conf /etc/swh/.pg_service.conf"
              volumeMounts:
              - name: configuration
                mountPath: /etc/swh
              - name: pgservice-configuration-template
                mountPath: /etc/swh/config
            {{ end }}
            - name: prepare-web-configuration
              image: {{ $.Values.swh_utils_image }}:{{ $.Values.swh_utils_image_version }}
              imagePullPolicy: IfNotPresent
              command:
                - /entrypoints/prepare-configuration.sh
              env:
                {{- if $.Values.web.sentry.enabled }}
                - name: SWH_SENTRY_DSN
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.web.sentry.secretKeyRef }}
                      key: {{ $.Values.web.sentry.secretKeyName }}
                      # 'name' secret should exist & include key
                      # if the setting doesn't exist, sentry pushes will be disabled
                      optional: true
                {{- end -}}
                {{- include "swh.secrets.envFromDeploymentConfig" (dict "deploymentConfig" $.webConfiguration
                                                                        "Values" $.Values) | nindent 16 }}
              volumeMounts:
              - name: configuration
                mountPath: /etc/swh
              - name: web-configuration-template
                mountPath: /etc/swh/configuration-template
              - name: config-utils
                mountPath: /entrypoints
                readOnly: true
          containers:
            - name: {{ $.serviceType }}
              resources:
                requests:
                  memory: {{ .requestedMemory | default "512Mi" }}
                  cpu: {{ .requestedCpu | default "500m" }}
                {{- if or .limitedMemory .limitedCpu }}
                limits:
                {{- if .limitedMemory }}
                  memory: {{ .limitedMemory }}
                {{- end }}
                {{- if .limitedCpu }}
                  cpu: {{ .limitedCpu }}
                {{- end }}
                {{ end }}
              image: {{ $.Values.swh_web_image }}:{{ $.Values.swh_web_image_version }}
              command:
              - /opt/swh/entrypoint.sh
              args:
              {{- range $cmd := $.command }}
              - {{ $cmd }}
              {{- end }}
              env:
                - name: STATSD_HOST
                  value: {{ $.Values.statsdExternalHost | default "prometheus-statsd-exporter" }}
                - name: STATSD_PORT
                  value: {{ $.Values.statsdPort | default "9125" | quote }}
                - name: STATSD_TAGS
                  value: {{ $.serviceType }}-cronjob
                - name: SWH_CONFIG_FILENAME
                  value: /etc/swh/config.yml
                - name: SWH_LOG_LEVEL
                  value: {{ $log_level | default "INFO" }}
              {{- if $.Values.web.sentry.enabled }}
                - name: SWH_SENTRY_ENVIRONMENT
                  value: {{ $.Values.sentry.environment }}
                - name: SWH_MAIN_PACKAGE
                  value: swh.web
                - name: SWH_SENTRY_DSN
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.web.sentry.secretKeyRef }}
                      key: {{ $.Values.web.sentry.secretKeyName }}
                      # if the setting doesn't exist, sentry issue pushes will be disabled
                      optional: false
                - name: SWH_SENTRY_DISABLE_LOGGING_EVENTS
                  value: "true"
              {{- end }}
              {{- if $.pgService }}
                - name: PGSERVICEFILE
                  value: /etc/swh/.pg_service.conf
                {{- include "swh.secrets.envFromDeploymentConfig" (dict "deploymentConfig" $.configuration "Values" $.Values) | nindent 16 }}
              {{ end }}
              imagePullPolicy: IfNotPresent
              volumeMounts:
              - name: configuration
                mountPath: /etc/swh
          volumes:
          - name: configuration
            emptyDir: {}
          - name: config-utils
            configMap:
              name: config-utils
              defaultMode: 0555
          - name: web-configuration-template
            configMap:
              name: web-{{ $.webType }}-configuration-template
              items:
              - key: "config.yml.template"
                path: "config.yml.template"
          {{- if $.pgService }}
          - name: pgservice-configuration-template
            configMap:
              name: pgservice-{{ $.webType }}-configuration-template
              items:
              - key: "pg-service-conf"
                path: "pg_service.conf"
          {{ end }}
          restartPolicy: OnFailure

{{ end }}
{{- end -}}
