{{ if .Values.web.enabled -}}
{{- $configUtilsPathChecksum := include (print $.Template.BasePath "/utils/config-utils.yaml") . | sha256sum -}}
{{ range $webType, $webConfig := .Values.web.deployments }}
{{- if or (not (hasKey $webConfig "enabled")) (get $webConfig "enabled") -}}
{{- $serviceType := print "web-" $webType -}}
{{- $configArgsDict := dict "serviceType" $serviceType
                            "configuration" $webConfig
                            "Values" $.Values -}}
{{- $configChecksum := include "swh.web.configmap" $configArgsDict | sha256sum -}}
{{- $configLoggingChecksum := include "swh.web.gunicorn.logging" $configArgsDict | sha256sum -}}
{{- $do_migrations := or (and $webConfig.migrations $webConfig.migrations.enabled)
                         (and $.Values.web.migrations $.Values.web.migrations.enabled) -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ $serviceType }}
  labels:
    app: {{ $serviceType }}
spec:
  revisionHistoryLimit: 2
  {{ if and $webConfig.replicas (not $webConfig.autoScaling) -}}
  replicas: {{ $webConfig.replicas }}
  {{ end -}}
  selector:
    matchLabels:
      app: {{ $serviceType }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ $serviceType }}
      annotations:
        checksum/config: {{ $configChecksum }}
        checksum/config-logging: {{ $configLoggingChecksum }}
        checksum/config-utils: {{ $configUtilsPathChecksum }}
    spec:
      {{- if $.Values.web.affinity }}
      affinity:
        {{- toYaml $.Values.web.affinity | nindent 8 }}
      {{- end }}
      {{- if and $.Values.podPriority.enabled $.Values.web.priorityClassName }}
      priorityClassName: {{ $.Values.namespace }}-{{ $.Values.web.priorityClassName }}
      {{ end }}
      initContainers:
        - name: prepare-configuration
          image: {{ $.Values.swh_utils_image }}:{{ $.Values.swh_utils_image_version }}
          imagePullPolicy: IfNotPresent
          command:
          - /entrypoints/prepare-configuration.sh
          env:
            {{- if $.Values.web.sentry.enabled }}
            - name: SWH_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.web.sentry.secretKeyRef }}
                  key: {{ $.Values.web.sentry.secretKeyName }}
                  # 'name' secret should exist & include key
                  # if the setting doesn't exist, sentry pushes will be disabled
                  optional: false
            {{- end -}}
            {{- include "swh.secrets.envFromDeploymentConfig" (dict "deploymentConfig" $webConfig
                                                                    "Values" $.Values) | nindent 12 }}
          volumeMounts:
            - name: configuration
              mountPath: /etc/swh
            - name: configuration-template
              mountPath: /etc/swh/configuration-template
            - name: config-utils
              mountPath: /entrypoints
              readOnly: true
        {{- if $do_migrations }}
        - name: do-migration
          image: {{ $.Values.swh_web_image }}:{{ $.Values.swh_web_image_version }}
          imagePullPolicy: IfNotPresent
          env:
            - name: SWH_CONFIG_FILENAME
              value: /etc/swh/config.yml
          command:
            - django-admin
          args:
            - migrate
            - --settings=swh.web.settings.production
          volumeMounts:
            - name: configuration
              mountPath: /etc/swh
        {{ end }}
        - name: prepare-static
          image: {{ $.Values.swh_web_image }}:{{ $.Values.swh_web_image_version }}
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -c
            - cp -r $PWD/.local/share/swh/web/static/ /usr/share/swh/web/static/
          volumeMounts:
          - name: static
            mountPath: /usr/share/swh/web/static
      containers:
        - name: {{ $serviceType }}
          resources:
            requests:
              memory: {{ $webConfig.requestedMemory | default "512Mi" }}
              cpu: {{ $webConfig.requestedCpu | default "500m" }}
          {{- if or $webConfig.limitedMemory $webConfig.limitedCpu }}
            limits:
            {{- if $webConfig.limitedMemory }}
              memory: {{ $webConfig.limitedMemory }}
            {{- end }}
            {{- if $webConfig.limitedCpu }}
              cpu: {{ $webConfig.limitedCpu }}
            {{- end }}
          {{ end }}
          image: {{ $.Values.swh_web_image }}:{{ $.Values.swh_web_image_version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ $webConfig.port | default $.Values.web.port }}
              name: webapp
          readinessProbe:
            httpGet:
              path: /api/1
              port: webapp
              httpHeaders:
                - name: Host
                  value: {{ first $webConfig.hosts }}
            initialDelaySeconds: 5
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 30
          livenessProbe:
            tcpSocket:
              port: webapp
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 30
          command:
            - /bin/bash
          args:
            - -c
            - /opt/swh/entrypoint.sh
          env:
            - name: WORKERS
              value: {{ dig "gunicorn" "workers" 2 $webConfig | quote }}
            - name: THREADS
              value: {{ dig "gunicorn" "threads" 2 $webConfig | quote }}
            - name: TIMEOUT
              value: {{ dig "gunicorn" "timeout" 3600 $webConfig | quote }}
            - name: STATSD_HOST
              value: {{ $.Values.statsdExternalHost | default "prometheus-statsd-exporter" }}
            - name: STATSD_PORT
              value: {{ $.Values.statsdPort | default "9125" | quote }}
            - name: STATSD_TAGS
              value: deployment:{{ $serviceType }}
            - name: STATSD_SERVICE_TYPE
              value: {{ $serviceType }}
            - name: SWH_LOG_LEVEL
              value: {{ $webConfig.logLevel | default $.Values.web.logLevel | quote }}
            - name: SWH_CONFIG_FILENAME
              value: /etc/swh/config.yml
            - name: SWH_LOG_CONFIG_JSON
              value: /etc/swh/logging/logging-gunicorn.json
            {{- if $.Values.web.sentry.enabled }}
            - name: SWH_SENTRY_ENVIRONMENT
              value: {{ $.Values.sentry.environment }}
            - name: SWH_MAIN_PACKAGE
              value: swh.web
            - name: SWH_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.web.sentry.secretKeyRef }}
                  key: {{ $.Values.web.sentry.secretKeyName }}
                  # 'name' secret should exist & include key
                  # if the setting doesn't exist, sentry pushes will be disabled
                  optional: true
            - name: SWH_SENTRY_DISABLE_LOGGING_EVENTS
              value: "true"
            {{- end }}
          volumeMounts:
          - name: configuration
            mountPath: /etc/swh
          - name: configuration-logging
            mountPath: /etc/swh/logging
        - name: nginx
          resources:
            requests:
              memory: {{ $webConfig.nginxRequestedMemory | default "50Mi" }}
              cpu: {{ $webConfig.nginxRequestedCpu | default "10m" }}
          image: nginx:bullseye
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: webstatic
          readinessProbe:
            httpGet:
              path: static/robots.txt
              port: webstatic
            initialDelaySeconds: 5
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: static/robots.txt
              port: webstatic
            initialDelaySeconds: 3
            periodSeconds: 10
          volumeMounts:
            - name: static
              mountPath: /usr/share/nginx/html
      volumes:
      - name: configuration
        emptyDir: {}
      - name: configuration-template
        configMap:
         name: {{ $serviceType }}-configuration-template
         items:
         - key: "config.yml.template"
           path: "config.yml.template"
      - name: configuration-logging
        configMap:
          name: {{ $serviceType }}-configuration-logging
          items:
          - key: "logging-gunicorn.json"
            path: "logging-gunicorn.json"
      - name: static
        emptyDir: {}
      - name: config-utils
        configMap:
          name: config-utils
          defaultMode: 0555
{{ end }}
{{ end -}}
{{- end -}}

