{{ if .Values.toolbox.enabled -}}
{{- $namespace := .Values.namespace -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: toolbox-script-utils
  namespace: {{ $namespace }}
data:
  register-task-types.sh: |
    #!/bin/bash

    set -eux

    export SWH_CONFIG_FILENAME=/etc/swh/config-scheduler.yml

    swh scheduler -C $SWH_CONFIG_FILENAME task-type register
  check-db-version.sh: |
    #!/bin/bash

    set -eu
    set -o pipefail

    if [ "$#" -lt 1 ]; then
      echo >&2 "\
    usage: $0 MODULE_NAME [CONFIG_FILE [CONFIG_KEY]]

    Check whether MODULE_NAME, configured in the CONFIG_KEY key of
    CONFIG_FILE, needs a migration.

    CONFIG_FILE defaults to /etc/swh/config-<MODULE_NAME>.yml
    CONFIG_KEY sets which key is used in the config to find the database
    config. It defaults to <MODULE_NAME>

    This script exits with code 1 if the settings are wrong, and with code
    2 if a migration is needed.
    "
      exit 127
    fi

    MODULE_NAME="$1"

    CONFIG_FILE="${2:-/etc/swh/config-${MODULE_NAME}.yml}"
    CONFIG_KEY="${3:-$MODULE_NAME}"

    # Create a temporary file, open it for writing as fd 3, for reading as fd 4 and 5
    TEMP_FILE="$(mktemp)"

    exec 3>"${TEMP_FILE}"
    exec 4<"${TEMP_FILE}"
    exec 5<"${TEMP_FILE}"

    # and remove the tempfile
    rm -f "${TEMP_FILE}"

    # check the database status into the tempfile
    swh db --config-file="${CONFIG_FILE}" version "${MODULE_NAME}" \
      --module-config-key="${CONFIG_KEY}" | tee >&2 /dev/fd/3

    # Read the code and db version from the tempfile
    CODE_VERSION="$(awk -F': ' '/code/ {print $2}' <&4)"
    DB_VERSION="$(awk -F': ' '/^version/ {print $2}' <&5)"

    if [ -z "${CODE_VERSION}" ]; then
      echo >&2 "Unable to find the code version."
      exit 1
    fi

    if [ -z "${DB_VERSION}" ]; then
      echo >&2 "Unable to find the database version."
      exit 1
    fi

    if [ "${DB_VERSION}" = "${CODE_VERSION}" ]; then
      echo "Database already configured at the latest version."
    else
      echo "Migration required from <${DB_VERSION}> to <${CODE_VERSION}>."
      exit 2
    fi

  migrate-db-version.sh: |
    #!/bin/bash

    set -eu

    if [ "$#" -lt 1 ]; then
      echo >&2 "\
    usage: $0 MODULE_NAME [CONFIG_FILE [CONFIG_KEY [TO_VERSION]]]]

    Migrate the database for MODULE_NAME, configured in the CONFIG_KEY key
    of CONFIG_FILE, to TO_VERSION.

    CONFIG_FILE defaults to /etc/swh/config-<MODULE_NAME>.yml
    CONFIG_KEY sets which key is used in the config to find the database
      config. It defaults to <MODULE_NAME>
    TO_VERSION defaults to the latest schema version defined in <MODULE_NAME>
    "
      exit 127
    fi

    MODULE_NAME="$1"

    CONFIG_FILE="${2:-/etc/swh/config-${MODULE_NAME}.yml}"
    CONFIG_KEY="${3:-$MODULE_NAME}"
    TO_VERSION="${4:-}"

    exec swh db --config-file="${CONFIG_FILE}" upgrade "${MODULE_NAME}" \
      --module-config-key="${CONFIG_KEY}" \
      ${TO_VERSION:+"--to-version=${TO_VERSION}"}

{{- range $service_type, $deployment_config := .Values.toolbox.configs }}
  {{- $module_name := $deployment_config.moduleName | default $service_type }}
  {{- $module_config := $deployment_config.moduleConfig | default (print "/etc/swh/config-" $service_type ".yml") }}
  {{- $module_config_key := $deployment_config.moduleConfigKey | default $module_name }}
  check-{{ $service_type }}-db-version.sh: |
    #!/bin/bash

    set -eu

    exec /opt/swh/bin/check-db-version.sh {{ $module_name }} {{ $module_config }} {{ $module_config_key }}

  migrate-{{ $service_type }}-db-version.sh: |
    #!/bin/bash

    set -eu

    exec /opt/swh/bin/migrate-db-version.sh {{ $module_name }} {{ $module_config }} {{ $module_config_key }}

{{ end }}
{{- end -}}
