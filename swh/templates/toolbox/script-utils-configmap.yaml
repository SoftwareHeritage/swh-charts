{{ if .Values.toolbox.enabled -}}
{{- $namespace := .Values.namespace -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: toolbox-script-utils
  namespace: {{ $namespace }}
data:
  register-task-types.sh: |
    #!/bin/bash

    set -eux

    export SWH_CONFIG_FILENAME=/etc/swh/config-scheduler.yml

    swh scheduler -C $SWH_CONFIG_FILENAME task-type register
  check-db-version.sh: |
    #!/bin/bash

    set -eu

    TEMP_FILE=/tmp/db-version.txt

    MODULE=$1

    if [ -z "${MODULE}" ]; then
      echo The environment variable must be defined with the module to check
      echo for example modules <storage>, <indexer>, <scrubber>, ...
      exit 1
    fi

    MODULE_CONFIG=${2-"/etc/swh/config-$MODULE.yml"}
    MODULE_CONFIG_KEY=${3-""}
    CODE_VERSION=${4-""}
    DB_VERSION=${5-""}

    cli="swh db --config-file=${MODULE_CONFIG} version ${MODULE}"

    if [ ! -z "${CODE_VERSION}" ]; then
      cli="${cli} --to-version ${CODE_VERSION}"
    fi

    if [ ! -z "${MODULE_CONFIG_KEY}" ]; then
      cli="${cli} --module-config-key=${MODULE_CONFIG_KEY}"
    fi

    # checking the database status
    $cli | tee "${TEMP_FILE}"

    CODE_VERSION=$(awk -F': ' '/code/ {print $2}' ${TEMP_FILE})
    DB_VERSION=$(awk -F': ' '/^version/ {print $2}' ${TEMP_FILE})

    if [ -z "${CODE_VERSION}" ]; then
      echo "Unable to find the code version."
      exit 1
    fi

    if [ -z "${DB_VERSION}" ]; then
      echo "Unable to find the code version."
      exit 1
    fi

    if [ "${DB_VERSION}" -eq "${CODE_VERSION}" ]; then
      msg="Database already configured at the latest version."
    else
      msg="Migration required from <${DB_VERSION}> to <${CODE_VERSION}>."
    fi
    echo $msg

  migrate-db-version.sh: |
    #!/bin/bash

    set -eu

    MODULE=$1

    if [ -z "${MODULE}" ]; then
      echo The environment variable must be defined with the module to check
      echo for example modules <storage>, <indexer>, <scrubber>, ...
      exit 1
    fi

    MODULE_CONFIG=${2-"/etc/swh/config-$MODULE.yml"}
    MODULE_CONFIG_KEY=${3-""}
    CODE_VERSION=${4-""}

    cli="swh db --config-file=${MODULE_CONFIG} upgrade ${MODULE}"

    if [ ! -z "${CODE_VERSION}" ]; then
      cli="${cli} --to-version ${CODE_VERSION}"
    fi

    if [ ! -z "${MODULE_CONFIG_KEY}" ]; then
      cli="${cli} --module-config-key=${MODULE_CONFIG_KEY}"
    fi

    set -x
    $cli

{{- range $service_type, $deployment_config := .Values.toolbox.configs }}
  {{- $module_name := $deployment_config.moduleName | default $service_type }}
  {{- $module_config := $deployment_config.moduleConfig | default (print "/etc/swh/config-" $service_type ".yml") }}
  {{- $module_config_key := $deployment_config.moduleConfigKey | default $module_name }}
  check-{{ $service_type }}-db-version.sh: |
    #!/bin/bash

    set -eu

    /opt/swh/bin/check-db-version.sh {{ $module_name }} {{ $module_config }} {{ $module_config_key }}

  migrate-{{ $service_type }}-db-version.sh: |
    #!/bin/bash

    set -eu

    /opt/swh/bin/migrate-db-version.sh {{ $module_name }} {{ $module_config }} {{ $module_config_key }}

{{ end }}
{{- end -}}
