{{/*
   * Create an objstorage configuration based on configuration section aggregation
   */}}
{{- define "swh.objstorageConfiguration" -}}
{{- $configuration := get .Values .configurationRef -}}
{{- if not $configuration -}}
  {{ fail (print "_helper_config.yaml: swh.objstorageConfiguration: Undeclared <" .configurationRef "> storage configuration" ) }}
{{- end -}}
{{/* if no extra configurationRef is present in the configuration, the configuration
   * is simple enough, so we can apply it directly.
   * Otherwise, we may have some extra secrets and as a result an extra indirection to follow
   */}}
{{- $configurationRef := get $configuration "configurationRef" | default .configurationRef -}}
{{- $keyName := .serviceName | default "objstorage" -}}
{{- include "swh.service.fromYaml" (dict "service" $keyName
                                         "configurationRef" $configurationRef
                                         "Values" .Values) }}
{{- end -}}

{{/*
   * Create a gunicorn logging json config file for service .serviceType
   * When the configuration is empty, this fallbacks to use the default
   * .Values.defaultLoggingConfig and .Values.rpcGunicornLoggingConfig.
   */}}
{{ define "swh.gunicorn.logging" }}
{{- $defaultConfiguration := .defaultLoggingConfig | default .Values.defaultLoggingConfig -}}
{{- $overrideConfiguration := .rpcGunicornLoggingConfig | default .Values.rpcGunicornLoggingConfig -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .serviceType }}-configuration-logging
data:
  logging-gunicorn.json: |
    {{- toPrettyJson ( mustMergeOverwrite (deepCopy $defaultConfiguration) (deepCopy $overrideConfiguration) ) | nindent 4 }}
{{- end }}

