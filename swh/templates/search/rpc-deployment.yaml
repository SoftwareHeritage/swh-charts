{{ if .Values.search.enabled -}}
{{- $configChecksum := include (print $.Template.BasePath "/search/rpc-configmap.yaml") . | sha256sum -}}
{{- $configUtilsPathChecksum := include (print $.Template.BasePath "/utils/config-utils.yaml") . | sha256sum -}}
{{- $databaseUtilsPathChecksum := include (print $.Template.BasePath "/utils/backend-utils.yaml") . | sha256sum  -}}
{{- $initializeSearchBackend := and .Values.search.backend .Values.search.backend.initialize | default false -}}
{{- $serviceType := "search-rpc" -}}
{{- $gunicornConfig := fromYaml (include "swh.gunicorn.config"
                                  (dict "configuration" .Values.search.gunicorn)) -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ $serviceType }}
  labels:
    app: {{ $serviceType }}
spec:
  revisionHistoryLimit: 2
  {{ if .Values.search.replicas -}}
  replicas: {{ .Values.search.replicas }}
  {{ end -}}
  selector:
    matchLabels:
      app: {{ $serviceType }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ $serviceType }}
      annotations:
        checksum/config: {{ $configChecksum }}
        checksum/config-utils: {{ $configUtilsPathChecksum }}
        checksum/backend-utils: {{ $databaseUtilsPathChecksum }}
    spec:
      {{- if .Values.search.affinity }}
      affinity:
        {{- toYaml .Values.search.affinity | nindent 8 }}
      {{- end }}
      {{- if and .Values.podPriority.enabled .Values.search.priorityClassName }}
      priorityClassName: {{ .Values.namespace }}-{{ .Values.search.priorityClassName }}
      {{ end }}
      initContainers:
        - name: prepare-configuration
          image: {{ $.Values.swh_utils_image }}:{{ $.Values.swh_utils_image_version }}
          imagePullPolicy: IfNotPresent
          command:
          - /entrypoints/prepare-configuration.sh
          env: {{ include "swh.secrets.envFromDeploymentConfig" (dict "deploymentConfig" $.Values.search
                                                                      "Values" $.Values) | nindent 10 }}
          volumeMounts:
          - name: config-utils
            mountPath: /entrypoints
            readOnly: true
          - name: configuration
            mountPath: /etc/swh
          - name: configuration-template
            mountPath: /etc/swh/configuration-template
        {{- if $initializeSearchBackend }}
        {{ include "swh.initializeSearchBackend"
          (dict "Values" $.Values
                "imagePrefixName" "swh_search_image"
                "module" "search") | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ $serviceType }}
          resources:
            requests:
              memory: {{ .Values.search.requestedMemory | default "512Mi" }}
              cpu: {{ .Values.search.requestedCpu | default "500m" }}
          {{- if or .Values.search.limitedMemory .Values.search.limitedCpu }}
            limits:
            {{- if .Values.search.limitedMemory }}
              memory: {{ .Values.search.limitedMemory }}
            {{- end }}
            {{- if .Values.search.limitedCpu }}
              cpu: {{ .Values.search.limitedCpu }}
            {{- end }}
        {{- end }}
          image: {{ .Values.swh_search_image }}:{{ .Values.swh_search_image_version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.search.port }}
              name: rpc
          readinessProbe:
            httpGet:
              path: /
              port: rpc
            initialDelaySeconds: 15
            failureThreshold: 30
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: rpc
            initialDelaySeconds: 10
            periodSeconds: 5
          command:
            - /bin/bash
          args:
            - -c
            - /opt/swh/entrypoint.sh
          env:
            - name: WORKERS
              value: {{ $gunicornConfig.workers | quote }}
            - name: THREADS
              value: {{ $gunicornConfig.threads | quote }}
            - name: TIMEOUT
              value: {{ $gunicornConfig.timeout | quote }}
            - name: STATSD_HOST
              value: {{ .Values.statsdExternalHost | default "prometheus-statsd-exporter" }}
            - name: STATSD_PORT
              value: {{ .Values.statsdPort | default "9125" | quote }}
            - name: STATSD_TAGS
              value: deployment:{{ $serviceType }}
            - name: STATSD_SERVICE_TYPE
              value: {{ $serviceType }}
            - name: SWH_LOG_LEVEL
              value: {{ .Values.search.logLevel | default "INFO" }}
            - name: SWH_LOG_CONFIG_JSON
              value: /etc/swh/logging/logging-gunicorn.json
          {{- if .Values.search.sentry.enabled }}
            - name: SWH_SENTRY_ENVIRONMENT
              value: {{ .Values.sentry.environment }}
            - name: SWH_MAIN_PACKAGE
              value: swh.search
            - name: SWH_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.search.sentry.secretKeyRef }}
                  key: {{ .Values.search.sentry.secretKeyName }}
                  # if the setting doesn't exist, sentry issue pushes will be disabled
                  optional: false
            - name: SWH_SENTRY_DISABLE_LOGGING_EVENTS
              value: "true"
          {{- end }}
          volumeMounts:
          - name: configuration
            mountPath: /etc/swh
          - name: configuration-logging
            mountPath: /etc/swh/logging
      volumes:
      - name: configuration
        emptyDir: {}
      - name: configuration-template
        configMap:
          name: {{ $serviceType }}-configuration-template
          items:
          - key: "config.yml.template"
            path: "config.yml.template"
      - name: configuration-logging
        configMap:
          name: {{ $serviceType }}-configuration-logging
          items:
          - key: "logging-gunicorn.json"
            path: "logging-gunicorn.json"
      - name: config-utils
        configMap:
          name: config-utils
          defaultMode: 0555
      - name: backend-utils
        configMap:
          name: backend-utils
          defaultMode: 0555
{{- end -}}
