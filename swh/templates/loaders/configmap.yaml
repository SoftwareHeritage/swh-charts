{{ if .Values.loaders.enabled -}}
{{ range $loader_type, $deployment_config := .Values.loaders.deployments }}
{{ $loader_name := ( print "loader-" $loader_type ) }}
{{ $use_json_logger := get $deployment_config "useJsonLogger" | default true }}
{{ $log_level := get $deployment_config "logLevel" | default "INFO" | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $loader_name }}-template
  namespace: {{ $.Values.namespace }}
data:
  config.yml.template: |
    storage:
      cls: pipeline
      steps:
      - cls: buffer
        min_batch_size:
          content: 1000
          content_bytes: 52428800
          directory: 1000
          directory_entries: 12000
          revision: 1000
          revision_parents: 2000
          revision_bytes: 52428800
          release: 1000
          release_bytes: 52428800
          extid: 1000
      - cls: filter
      - cls: retry
      - cls: remote
        url: http://{{ $.Values.loaders.storage.host }}:{{ $.Values.loaders.storage.port }}/

    {{- if $deployment_config.extraConfig -}}
      {{- range $option, $value := $deployment_config.extraConfig }}
    {{ $option }}: {{ toYaml $value | nindent 6 }}
      {{- end }}
    {{- end }}

    celery:
      task_broker: amqp://${AMQP_USERNAME}:${AMQP_PASSWORD}@{{ $.Values.loaders.amqp.host }}:{{ $.Values.loaders.amqp.port }}/
      task_acks_late: {{ get $deployment_config "ackLate" | default false }}
      task_queues:
    {{- range $queue := get $deployment_config "queues" }}
      - {{ $queue }}
    {{- end }}
      sentry_settings_for_celery_tasks:
        __sentry-settings-for-celery-tasks__
    metadata_fetcher_credentials:
      __metadata-fetcher-credentials__
  init-container-entrypoint.sh: |
    #!/bin/bash

    set -e

    CONFIG_FILE=/etc/swh/config.yml
    CONFIG_FILE_WIP=/tmp/wip-config.yml

    # substitute environment variables when creating the default config.yml
    eval echo \""$(</etc/swh/configuration-template/config.yml.template)"\" \
      > $CONFIG_FILE

    SENTRY_SETTINGS_PATH=/etc/credentials/sentry-settings/sentry_settings_for_celery_tasks
    if [ -f $SENTRY_SETTINGS_PATH ]; then
      awk "/__sentry-settings-for-celery-tasks__/{system(\"sed 's/^/    /g' $SENTRY_SETTINGS_PATH\");next}1" $CONFIG_FILE > $CONFIG_FILE_WIP
      mv $CONFIG_FILE_WIP $CONFIG_FILE
    else
      sed -i '/__sentry-settings-for-celery-tasks__//g' $CONFIG_FILE
    fi

    CREDS_LISTER_PATH=/etc/credentials/metadata-fetcher/credentials
    if [ -f $CREDS_LISTER_PATH ]; then
      awk "/__metadata-fetcher-credentials__/{system(\"sed 's/^/  /g' $CREDS_LISTER_PATH\");next}1" $CONFIG_FILE > $CONFIG_FILE_WIP
      mv $CONFIG_FILE_WIP $CONFIG_FILE
    else
      sed -i '/__metadata-fetcher-credentials__//g' $CONFIG_FILE
    fi

    exit 0

  {{ if $use_json_logger }}
  logging-configuration.yml: |
    version: 1

    handlers:
      console:
        class: logging.StreamHandler
        formatter: json
        stream: ext://sys.stdout

    formatters:
      json:
        class: pythonjsonlogger.jsonlogger.JsonFormatter
        # python-json-logger parses the format argument to get the variables it actually expands into the json
        format: "%(asctime)s:%(threadName)s:%(pathname)s:%(lineno)s:%(funcName)s:%(task_name)s:%(task_id)s:%(name)s:%(levelname)s:%(message)s"

    loggers:
      celery:
        level: {{ $log_level }}
      amqp:
        level: WARNING
      urllib3:
        level: WARNING
      azure.core.pipeline.policies.http_logging_policy:
        level: WARNING
      swh:
        level: {{ $log_level }}
      celery.task:
        level: {{ $log_level }}

    root:
      level: {{ $log_level }}
      handlers:
      - console
  {{ end }}
{{ end }}
{{- end -}}
