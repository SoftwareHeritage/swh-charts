---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-utils
  namespace: {{ $.Values.namespace }}
data:
  init-keyspace.py: |
    from swh.core import config
    from swh.storage.cassandra import create_keyspace

    def get_cassandra_config(storage_config):
        if storage_config["cls"] == 'cassandra' :
            return storage_config

        if storage_config["cls"] == 'pipeline':
            cassandra_config = storage_config["steps"][-1]
            if cassandra_config["cls"] != "cassandra":
                raise ValueError(
                    "Misconfigured pipeline, the last step must be the actual "
                    "cassandra storage configuration."
                )

            return cassandra_config

        raise ValueError(
            "Misconfigured storage configuration. It must be either a <pipeline> "
            "or a <cassandra> storage instance."
        )

    full_config = config.read('/etc/swh/config.yml')
    storage_config = full_config["storage"]
    cassandra_conf = get_cassandra_config(storage_config)
    hosts = cassandra_conf.get("hosts")
    if not hosts:
        raise ValueError(
            "Misconfigured cassandra configuration, "
            "<hosts> key must be provided."
        )

    auth_provider = cassandra_conf.get("auth_provider")
    if not auth_provider:
        raise ValueError(
            "Misconfigured cassandra configuration, "
            "<auth_provider> key must be provided."
        )

    keyspace = cassandra_conf.get("keyspace")
    if not keyspace:
        raise ValueError(
            "Misconfigured cassandra configuration, "
            "<keyspace> key must be provided."
        )

    create_keyspace(hosts=hosts, keyspace=keyspace, auth_provider=auth_provider)

  extract-storage-postgresql-config-py: |
    import yaml
    from swh.core import config

    def get_postgresql_config(storage_config):
      if storage_config["cls"] == 'postgresql' :
        return storage_config

      if storage_config["cls"] == 'pipeline':
        for config in storage_config["steps"]:
          c = get_postgresql_config(config)
          if c:
            return c

      return None

    full_config = config.read('/etc/swh/config.yml')

    storage_config = full_config["storage"]

    postgresql_conf = get_postgresql_config(storage_config)

    if postgresql_conf is None:
      print("No postgresql configuration found!\n")
      exit(1)

    f = open("/tmp/config.yml", "w")
    f.write(yaml.dump({"storage": postgresql_conf}))

  check-storage-db-version.sh: |
    #!/bin/bash

    set -eu

    TEMP_FILE=/tmp/db-version.txt

    if [ -z ${MODULE} ]; then
      echo The env variable must be defined with the module to check
      echo for example "storage"
      exit 1
    fi

    # extracting the postgresql configuration from a full configuration
    # possibly with a pipeline
    set +e
    python /entrypoints/extract-storage-postgresql-config-py || exit 0
    set -e

    # checking the database status
    swh db --config-file=/tmp/config.yml version "${MODULE}" | tee "${TEMP_FILE}"

    CODE_VERSION=$(awk -F':' '/code/ {print $2}' ${TEMP_FILE})
    DB_VERSION=$(awk -F':' '/^version/ {print $2}' ${TEMP_FILE})

    if [ -e "${CODE_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ -e "${DB_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ "$DB_VERSION" -ne "$CODE_VERSION" ]; then
      echo "code and DB versions are different. Blocking the deployment"
      exit 1
    fi

  check-indexer-storage-db-version.sh: |
    #!/bin/bash

    set -eu

    TEMP_FILE=/tmp/db-version.txt

    # checking the database status
    swh db --config-file=$SWH_CONFIG_FILENAME version \
      indexer --module-config-key "indexer_storage" | tee "${TEMP_FILE}"

    CODE_VERSION=$(awk -F':' '/code/ {print $2}' ${TEMP_FILE})
    DB_VERSION=$(awk -F':' '/^version/ {print $2}' ${TEMP_FILE})

    if [ -e "${CODE_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ -e "${DB_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ "$DB_VERSION" -ne "$CODE_VERSION" ]; then
      echo "code and DB versions are different. Blocking the deployment"
      exit 1
    fi

  check-scrubber-db-version.sh: |
    #!/bin/bash

    set -eu

    TEMP_FILE=/tmp/db-version.txt

    # checking the database status
    swh db --config-file=${SWH_CONFIG_FILENAME} version ${MODULE} | tee "${TEMP_FILE}"

    CODE_VERSION=$(awk -F':' '/code/ {print $2}' ${TEMP_FILE})
    DB_VERSION=$(awk -F':' '/^version/ {print $2}' ${TEMP_FILE})

    if [ -e "${CODE_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ -e "${DB_VERSION}" ]; then
      echo "Unable to find the code version"
      exit 1
    fi

    if [ "$DB_VERSION" -ne "$CODE_VERSION" ]; then
      echo "code and DB versions are different. Blocking the deployment"
      exit 1
    fi
