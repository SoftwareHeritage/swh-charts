{{ if .Values.graphql.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql
  namespace: {{ .Values.namespace }}
  labels:
    app: graphql
spec:
  revisionHistoryLimit: 2
  replicas: {{ .Values.graphql.replicas | default 1 }}
  selector:
    matchLabels:
      app: graphql
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: graphql
      annotations:
        # Force a rollout upgrade if the configuration changes
        checksum/config: {{ include (print $.Template.BasePath "/graphql/configmap.yaml") . | sha256sum }}
    spec:
      {{- if and $.Values.podPriority.enabled $.Values.graphql.priorityClassName }}
      priorityClassName: {{ $.Values.namespace }}-{{ $.Values.graphql.priorityClassName }}
      {{ end }}
      containers:
        - name: graphql
          image: {{ .Values.swh_graphql_image }}:{{ .Values.swh_graphql_image_version }}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: {{ .Values.graphql.requestedMemory | default "150Mi" }}
              cpu: {{ .Values.graphql.requestedCpu | default "50m" }}
          {{- if or .Values.graphql.limitedMemory .Values.graphql.limitedCpu }}
            limits:
            {{- if .Values.graphql.limitedMemory }}
              memory: {{ .Values.graphql.limitedMemory }}
            {{- end }}
            {{- if .Values.graphql.limitedCpu }}
              cpu: {{ .Values.graphql.limitedCpu }}
            {{- end }}
          {{ end }}
          ports:
            - containerPort: {{ .Values.graphql.port }}
              name: rpc
          startupProbe:
            httpGet:
              path: /
              port: rpc
            failureThreshold: 30
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: rpc
            initialDelaySeconds: 10
            periodSeconds: 5
          env:
          - name: STATSD_HOST
            value: {{ $.Values.statsdExternalHost | default "prometheus-statsd-exporter" }}
          - name: STATSD_PORT
            value: {{ $.Values.statsdPort | default "9125" | quote }}
          - name: PORT
            value: "5013"
          - name: LOG_LEVEL
            value: {{ .Values.graphql.logLevel | quote }}
          {{ if .Values.graphql.gunicorn -}}
          - name: THREADS
            value: {{ .Values.graphql.gunicorn.threads | default 5 | quote }}
          - name: WORKERS
            value: {{ .Values.graphql.gunicorn.workers | default 2 | quote }}
          - name: TIMEOUT
            value: {{ .Values.graphql.gunicorn.timeout | default 60 | quote }}
          {{ end -}}
          {{ if .Values.graphql.sentry.enabled -}}
          - name: SWH_SENTRY_ENVIRONMENT
            value: {{ $.Values.sentry.environment }}
          - name: SWH_MAIN_PACKAGE
            value: swh.graphql
          - name: SWH_SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.graphql.sentry.secretKeyRef }}
                key: {{ $.Values.graphql.sentry.secretKeyName }}
                # 'name' secret should exist & include key
                # if the setting doesn't exist, sentry pushes will be disabled
                optional: true
          {{ end -}}
          volumeMounts:
            - name: config
              mountPath: /etc/swh/config.yml
              subPath: config.yml
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: graphql
            defaultMode: 0444

{{ end }}
