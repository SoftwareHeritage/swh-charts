{{ if .Values.deposit.enabled -}}
{{- $serviceType := "deposit" -}}
{{- $configChecksum := include (print $.Template.BasePath "/deposit/configmap.yaml") . | sha256sum }}
{{- $gunicornConfig := fromYaml (include "swh.gunicorn.config"
                                  (dict "configuration" .Values.deposit.gunicorn)) -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ $serviceType }}
  labels:
    app: {{ $serviceType }}
spec:
  revisionHistoryLimit: 2
  {{ if .Values.deposit.replicas -}}
  replicas: {{ .Values.deposit.replicas }}
  {{ end -}}
  selector:
    matchLabels:
      app: {{ $serviceType }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ $serviceType }}
      annotations:
        checksum/config: {{ $configChecksum }}
    spec:
      {{- if .Values.deposit.affinity }}
      affinity:
        {{- toYaml .Values.deposit.affinity | nindent 8 }}
      {{- end }}
      {{- if and $.Values.podPriority.enabled $.Values.deposit.priorityClassName }}
      priorityClassName: {{ $.Values.namespace }}-{{ $.Values.deposit.priorityClassName }}
      {{ end }}
      initContainers:
        - name: prepare-configuration
          image: debian:bullseye
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -c
            - eval echo "\"$(</etc/swh/configuration-template/config.yml.template)\"" > /etc/swh/config.yml
          env:
            {{- if .Values.deposit.sentry.enabled }}
            - name: SWH_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deposit.sentry.secretKeyRef }}
                  key: {{ .Values.deposit.sentry.secretKeyName }}
                  optional: false
            {{- end -}}
            {{- include "swh.secrets.envFromDeploymentConfig" (dict "Values" .Values "deploymentConfig" .Values.deposit) | nindent 12 }}
          volumeMounts:
            - name: configuration
              mountPath: /etc/swh
            - name: configuration-template
              mountPath: /etc/swh/configuration-template
        - name: prepare-static-folder
          image: {{ .Values.swh_deposit_image }}:{{ .Values.swh_deposit_image_version }}
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -c
            - cp -r $PWD/.local/lib/python3.10/site-packages/swh/deposit/static/ /usr/share/swh/deposit/static/
          volumeMounts:
          - name: static
            mountPath: /usr/share/swh/deposit/static
        {{- if .Values.deposit.migrationsEnabled }}
        - name: do-migration
          image: {{ .Values.swh_deposit_image }}:{{ .Values.swh_deposit_image_version }}
          imagePullPolicy: IfNotPresent
          env:
            - name: SWH_CONFIG_FILENAME
              value: /etc/swh/config.yml
          command:
            - django-admin
          args:
            - migrate
            - --settings=swh.deposit.settings.production
          volumeMounts:
            - name: configuration
              mountPath: /etc/swh
        {{ end }}
      containers:
        - name: {{ $serviceType }}
          resources:
            requests:
              memory: {{ .Values.deposit.requestedMemory | default "512Mi" }}
              cpu: {{ .Values.deposit.requestedCpu | default "500m" }}
          {{- if or .Values.deposit.limitedMemory .Values.deposit.limitedCpu }}
            limits:
            {{- if .Values.deposit.limitedMemory }}
              memory: {{ .Values.deposit.limitedMemory }}
            {{- end }}
            {{- if .Values.deposit.limitedCpu }}
              cpu: {{ .Values.deposit.limitedCpu }}
            {{- end }}
          {{ end }}
          image: {{ .Values.swh_deposit_image }}:{{ .Values.swh_deposit_image_version }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.deposit.port }}
              name: {{ $serviceType }}-app
          readinessProbe:
            httpGet:
              path: /
              port: {{ $serviceType }}-app
              httpHeaders:
                - name: Host
                  value: {{ first .Values.deposit.hosts }}
            initialDelaySeconds: 5
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 30
          livenessProbe:
            tcpSocket:
              port: {{ $serviceType }}-app
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 30
          command:
            - /bin/bash
          args:
            - -c
            - /opt/swh/entrypoint.sh
          env:
            - name: WORKERS
              value: {{ $gunicornConfig.workers | quote }}
            - name: THREADS
              value: {{ $gunicornConfig.threads | quote }}
            - name: TIMEOUT
              value: {{ $gunicornConfig.timeout | quote }}
            - name: STATSD_HOST
              value: {{ .Values.statsdExternalHost | default "prometheus-statsd-exporter" }}
            - name: STATSD_PORT
              value: {{ .Values.statsdPort | default "9125" | quote }}
            - name: STATSD_TAGS
              value: deployment:{{ $serviceType }}-app
            - name: STATSD_SERVICE_TYPE
              value: {{ $serviceType }}
            - name: SWH_LOG_LEVEL
              value: {{ .Values.deposit.logLevel | quote }}
            - name: SWH_CONFIG_FILENAME
              value: /etc/swh/config.yml
            - name: SWH_LOG_CONFIG_JSON
              value: /etc/swh/logging/logging-gunicorn.json
            {{- if .Values.deposit.sentry.enabled }}
            - name: SWH_SENTRY_ENVIRONMENT
              value: {{ .Values.sentry.environment }}
            - name: SWH_MAIN_PACKAGE
              value: swh.deposit
            - name: SWH_SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deposit.sentry.secretKeyRef }}
                  key: {{ .Values.deposit.sentry.secretKeyName }}
                  optional: false
            - name: SWH_SENTRY_DISABLE_LOGGING_EVENTS
              value: "true"
            {{- end }}
          volumeMounts:
          - name: configuration
            mountPath: /etc/swh
          - name: configuration-logging
            mountPath: /etc/swh/logging
          - name: localstorage
            mountPath: /tmp
        - name: nginx
          resources:
            requests:
              memory: {{ .Values.deposit.requestedMemory | default "512Mi" }}
              cpu: {{ .Values.deposit.requestedCpu | default "500m" }}
          image: nginx:bullseye
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: webstatic
          readinessProbe:
            httpGet:
              path: static/robots.txt
              port: webstatic
            initialDelaySeconds: 5
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: static/robots.txt
              port: webstatic
            initialDelaySeconds: 3
            periodSeconds: 10
          volumeMounts:
            - name: static
              mountPath: /usr/share/nginx/html
      volumes:
      - name: static
        emptyDir: {}
      - name: localstorage
        emptyDir: {}
      - name: configuration
        emptyDir: {}
      - name: configuration-template
        configMap:
         name: {{ $serviceType }}-configuration-template
         items:
         - key: "config.yml.template"
           path: "config.yml.template"
      - name: configuration-logging
        configMap:
          name: {{ $serviceType }}-configuration-logging
          items:
          - key: "logging-gunicorn.json"
            path: "logging-gunicorn.json"
{{ end }}
