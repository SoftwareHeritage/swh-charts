clusterName: test-staging-rke2

# Relay prometheus alerts to the admin cluster's ingress relay
alertmanagerConfig:
  enabled: true

metallb:
  enabled: true
  ipAddressPools:
    # Generic ipAddressPool (e.g. for main cluster ingress)
    - ip: 192.168.130.209/32
      # mandatory with serviceAllocation
      suffixName: ingress
      serviceAllocation:
        priority: 50
        namespaces:
          - ingress-nginx
    # Generic ipAddressPool (e.g. for main cluster ingress)
    - ip: 192.168.130.208/32
      # mandatory with serviceAllocation
      suffixName: pooler
      serviceAllocation:
        priority: 50
        namespaces:
          - cnpg
        serviceSelectors:
          - matchExpressions:
            - key: app
              operator: In
              values:
                - staging-secondary-dbs-pooler

podPriority:
  enabled: true
  priorities:
    # Note that each priority will be prefixed with its namespace (when declared in the
    # deployment). Because priority have a cluster-wide visibility (independently from
    # its namespace).
    system:
      range: 50000-100000
      value: 75000
      description: Highest pod priorities (ingress, operator, collector, controller)
    storages:
      range: 25000-26000
      value: 25500
      description: Backend storages used by other services (memcached, redis, ...)

# minioTestObjectStore:
#   destinationPath: s3://test/
#   endpointURL: https://minio.admin.swh.network
#   s3Credentials:
#     accessKeyId:
#       name: minio-test-bucket-secret
#       key: ACCESS_KEY_ID
#     secretAccessKey:
#       name: minio-test-bucket-secret
#       key: ACCESS_SECRET_KEY
#   wal:
#     compression: gzip
#   data:
#     additionalCommandArgs:
#       - "--min-chunk-size=5MB"
#       - "--read-timeout=60"
#       - "-vv"

clusterPgStagingDb1:
  name: cluster-pg-staging-db1
  password:
    name: cluster-staging-db1-postgres-user-credential
    key: password
  connectionParameters:
    # Use the correct IP or host name for the source database
    host: db1.internal.staging.swh.network
    user: postgres
    port: "5433"

cloudnativePg:
  enabled: true
  testing: true
  namespace: cnpg
  # Where to store backup (if enabled)
  # barmanobjectstoreRef: minioTestObjectStore
  # Cluster Postgresql to read db to initialize from
  externalClusterRef: clusterPgStagingDb1
  postgresql:
    parameters:
      max_worker_processes: "60"
    pg_hba:
      - host all all all md5
  # Exists as many cluster as we want
  deployments:
    staging-secondary-dbs:
      enabled: true
      instances: 1
      # Managed dbs
      initdb:
        type: monolith
        databases:
        - swh-blocking
        - swh-deposit
        - swh-masking
        - swh-vault
        - swh-web
        source: cluster-pg-staging-db1
      backup:
        enabled: true
        retention: "30d"
        name: daily-midnight
        # every day at midnight
        cron: "0 0 0 * * *"
      pooler:
        enabled: true
        type: ro
    staging-archive-db:
      enabled: false
      # Managed dbs (optional)
      initdb:
        type: microservice
        databases:
          # - swh
          - swh-scheduler
        source: cluster-pg-staging-db1
      backup:
        enabled: false
        retention: "10d"
        name: dayly-at-one
        # every day at 1am
        cron: "0 0 1 * * *"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "kubernetes.io/hostname"
                operator: In
                values:
                - "rancher-node-test-rke2-worker3"

rabbitmq:
  enabled: true
  replicas: 1
  deployments:
    scheduler:
      enabled: true

redis:
  enabled: true
  deployments:
    redis:
      appName: redis
      namespace: redis
      serviceMonitor:
        enabled: true
      redisExporter:
        enabled: true
      nodeSelector:
        kubernetes.io/hostname: rancher-node-test-rke2-worker2
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: local-persistent
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
