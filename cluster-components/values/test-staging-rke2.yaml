# Relay prometheus alerts to the admin cluster's ingress relay
alertmanager:
  enabled: true

svix:
  enabled: true
  version: v1.16
  ingress:
    host: svix-test.internal.staging.swh.network
    createTLS: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production-gandi
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    whitelistSourceRange:
      # cluster internal range ip
      - 10.42.0.0/16
      - 10.43.0.0/16
      # staging ip
      - 192.168.130.0/24
      # admin ip
      - 192.168.50.0/24
      # VPN ip
      - 192.168.101.0/24
  requestedMemory: 100Mi
  requestedCpu: 100m
  namespace: svix-server
  postgres:
    enabled: true
    requestedMemory: 100Mi
    requestedCpu: 100m
    persistentVolume: false
  redis:
    enabled: true
    requestedMemory: 100Mi
    requestedCpu: 100m
    persistentVolume: false
  whitelistSubnets: "[10.42.0.0/16,10.43.0.0/16]"

scrapeExternalMetrics:
  enabled: true
  deployments:
    # Integrate the rabbitmq metrics into the cluster. To allow crafting alertmanager
    # alerts. With this, we need to deactivate the prometheus scrapping from pergamon to
    # avoid duplicates (those are not readable from the cluster alertmanager)
    rabbitmq:
      namespace: rabbitmq
      port: 9419
      ips:
        - 192.168.130.50
      relabelings:
        # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
        - sourceLabels:
            - __address__
          targetLabel: __address__
          regex: "192.168.130.50(.*)"
          replacement: "scheduler0.internal.staging.swh.network$1"
          action: replace
