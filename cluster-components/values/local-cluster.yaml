cert-manager:
  enabled: false

# Relay cluster's alerts to the ircrelay
alertmanager:
  enabled: false
  ircrelay:
    enabled: true
    host: https://alertmanager-irc-relay.admin.swh.network/minikube-swh-sysadm

# Activate prometheus as this is not previously done (in contrast with other clusters
# provisioned by terraform which does the prometheus configuration too)
prometheus:
  enabled: false

alertmanagerIrcRelay:
  enabled: false
  ingress:
    enabled: true
  # Optional username for the bot to use (configured from secrets in other clusters)
  username: swhprombot
  # Different room to use than the production one
  room: minikube-swh-sysadm
  requestedMemory: "32Mi"
  requestedCpu: "100m"
  limitedMemory: "64Mi"
  limitedCpu: "200m"

blackboxExporter:
  enabled: false

podPriority:
  enabled: true

svix:
  enabled: false
  ingress:
    enabled: true
    host: svix-test
    createTLS: false
    # annotations:
    #   foo: bar
    # whitelistSourceRange:
    # - 192.168.49.0/24
  requestedMemory: 100Mi
  requestedCpu: 100m
  namespace: cluster-components
  postgres:
    enabled: true
    persistentVolume: false
  redis:
    enabled: true
    persistentVolume: false
    dsn: redis-svix.cluster-components

dockerCache:
  enabled: false
  ingress:
    tls:
      enabled: true
  instances:
    quay.io:
      enabled: false

rabbitmq:
  enabled: false
  namespace: cluster-components
  logLevel: info
  storageVolume:
    class: standard
  deployments:
    scheduler:
      enabled: true
      replicas: 1

cloudnativePg:
  enabled: false
  namespace: swh
  testing: true
  enableMonitoring: false
  storage:
    storageClass: standard
    size: 1Gi
  postgresql:
    pg_hba:
    - host all all all md5
  roles:
    - name: guest
      ensure: present
      comment: Guest
      login: true
      connectionLimit: -1
      inherit: true
      passwordSecret:
        name: swh-guest-postgresql-secret
  deployments:
    archive:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-swh-postgresql-secret
        databases:
          - swh
    maskingproxy:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-maskingproxy-postgresql-secret
        databases:
          - swhmaskingproxy
    scheduler:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-scheduler-swh-postgresql-secret
        databases:
          - swh-scheduler
    vault:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-vault-swh-postgresql-secret
        databases:
          - swh-vault
    indexer-storage:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-indexer-storage-swh-postgresql-secret
        databases:
          - swh-indexer
    web:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-web-swh-postgresql-secret
        databases:
          - swh-web
    scrubber:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-scrubber-swh-postgresql-secret
        databases:
          - swh-scrubber
    deposit:
      enabled: true
      initdb:
        type: microservice
        secretKeyRef: swh-deposit-swh-postgresql-secret
        databases:
          - swh-deposit

kafka:
  enabled: false
  namespace: swh
  replicas: 1
  replicationFactor: 1
  minInSyncReplicas: 1
  deployments:
    kafka-cluster:
      # storage:
      #   type: jbod
      #   volumes:
      #   - id: 0
      #     type: persistent-claim
      #     size: 1Gi
      #     deleteClaim: false
      #   - id: 1
      #     type: persistent-claim
      #     size: 1Gi
      #     deleteClaim: false
      pools:
        pool-a:
          roles:
            - broker
            - controller
          storage:
            type: jbod
            volumes:
              - id: 0
                type: persistent-claim
                size: 1Gi
                deleteClaim: false
        pool-b:
          roles:
            - broker
            - controller
          storage:
            type: jbod
            volumes:
              - id: 0
                type: persistent-claim
                size: 1Gi
                deleteClaim: false
      topics:
        swh.journal.objects.origin:
          partitions: 1
          replicas: 1
          config:
            retention.ms: 7200000
            segment.bytes: 1073741824
        swh.journal.objects.origin_visit: {}
        swh.journal.objects.origin_visit_status: {}
        swh.journal.objects.snapshot: {}
        swh.journal.objects.release: {}
        swh.journal.objects.revision: {}
        swh.journal.objects.directory: {}
        swh.journal.objects.content: {}
        swh.journal.objects.skipped_content: {}
        swh.journal.objects.extid: {}
        swh.journal.objects.metadata_authority: {}
        swh.journal.objects.metadata_fetcher: {}
        swh.journal.objects.raw_extrinsic_metadata: {}
        swh.journal.indexed.content_ctags: {}
        swh.journal.indexed.content_fossology_license: {}
        swh.journal.indexed.content_language: {}
        swh.journal.indexed.content_metadata: {}
        swh.journal.indexed.content_mimetype: {}
        swh.journal.indexed.directory_intrinsic_metadata: {}
        swh.journal.indexed.origin_extrinsic_metadata: {}
        swh.journal.indexed.origin_intrinsic_metadata: {}
        swh.journal.indexed.revision_intrinsic_metadata: {}
      # users:
      #   swh-minikube:
      #     secret:
      #       ref: kafka-user-secrets-swh-minikube
      #       key: BROKER_USER_PASSWORD
      #     resources:
      #       - topics:
      #           - swh.journal.objects.origin
      #           - swh.journal.objects.origin_visit
      #           - swh.journal.objects.origin_visit_status
      #           - swh.journal.objects.snapshot
      #           - swh.journal.objects.release
      #           - swh.journal.objects_privileged.release
      #           - swh.journal.objects.revision
      #           - swh.journal.objects_privileged.revision
      #           - swh.journal.objects.directory
      #           - swh.journal.objects.content
      #           - swh.journal.objects.skipped_content
      #           - swh.journal.objects.extid
      #           - swh.journal.objects.metadata_authority
      #           - swh.journal.objects.metadata_fetcher
      #           - swh.journal.objects.raw_extrinsic_metadata
      #         groups:
      #           - postgresql-replayer-origin
      #           - swh-minikube-postgresql-replayer-origin
      #           - swh-minikube-postgresql-replayer-content
      #           - swh-minikube-postgresql-replayer-directory
      #           - swh-storage-journal-writer
      #           - swh-minikube-swh-search-journal-client
      #           - swh-minikube-webhooks
      #           - swh-minikube-journal-checker
      #           - swh-minikube-scheduler-journal-client
      #           - swh-minikube-swh-search-journal-client-indexed
      #         operations:
      #           - Create
      #           - Describe
      #           - Read
      #           - Write
      #       - topics:
      #           - swh.journal.objects.origin_visit_status
      #         groups:
      #           - swh-scheduler-journal-client
      #         operations:
      #           - Create
      #           - Describe
      #           - Read
      #           - Write

cassandra:
  enabled: false
  namespace: swh
  storageConfig:
    cassandraDataVolumeClaimSpec:
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  deployments:
    cassandra-cluster:
      datacenters:
        - name: dc1
          replicas: 1

elasticsearch:
  enabled: false
  deployments:
    search:
      replicas: 1
      # For test environment (local-cluster, next-version) only
      disableSecurity: true
      disableTLS: true
      # version: 8.14.2
      nodeName: node
    # quickstart:
    #   replicas: 1

redis:
  enabled: false
  namespace: swh
  deployments:
    counters:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes:
              - ReadWriteOnce
    svix:
      enabled: true
      namespace: cluster-components
      serviceMonitor:
         enabled: false
      redisExporter:
        enabled: true
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
      extraConfig:
        enabled: true
        data: |
          save 60 500
          appendonly yes
          appendfsync everysec
