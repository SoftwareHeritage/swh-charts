{{- if .Values.cloudnativePg.enabled -}}
{{- $namespace := .Values.cloudnativePg.namespace -}}
{{- range $cluster_name, $cluster_config := .Values.cloudnativePg.deployments -}}
{{- if or (not (hasKey $cluster_config "enabled")) (get $cluster_config "enabled") -}}
{{- $barmanObjectStoreRef := get $cluster_config "barmanObjectStoreRef" | default
      (get $.Values.cloudnativePg "barmanObjectStoreRef") -}}
{{- $barmanObjectStoreDict := get $.Values $barmanObjectStoreRef -}}
{{- $externalClusterRef := get $cluster_config "externalClusterRef" | default
      (get $.Values.cloudnativePg "externalClusterRef") -}}
{{- $externalPgClusterDict := get $.Values $externalClusterRef -}}
{{- $db_type := dig "initdb" "type" "monolith" $cluster_config -}}
{{- $databases := required (print "Missing <$cluster_config.initdb.databases> value managed db in cluster <" $cluster_name ">") $cluster_config.initdb.databases -}}
{{- $config_postgresql := $cluster_config.postgresql | default $.Values.cloudnativePg.postgresql | default dict -}}
{{- $affinity := $cluster_config.affinity | default $.Values.cloudnativePg.affinity | default dict -}}
{{- $testing := $cluster_config.testing | default "false" -}}
{{- $roles := $cluster_config.roles | default $.Values.cloudnativePg.roles -}}
{{- $storage := $cluster_config.storage | default $.Values.cloudnativePg.storage | default dict -}}
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ $cluster_name }}
  namespace: {{ $namespace }}
spec:
  instances: {{ $cluster_config.instances | default 1 }}
  {{ if $testing }}
  enablePDB: false
  {{ end }}
  # Rolling update strategy:
  # - unsupervised: automated update of the primary once all
  #                 replicas have been upgraded (default)
  # - supervised: requires manual supervision to perform
  #               the switchover of the primary
  # https://cloudnative-pg.io/documentation/1.23/rolling_update/
  primaryUpdateStrategy: unsupervised
  enableSuperuserAccess: true

  {{- if $affinity }}
  affinity:
    {{- toYaml $affinity | nindent 4 }}
  {{ end }}

  {{- if $roles }}
  managed:
    roles:
      {{ toYaml $roles | nindent 6 }}
  {{ end }}

  {{- if $cluster_config.initdb }}
  {{- $secretKeyRef := $cluster_config.initdb.secretKeyRef | default $.Values.cloudnativePg.secretKeyRef -}}

  bootstrap:
    initdb:
      {{ if eq $db_type "microservice" }}
      # Use the following to define the database's name (default <app>).
      # And its associated owner
      database: {{ first $databases }}
      owner: {{ first $databases }}
      {{ end }}
      {{ if $secretKeyRef }}
      secret:
        name: {{ $secretKeyRef }}
      {{ end }}
      # The following optionals are the equivalent of flags passed to initdb
      # commented because those are already the default values
      # --encoding
      # encoding: UTF8
      # --lc-ctype
      # localeCType: C
      # --lc-collate
      # localeCollate: C
      # -k option to enable checksums on data pages to help detect I/O
      # -corruption
      dataChecksums: true
      {{ if $cluster_config.initdb.source }}
      import:
        # 2 types possibles
        # - monolith: for one cluster with all dbs
        # - microservice (recommended): one db per cluster (lots of pods)
        type: {{ $db_type }}
        databases:
          {{- toYaml $databases | nindent 10 }}
        {{ if eq $db_type "monolith" }}
        roles:
          - "*"
        {{ end }}
        source:
          externalCluster: {{ $cluster_config.initdb.source }}
      {{ end }}

  # Reference to postgresql source cluster to initialize db(s) from
  {{- if and $cluster_config.initdb $cluster_config.initdb.source $externalPgClusterDict }}
  externalClusters:
    {{- toYaml (list $externalPgClusterDict) | nindent 4 }}
  {{- end }}
  {{- end }}

  # Parameters and pg_hba configuration will be append
  # to the default ones to make the cluster work
  {{- if $config_postgresql }}
  postgresql:
    {{- toYaml $config_postgresql | nindent 4 }}
  {{ end }}

  {{- if $storage }}
  storage:
    {{- toYaml $storage | nindent 4 }}
  {{ end }}
  # walStorage:
  #   storageClass: local-persistent
  #   size: 1Gi

  monitoring:
    enablePodMonitor: true

  {{- if and $cluster_config.backup $cluster_config.backup.enabled }}
  # Backup properties
  # This assumes a local minio setup
  backup:
    volumeSnapshot:
      className: local-persistent
      online: true
      # onlineConfiguration:
      #   immediateCheckpoint: true
      #   waitForArchive: false
    retentionPolicy: {{ $cluster_config.backup.retention | default "30d" | quote }}
    {{- if $barmanObjectStoreDict }}
    barmanObjectStore:
      {{- toYaml $barmanObjectStoreDict | nindent 6 }}
    {{- end }}
  {{ end }}

{{ end }}
{{ end }}
{{ end }}
